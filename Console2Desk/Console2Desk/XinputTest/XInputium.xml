<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XInputium</name>
    </assembly>
    <members>
        <member name="T:XInputium.ActivationInputEvent">
            <summary>
            Implements an <see cref="T:XInputium.InputEvent"/> that activates/deactivates 
            when a custom condition is met/unmet, and triggers whenever it 
            is activated, deactivated or while it is active, depending on the 
            triggering mode you specify.
            </summary>
            <remarks>
            <see cref="T:XInputium.ActivationInputEvent"/> is a very versatile 
            <see cref="T:XInputium.InputEvent"/> that enables you to set up very specific 
            events without requiring too much code. 
            <br/><br/>
            <see cref="T:XInputium.ActivationInputEvent"/> can have two states: active 
            or inactive. Depending on the value of <see cref="P:XInputium.ActivationInputEvent.TriggerMode"/> 
            property, it triggers the event only when its state changes from 
            inactive to active (activation), only when the state changes from 
            active to inactive (deactivation), whenever the state changes 
            (activation or deactivation), while it is active, or never.
            <br/><br/>
            <see cref="T:XInputium.ActivationInputEvent"/> determines its state by calling 
            a function your provide. That function must return 
            <see langword="true"/> to indicate the active state, or 
            <see langword="false"/> to indicate the inactive state. The function 
            is called on every update from the input system hosting the event.
            <br/><br/>
            Although your custom function is what determines the state of the 
            <see cref="T:XInputium.ActivationInputEvent"/>, depending on several properties 
            of the <see cref="T:XInputium.ActivationInputEvent"/> instance, the change of 
            state may not be immediate. The <see cref="P:XInputium.ActivationInputEvent.ActivationDelay"/> 
            property specifies a delay between the moment your custom function
            starts returning <see langword="true"/> and the moment the event 
            will activate (change its state to active). If, during this delay, 
            your function returns <see langword="false"/>, 
            <see cref="T:XInputium.ActivationInputEvent"/> will abort the activation 
            process. Similarly to <see cref="P:XInputium.ActivationInputEvent.ActivationDelay"/> property, there 
            is <see cref="P:XInputium.ActivationInputEvent.DeactivationDelay"/> property, that works similarly, 
            but for the deactivation.
            <br/><br/>
            There's also <see cref="P:XInputium.ActivationInputEvent.ActiveTimeout"/> property, that specifies 
            the maximum duration the <see cref="T:XInputium.ActivationInputEvent"/> will 
            ever be active â€” once the activation occurs, if this timeout expires, 
            the event deactivates, even if your custom function keeps returning 
            <see langword="true"/>. Then, when your function returns 
            <see langword="false"/> again, activation is allowed to occur again.
            <br/><br/>
            To enable you to pass information between the code that registers 
            the event and the code that handles the event, 
            <see cref="T:XInputium.ActivationInputEvent"/> provides the <see cref="P:XInputium.ActivationInputEvent.Parameter"/> 
            property, that can be set with a custom object you specify.
            <br/><br/>
            The use cases of <see cref="T:XInputium.ActivationInputEvent"/> are many. You 
            can use it to get notified when a specific condition starts being 
            met, when it stops being met, both, or while it is met. You can also 
            fine-tune the <see cref="P:XInputium.ActivationInputEvent.ActivationDelay"/> and 
            <see cref="P:XInputium.ActivationInputEvent.DeactivationDelay"/> properties to ignore short moments of 
            unmet conditions. A valid example would be to use 
            <see cref="T:XInputium.ActivationInputEvent"/> to notify you after a specific 
            button or set of buttons is held by, at least, a specific amount of 
            time. Note that, for single buttons, you can use the specialized 
            <see cref="T:XInputium.DigitalButtonInputEvent`1"/> class to achieve the same 
            functionality. See <see cref="T:XInputium.DigitalButtonInputEvent`1"/> for more 
            information.
            </remarks>
            <seealso cref="T:XInputium.InputEvent"/>
            <seealso cref="T:XInputium.ActivationInputEventArgs"/>
            <seealso cref="T:XInputium.ActivationInputEventTriggerMode"/>
        </member>
        <member name="M:XInputium.ActivationInputEvent.#ctor(System.Func{System.Boolean},System.TimeSpan,System.TimeSpan,System.TimeSpan,XInputium.ActivationInputEventTriggerMode,System.Object)">
            <summary>
            Initializes a new instance of an <see cref="T:XInputium.ActivationInputEvent"/> 
            class, that uses the specified activator function, activation and 
            deactivation delays, an active state timeout, a specific trigger
            mode and a custom parameter object.
            </summary>
            <param name="activator">A function that is called on every update
            that determines the active/inactive state the event must have. 
            This is usually a function that evaluates a specific condition.</param>
            <param name="activationDelay">The amount of delay since the 
            <paramref name="activator"/> function starts returning 
            <see langword="true"/>, until the event activates. If you specify 
            <see cref="F:System.TimeSpan.Zero"/>, the event triggers immediately upon 
            activation.</param>
            <param name="deactivationDelay">The amount of delay since the 
            <paramref name="activator"/> function starts returning 
            <see langword="false"/>, until the event deactivates. If you specify 
            <see cref="F:System.TimeSpan.Zero"/>, the event triggers immediately upon 
            deactivation.</param>
            <param name="activeTimeout">The maximum amount of time the event 
            will be allowed to be active. After this expires, the event will
            deactivate, regardless of other conditions. If you specify 
            <see cref="F:System.TimeSpan.Zero"/>, the event deactivates immediately 
            after activation.</param>
            <param name="triggerMode">An 
            <see cref="T:XInputium.ActivationInputEventTriggerMode"/> constant that 
            specifies when the event can trigger.</param>
            <param name="parameter">A custom object that will be passed with 
            the event arguments to event handlers. You can specify 
            <see langword="null"/> to use no parameter object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="activator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="triggerMode"/>
            is not a defined constant in an 
            <see cref="T:XInputium.ActivationInputEventTriggerMode"/> enumeration.</exception>
        </member>
        <member name="M:XInputium.ActivationInputEvent.#ctor(System.Func{System.Boolean},System.TimeSpan,System.TimeSpan,System.TimeSpan,XInputium.ActivationInputEventTriggerMode)">
            <summary>
            Initializes a new instance of an <see cref="T:XInputium.ActivationInputEvent"/> 
            class, that uses the specified activator function, activation and 
            deactivation delays, an active state timeout, and a specific trigger 
            mode.
            </summary>
            <param name="activator">A function that is called on every update
            that determines the active/inactive state the event must have. 
            This is usually a function that evaluates a specific condition.</param>
            <param name="activationDelay">The amount of delay since the 
            <paramref name="activator"/> function starts returning 
            <see langword="true"/>, until the event activates. If you specify 
            <see cref="F:System.TimeSpan.Zero"/>, the event triggers immediately upon 
            activation.</param>
            <param name="deactivationDelay">The amount of delay since the 
            <paramref name="activator"/> function starts returning 
            <see langword="false"/>, until the event deactivates. If you specify 
            <see cref="F:System.TimeSpan.Zero"/>, the event triggers immediately upon 
            deactivation.</param>
            <param name="activeTimeout">The maximum amount of time the event 
            will be allowed to be active. After this expires, the event will
            deactivate, regardless of other conditions. If you specify 
            <see cref="F:System.TimeSpan.Zero"/>, the event deactivates immediately 
            after activation.</param>
            <param name="triggerMode">An 
            <see cref="T:XInputium.ActivationInputEventTriggerMode"/> constant that 
            specifies when the event can trigger.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="activator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="triggerMode"/>
            is not a defined constant in an 
            <see cref="T:XInputium.ActivationInputEventTriggerMode"/> enumeration.</exception>
        </member>
        <member name="M:XInputium.ActivationInputEvent.#ctor(System.Func{System.Boolean},System.TimeSpan,System.TimeSpan,XInputium.ActivationInputEventTriggerMode)">
            <summary>
            Initializes a new instance of an <see cref="T:XInputium.ActivationInputEvent"/> 
            class, that uses the specified activator function, activation and 
            deactivation delays, and a specific trigger mode.
            </summary>
            <param name="activator">A function that is called on every update
            that determines the active/inactive state the event must have. 
            This is usually a function that evaluates a specific condition.</param>
            <param name="activationDelay">The amount of delay since the 
            <paramref name="activator"/> function starts returning 
            <see langword="true"/>, until the event activates. If you specify 
            <see cref="F:System.TimeSpan.Zero"/>, the event triggers immediately upon 
            activation.</param>
            <param name="deactivationDelay">The amount of delay since the 
            <paramref name="activator"/> function starts returning 
            <see langword="false"/>, until the event deactivates. If you specify 
            <see cref="F:System.TimeSpan.Zero"/>, the event triggers immediately upon 
            deactivation.</param>
            <param name="triggerMode">An 
            <see cref="T:XInputium.ActivationInputEventTriggerMode"/> constant that 
            specifies when the event can trigger.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="activator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="triggerMode"/>
            is not a defined constant in an 
            <see cref="T:XInputium.ActivationInputEventTriggerMode"/> enumeration.</exception>
        </member>
        <member name="M:XInputium.ActivationInputEvent.#ctor(System.Func{System.Boolean},XInputium.ActivationInputEventTriggerMode)">
            <summary>
            Initializes a new instance of an <see cref="T:XInputium.ActivationInputEvent"/> 
            class, that uses the specified activator function, and a specific 
            trigger mode.
            </summary>
            <param name="activator">A function that is called on every update
            that determines the active/inactive state the event must have. 
            This is usually a function that evaluates a specific condition.</param>
            <param name="triggerMode">An 
            <see cref="T:XInputium.ActivationInputEventTriggerMode"/> constant that 
            specifies when the event can trigger.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="activator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="triggerMode"/>
            is not a defined constant in an 
            <see cref="T:XInputium.ActivationInputEventTriggerMode"/> enumeration.</exception>
        </member>
        <member name="M:XInputium.ActivationInputEvent.#ctor(System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of an <see cref="T:XInputium.ActivationInputEvent"/> 
            class, that uses the specified activator function, and uses 
            <see cref="F:XInputium.ActivationInputEventTriggerMode.OnActivationAndDeactivation"/> 
            as its trigger mode.
            </summary>
            <param name="activator">A function that is called on every update
            that determines the active/inactive state the event must have. 
            This is usually a function that evaluates a specific condition.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="activator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:XInputium.ActivationInputEvent.ActivationDelay">
            <summary>
            Gets or sets a <see cref="T:System.TimeSpan"/> that represents the minimum 
            amount of time by which the activator function must return 
            <see langword="true"/> for the event to change from inactive to 
            active state, triggering the event on activation.
            </summary>
            <value>A <see cref="T:System.TimeSpan"/> object.
            The default value is <see cref="F:System.TimeSpan.Zero"/>.</value>
            <remarks>
            When the activation function starts returning <see langword="true"/>, 
            the event will only be triggered if the function keeps returning 
            <see langword="true"/> continuously during, at least, the amount of 
            time specified by this property. This is useful for conditions that 
            need to hold for an event to be triggered (for instance, a button hold 
            event).
            </remarks>
            <seealso cref="P:XInputium.ActivationInputEvent.DeactivationDelay"/>
            <seealso cref="P:XInputium.ActivationInputEvent.ActiveTimeout"/>
            <seealso cref="P:XInputium.ActivationInputEvent.TriggerMode"/>
        </member>
        <member name="P:XInputium.ActivationInputEvent.DeactivationDelay">
            <summary>
            Gets or sets a <see cref="T:System.TimeSpan"/> that represents the minimum 
            amount of time by which the activator function must return 
            <see langword="false"/> for the event to change from active to 
            inactive state, triggering the event on deactivation.
            </summary>
            <value>A <see cref="T:System.TimeSpan"/> object.
            The default value is <see cref="F:System.TimeSpan.Zero"/>.</value>
            <remarks>
            When the activation function starts returning <see langword="false"/>, 
            the event will only be triggered if the function keeps returning 
            <see langword="false"/> continuously during, at least, the amount of 
            time specified by this property. This is useful for conditions that 
            must ignore short periods of unmet criteria (for instance, an event 
            that triggers when a joystick stops moving, but needs to ignore very
            short no-movement periods).
            </remarks>
            <seealso cref="P:XInputium.ActivationInputEvent.ActivationDelay"/>
            <seealso cref="P:XInputium.ActivationInputEvent.TriggerMode"/>
        </member>
        <member name="P:XInputium.ActivationInputEvent.ActiveTimeout">
            <summary>
            Gets or sets a <see cref="T:System.TimeSpan"/> that represents the maximum 
            amount of time the event will be active, even when the activator 
            function keeps returning <see langword="true"/>. In other words, 
            this specifies the maximum allowed active state duration for the 
            event.
            </summary>
            <value>A <see cref="T:System.TimeSpan"/> object. If you specify 
            <see cref="F:System.TimeSpan.Zero"/>, the event will deactivate immediately 
            after it activates.
            The default value is <see cref="F:System.TimeSpan.MaxValue"/>.</value>
            <remarks>
            After the event is activated, if it doesn't get deactivated during 
            the period of time specified by this property, it is forced to 
            deactivate when this period expires, even if other properties specify 
            otherwise. This can be useful in situations where you need to limit 
            the duration a specific criteria is valid.
            </remarks>
            <seealso cref="P:XInputium.ActivationInputEvent.ActivationDelay"/>
            <seealso cref="P:XInputium.ActivationInputEvent.DeactivationDelay"/>
        </member>
        <member name="P:XInputium.ActivationInputEvent.TriggerMode">
            <summary>
            Gets or sets an <see cref="T:XInputium.ActivationInputEventTriggerMode"/> constant 
            that specifies when the <see cref="T:XInputium.ActivationInputEvent"/> must 
            trigger.
            </summary>
            <value>An <see cref="T:XInputium.ActivationInputEventTriggerMode"/> constant.
            The default value is 
            <see cref="F:XInputium.ActivationInputEventTriggerMode.OnActivationAndDeactivation"/>.</value>
            <exception cref="T:System.ArgumentException">The value being set to the 
            property is not a defined constant of an 
            <see cref="T:XInputium.ActivationInputEventTriggerMode"/> enumeration.</exception>
            <seealso cref="T:XInputium.ActivationInputEventTriggerMode"/>
        </member>
        <member name="P:XInputium.ActivationInputEvent.Parameter">
            <summary>
            Gets or sets the user defined object associated with the 
            current <see cref="T:XInputium.ActivationInputEvent"/> instance.
            </summary>
            <remarks>
            You can use this property to set a custom object, that is passed 
            to the <see cref="T:XInputium.ActivationInputEventArgs"/> instance when the 
            event is triggered. See 
            <see cref="P:XInputium.ActivationInputEventArgs.Parameter"/> for more 
            information.
            <br/><br/>
            This property can be useful when you need to pass information
            from the code that is registering the 
            <see cref="T:XInputium.ActivationInputEvent"/> to the code that is handling
            it when it is triggered.
            </remarks>
            <seealso cref="P:XInputium.ActivationInputEventArgs.Parameter"/>
        </member>
        <member name="P:XInputium.ActivationInputEvent.IsActive">
            <summary>
            Gets a <see cref="T:System.Boolean"/> that indicates if the 
            <see cref="T:XInputium.ActivationInputEvent"/> is currently active.
            </summary>
            <seealso cref="P:XInputium.ActivationInputEvent.CurrentStateDuration"/>
            <seealso cref="P:XInputium.ActivationInputEvent.PreviousStateDuration"/>
            <seealso cref="P:XInputium.ActivationInputEventArgs.IsActive"/>
        </member>
        <member name="P:XInputium.ActivationInputEvent.PreviousStateDuration">
            <summary>
            Gets the amount of input time spent on the previous 
            active/inactive state of the <see cref="T:XInputium.ActivationInputEvent"/>.
            </summary>
            <returns>The duration of the last active/inactive state, before 
            the current state. If that state was 'active', the returned value 
            is never greater than <see cref="P:XInputium.ActivationInputEvent.ActiveTimeout"/>.</returns>
            <remarks>
            This property returns the amount of time elapsed between 
            the second to last and the last change to the value of 
            <see cref="P:XInputium.ActivationInputEvent.IsActive"/> property. For instance, if the current 
            state is 'inactive', this property returns the duration of the 
            most recent active state. The time information is in input time,
            as measured by the input code that is hosting the 
            <see cref="T:XInputium.ActivationInputEvent"/>.
            </remarks>
            <seealso cref="P:XInputium.ActivationInputEvent.CurrentStateDuration"/>
            <seealso cref="P:XInputium.ActivationInputEvent.IsActive"/>
            <seealso cref="P:XInputium.ActivationInputEventArgs.PreviousStateDuration"/>
        </member>
        <member name="P:XInputium.ActivationInputEvent.CurrentStateDuration">
            <summary>
            Gets the amount of input time elapsed since the last 
            change to the active/inactive state.
            </summary>
            <remarks>
            This property returns the amount of time elapsed since 
            the last change to the value of <see cref="P:XInputium.ActivationInputEvent.IsActive"/>
            property. For instance, if the current state is 'inactive',
            this property returns the amount of time elapsed since the 
            deactivation occurred. The time information is in input 
            time, as measured by the input code that is hosting the 
            <see cref="T:XInputium.ActivationInputEvent"/>.
            <br/><br/>
            To obtain the duration of the state that preceded the 
            current state, use <see cref="P:XInputium.ActivationInputEvent.PreviousStateDuration"/> property.
            See <see cref="P:XInputium.ActivationInputEvent.PreviousStateDuration"/> for more information.
            </remarks>
            <seealso cref="P:XInputium.ActivationInputEvent.PreviousStateDuration"/>
            <seealso cref="P:XInputium.ActivationInputEvent.IsActive"/>
            <seealso cref="P:XInputium.ActivationInputEventArgs.CurrentStateDuration"/>
        </member>
        <member name="M:XInputium.ActivationInputEvent.OnUpdate(System.TimeSpan)">
            <summary>
            Updates the event logic and reevaluates triggering conditions, 
            and, if these conditions are met, triggers the event.
            Overrides <see cref="M:XInputium.InputEvent.OnUpdate(System.TimeSpan)"/>.
            </summary>
            <param name="time">Amount of time elapsed since the 
            last call to <see cref="M:XInputium.InputEvent.Update(System.TimeSpan)"/> method.</param>
        </member>
        <member name="T:XInputium.ActivationInputEventArgs">
            <summary>
            Encapsulates event arguments for an <see cref="T:XInputium.ActivationInputEvent"/> 
            event.
            </summary>
            <seealso cref="T:XInputium.ActivationInputEvent"/>
            <seealso cref="T:XInputium.ActivationInputEventHandler"/>
        </member>
        <member name="M:XInputium.ActivationInputEventArgs.#ctor(XInputium.ActivationInputEvent)">
            <summary>
            Creates a new instance of an <see cref="T:XInputium.ActivationInputEventArgs"/> 
            class, that is associated with the specified 
            <see cref="T:XInputium.ActivationInputEventArgs"/> instance.
            </summary>
            <param name="inputEvent"></param>
        </member>
        <member name="P:XInputium.ActivationInputEventArgs.IsActive">
            <summary>
            Gets a <see cref="T:System.Boolean"/> that indicates if the activation event 
            is currently active.
            </summary>
            <returns><see langword="true"/> if the event is active;
            otherwise, <see langword="false"/>.</returns>
            <remarks>
            The value this property returns is the current real-time value
            the triggering <see cref="T:XInputium.ActivationInputEvent"/> has, not the 
            value it had in the moment the event was triggered. If you're 
            consuming the current <see cref="T:XInputium.ActivationInputEventArgs"/> 
            instance in the moment the event was triggered, the value 
            returned by this property is accurate. This is because each  
            <see cref="T:XInputium.ActivationInputEventArgs"/> instance is a singleton 
            that is associated with an <see cref="T:XInputium.ActivationInputEvent"/> 
            instance.
            </remarks>
            <seealso cref="P:XInputium.ActivationInputEventArgs.PreviousStateDuration"/>
            <seealso cref="P:XInputium.ActivationInputEventArgs.CurrentStateDuration"/>
            <seealso cref="P:XInputium.ActivationInputEvent.IsActive"/>
        </member>
        <member name="P:XInputium.ActivationInputEventArgs.PreviousStateDuration">
            <summary>
            Gets the amount of input time spent on the previous 
            active/inactive state of the <see cref="T:XInputium.ActivationInputEvent"/>.
            </summary>
            <returns>The duration of the last active/inactive state, before 
            the current state. If that state was 'active', the returned value 
            is never greater than 
            <see cref="P:XInputium.ActivationInputEvent.ActiveTimeout"/>.</returns>
            <remarks>
            This property returns the amount of time elapsed between 
            the second to last and the last change to the value of 
            <see cref="P:XInputium.ActivationInputEventArgs.IsActive"/> property. For instance, if the current 
            state is 'inactive', this property returns the duration of the 
            most recent active state. The time information is in input time,
            as measured by the input code that is hosting the 
            <see cref="T:XInputium.ActivationInputEvent"/>.
            <br/><br/>
            The value this property returns is the current real-time value
            the triggering <see cref="T:XInputium.ActivationInputEvent"/> has, not the 
            value it had in the moment the event was triggered. If you're 
            consuming the current <see cref="T:XInputium.ActivationInputEventArgs"/> 
            instance in the moment the event was triggered, the value 
            returned by this property is accurate. This is because each  
            <see cref="T:XInputium.ActivationInputEventArgs"/> instance is a singleton 
            that is associated with an <see cref="T:XInputium.ActivationInputEvent"/> 
            instance.
            </remarks>
            <seealso cref="P:XInputium.ActivationInputEventArgs.CurrentStateDuration"/>
            <seealso cref="P:XInputium.ActivationInputEventArgs.IsActive"/>
            <seealso cref="P:XInputium.ActivationInputEvent.PreviousStateDuration"/>
        </member>
        <member name="P:XInputium.ActivationInputEventArgs.CurrentStateDuration">
            <summary>
            Gets the amount of input time elapsed since the last 
            change to the active/inactive state.
            </summary>
            <remarks>
            This property returns the amount of time elapsed since 
            the last change to the value of <see cref="P:XInputium.ActivationInputEventArgs.IsActive"/>
            property. For instance, if the current state is 'inactive',
            this property returns the amount of time elapsed since the 
            deactivation occurred. The time information is in input 
            time, as measured by the input code that is hosting the 
            <see cref="T:XInputium.ActivationInputEvent"/>.
            <br/><br/>
            To obtain the duration of the state that preceded the 
            current state, use <see cref="P:XInputium.ActivationInputEventArgs.PreviousStateDuration"/> property.
            See <see cref="P:XInputium.ActivationInputEventArgs.PreviousStateDuration"/> for more information.
            <br/><br/>
            The value this property returns is the current real-time value
            the triggering <see cref="T:XInputium.ActivationInputEvent"/> has, not the 
            value it had in the moment the event was triggered. If you're 
            consuming the current <see cref="T:XInputium.ActivationInputEventArgs"/> 
            instance in the moment the event was triggered, the value 
            returned by this property is accurate. This is because each  
            <see cref="T:XInputium.ActivationInputEventArgs"/> instance is a singleton 
            that is associated with an <see cref="T:XInputium.ActivationInputEvent"/> 
            instance.
            </remarks>
            <seealso cref="P:XInputium.ActivationInputEventArgs.PreviousStateDuration"/>
            <seealso cref="P:XInputium.ActivationInputEventArgs.IsActive"/>
            <seealso cref="P:XInputium.ActivationInputEvent.CurrentStateDuration"/>
        </member>
        <member name="P:XInputium.ActivationInputEventArgs.Parameter">
            <summary>
            Gets the user defined object passed to the 
            <see cref="T:XInputium.ActivationInputEvent"/>.
            </summary>
            <remarks>
            The value this property returns is the current real-time value
            the triggering <see cref="T:XInputium.ActivationInputEvent"/> has, not the 
            value it had in the moment the event was triggered. If you're 
            consuming the current <see cref="T:XInputium.ActivationInputEventArgs"/> 
            instance in the moment the event was triggered, the value 
            returned by this property is accurate. This is because each  
            <see cref="T:XInputium.ActivationInputEventArgs"/> instance is a singleton 
            that is associated with an <see cref="T:XInputium.ActivationInputEvent"/> 
            instance.
            </remarks>
            <seealso cref="P:XInputium.ActivationInputEvent.Parameter"/>
        </member>
        <member name="P:XInputium.ActivationInputEventArgs.TriggerMode">
            <summary>
            Gets the <see cref="T:XInputium.ActivationInputEventTriggerMode"/> constant 
            that specifies the trigger mode the associated 
            <see cref="T:XInputium.ActivationInputEvent"/> is using.
            </summary>
            <seealso cref="P:XInputium.ActivationInputEvent.TriggerMode"/>
            <seealso cref="T:XInputium.ActivationInputEventTriggerMode"/>
        </member>
        <member name="T:XInputium.ActivationInputEventHandler">
            <summary>
            Event handler for an <see cref="T:XInputium.ActivationInputEvent"/> event.
            </summary>
            <param name="sender">Object that triggered the event.</param>
            <param name="e"><see cref="T:XInputium.ActivationInputEventArgs"/> object 
            containing data about the event.</param>
            <seealso cref="T:XInputium.ActivationInputEvent"/>
            <seealso cref="T:XInputium.ActivationInputEventArgs"/>
        </member>
        <member name="T:XInputium.ActivationInputEventTriggerMode">
            <summary>
            Exposes constants that specify when an <see cref="T:XInputium.ActivationInputEvent"/>
            should trigger.
            </summary>
            <seealso cref="T:XInputium.ActivationInputEvent"/>
            <seealso cref="P:XInputium.ActivationInputEvent.TriggerMode"/>
        </member>
        <member name="F:XInputium.ActivationInputEventTriggerMode.Never">
            <summary>
            The <see cref="T:XInputium.ActivationInputEvent"/> will never trigger.
            This can be used to temporarily disable the event.
            </summary>
        </member>
        <member name="F:XInputium.ActivationInputEventTriggerMode.OnActivation">
            <summary>
            The <see cref="T:XInputium.ActivationInputEvent"/> will trigger when it 
            activates (when it changes from inactive to active).
            </summary>
            <seealso cref="F:XInputium.ActivationInputEventTriggerMode.OnDeactivation"/>
        </member>
        <member name="F:XInputium.ActivationInputEventTriggerMode.OnDeactivation">
            <summary>
            The <see cref="T:XInputium.ActivationInputEvent"/> will trigger when it 
            deactivates (when it changes from active to inactive).
            </summary>
            <seealso cref="F:XInputium.ActivationInputEventTriggerMode.OnActivation"/>
        </member>
        <member name="F:XInputium.ActivationInputEventTriggerMode.OnActivationAndDeactivation">
            <summary>
            The <see cref="T:XInputium.ActivationInputEvent"/> will trigger whenever 
            its active state changes.
            </summary>
            <seealso cref="F:XInputium.ActivationInputEventTriggerMode.OnActivation"/>
            <seealso cref="F:XInputium.ActivationInputEventTriggerMode.OnDeactivation"/>
        </member>
        <member name="F:XInputium.ActivationInputEventTriggerMode.WhileActive">
            <summary>
            The <see cref="T:XInputium.ActivationInputEvent"/> will trigger on every 
            update, while its state is 'active'. This can be used to 
            continuously trigger the event while a specific condition is 
            met.
            </summary>
        </member>
        <member name="T:XInputium.DigitalButton">
            <summary>
            Implements an <see cref="T:XInputium.EventDispatcherObject"/> that 
            represents a button that has two states â€” pressed and 
            released â€” and provides the means to measure elapsed 
            time between those states.
            </summary>
            <seealso cref="T:XInputium.EventDispatcherObject"/>
            <seealso cref="T:XInputium.Trigger"/>
            <seealso cref="T:XInputium.Joystick"/>
        </member>
        <member name="E:XInputium.DigitalButton.IsPressedChanged">
            <summary>
            It's invoked whenever the value of <see cref="P:XInputium.DigitalButton.IsPressed"/> 
            property changes.
            </summary>
            <seealso cref="P:XInputium.DigitalButton.IsPressed"/>
            <seealso cref="M:XInputium.DigitalButton.OnIsPressedChanged"/>
        </member>
        <member name="E:XInputium.DigitalButton.Pressed">
            <summary>
            It's invoked when the value of <see cref="P:XInputium.DigitalButton.IsPressed"/> 
            property was changed from <see langword="false"/> to 
            <see langword="true"/>, indicating the button has just 
            began being pressed.
            </summary>
            <seealso cref="E:XInputium.DigitalButton.Released"/>
            <seealso cref="E:XInputium.DigitalButton.IsPressedChanged"/>
            <seealso cref="P:XInputium.DigitalButton.IsPressed"/>
        </member>
        <member name="E:XInputium.DigitalButton.Released">
            <summary>
            It's invoked when the value of <see cref="P:XInputium.DigitalButton.IsPressed"/> 
            property was changed from <see langword="true"/> to 
            <see langword="false"/>, indicating the button has 
            just been released.
            </summary>
            <seealso cref="E:XInputium.DigitalButton.Pressed"/>
            <seealso cref="E:XInputium.DigitalButton.IsPressedChanged"/>
            <seealso cref="P:XInputium.DigitalButton.IsPressed"/>
        </member>
        <member name="E:XInputium.DigitalButton.DurationChanged">
            <summary>
            Its invoked whenever the value of <see cref="P:XInputium.DigitalButton.Duration"/> 
            property changes.
            </summary>
            <seealso cref="P:XInputium.DigitalButton.Duration"/>
            <seealso cref="M:XInputium.DigitalButton.OnDurationChanged"/>
        </member>
        <member name="M:XInputium.DigitalButton.#ctor(XInputium.DigitalButtonUpdateCallback@)">
            <summary>
            Initializes a new instance of a <see cref="T:XInputium.DigitalButton"/>
            class that supports state updating.
            </summary>
            <param name="updateCallback">A variable that will be set with 
            a <see cref="T:XInputium.DigitalButtonUpdateCallback"/> delegate that you 
            can invoked from your code to update the state of the new 
            <see cref="T:XInputium.DigitalButton"/> instance.</param>
        </member>
        <member name="M:XInputium.DigitalButton.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of a <see cref="T:XInputium.DigitalButton"/> 
            class that has the specified immutable state.
            </summary>
            <param name="isPressed"><see langword="true"/> to indicate 
            the button is currently being pressed or <see langword="false"/> 
            to indicate the button is in the released state.</param>
        </member>
        <member name="P:XInputium.DigitalButton.IsPressed">
            <summary>
            Gets a <see cref="T:System.Boolean"/> that indicates of the button 
            represented by the <see cref="T:XInputium.DigitalButton"/> is 
            currently being pressed.
            </summary>
            <seealso cref="P:XInputium.DigitalButton.Duration"/>
            <seealso cref="E:XInputium.DigitalButton.IsPressedChanged"/>
            <seealso cref="M:XInputium.DigitalButton.OnIsPressedChanged"/>
            <seealso cref="M:XInputium.DigitalButton.IsHolding(System.TimeSpan)"/>
        </member>
        <member name="P:XInputium.DigitalButton.Duration">
            <summary>
            Gets a <see cref="T:System.TimeSpan"/> object representing the 
            amount of time elapsed since the last time the value 
            of <see cref="P:XInputium.DigitalButton.IsPressed"/> property was changed, allowing 
            for the button press or release duration to be obtained.
            </summary>
            <seealso cref="P:XInputium.DigitalButton.IsPressed"/>
        </member>
        <member name="M:XInputium.DigitalButton.ToString">
            <summary>
            Gets the <see cref="T:System.String"/> representation of the 
            current <see cref="T:XInputium.DigitalButton"/> instance.
            </summary>
            <returns>The <see cref="T:System.String"/> representation 
            of the <see cref="T:XInputium.DigitalButton"/> instance.</returns>
        </member>
        <member name="M:XInputium.DigitalButton.OnIsPressedChanged">
            <summary>
            Raises the <see cref="E:XInputium.DigitalButton.IsPressedChanged"/> event and, 
            depending on the value of <see cref="P:XInputium.DigitalButton.IsPressed"/> 
            property, raises either the 
            <see cref="E:XInputium.DigitalButton.Pressed"/> or <see cref="E:XInputium.DigitalButton.Released"/> 
            events.
            </summary>
            <seealso cref="E:XInputium.DigitalButton.IsPressedChanged"/>
            <seealso cref="P:XInputium.DigitalButton.IsPressed"/>
            <seealso cref="E:XInputium.DigitalButton.Pressed"/>
            <seealso cref="E:XInputium.DigitalButton.Released"/>
        </member>
        <member name="M:XInputium.DigitalButton.OnDurationChanged">
            <summary>
            Raises the <see cref="E:XInputium.DigitalButton.DurationChanged"/> event.
            </summary>
            <seealso cref="E:XInputium.DigitalButton.DurationChanged"/>
            <seealso cref="P:XInputium.DigitalButton.Duration"/>
        </member>
        <member name="M:XInputium.DigitalButton.IsHolding(System.TimeSpan)">
            <summary>
            Determines if the button is being held (pressed) for, 
            at least, the specified duration.
            </summary>
            <param name="duration">Minimum amount of time the button 
            needs to be held.</param>
            <returns><see langword="true"/> if the button is being 
            held for a duration equal to or greater than 
            <paramref name="duration"/>; 
            otherwise, <see langword="false"/>.</returns>
            <seealso cref="P:XInputium.DigitalButton.IsPressed"/>
        </member>
        <member name="T:XInputium.DigitalButtonEventArgs`1">
            <summary>
            Encapsulates information about an event that is associated 
            with a <see cref="T:XInputium.DigitalButton"/> or a type that 
            derived from <see cref="T:XInputium.DigitalButton"/>.
            </summary>
            <typeparam name="T"><see cref="T:XInputium.DigitalButton"/> or a type 
            that derives from <see cref="T:XInputium.DigitalButton"/>. This is the 
            type of the button associated with the event.</typeparam>
            <seealso cref="T:XInputium.DigitalButtonEventHandler`1"/>
            <seealso cref="T:XInputium.DigitalButton"/>
        </member>
        <member name="M:XInputium.DigitalButtonEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of a <see cref="T:XInputium.DigitalButtonEventArgs`1"/> 
            class, that has the specified <typeparamref name="T"/> 
            button.
            </summary>
            <param name="button"><typeparamref name="T"/> instance 
            that represents the button associated with the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="button"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:XInputium.DigitalButtonEventArgs`1.Button">
            <summary>
            Gets the <typeparamref name="T"/> instance that represents the 
            button associated with the event.
            </summary>
        </member>
        <member name="T:XInputium.DigitalButtonEventHandler`1">
            <summary>
            Handler for an event associated with a <see cref="T:XInputium.DigitalButton"/>
            button object or an object that derives from 
            <see cref="T:XInputium.DigitalButton"/>.
            </summary>
            <typeparam name="T"><see cref="T:XInputium.DigitalButton"/> or a type 
            that derives from <see cref="T:XInputium.DigitalButton"/>. This is the 
            type of the button associated with the event.</typeparam>
            <param name="sender">Object that triggered the event.</param>
            <param name="e"><see cref="T:XInputium.DigitalButtonEventArgs`1"/> object 
            that contains information about the event.</param>
            <seealso cref="T:XInputium.DigitalButtonEventArgs`1"/>
            <seealso cref="T:XInputium.DigitalButton"/>
        </member>
        <member name="T:XInputium.DigitalButtonInputEvent`1">
            <summary>
            Implements an <see cref="T:XInputium.InputEvent"/> that can trigger 
            events depending on the state of a <see cref="T:XInputium.DigitalButton"/>
            derived instance.
            </summary>
            <typeparam name="T">A <see cref="T:XInputium.DigitalButton"/> or a 
            type derived from <see cref="T:XInputium.DigitalButton"/>, that is 
            the button type associated with the event.</typeparam>
            <seealso cref="T:XInputium.InputEvent"/>
            <seealso cref="T:XInputium.DigitalButton"/>
        </member>
        <member name="M:XInputium.DigitalButtonInputEvent`1.#ctor(`0,XInputium.DigitalButtonInputEventMode,System.TimeSpan)">
            <summary>
            Initializes a new instance of a 
            <see cref="T:XInputium.DigitalButtonInputEvent`1"/> 
            class, that is associated with the specified 
            <typeparamref name="T"/>, uses the specified triggering mode, 
            and, depending on the triggering mode, must be held for the 
            specified duration to trigger an event.
            </summary>
            <param name="button"><typeparamref name="T"/> instance, of 
            which state will be used to determine when to trigger an event.</param>
            <param name="mode"><see cref="T:XInputium.DigitalButtonInputEventMode"/> 
            constant that specifies when the event will be triggered.</param>
            <param name="holdDuration">If <paramref name="mode"/> is 
            <see cref="F:XInputium.DigitalButtonInputEventMode.OnHold"/>, this specifies 
            the minimum amount of time the button must be held (pressed) 
            for the event to trigger; otherwise, <see cref="F:System.TimeSpan.Zero"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="button"/> 
            is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="mode"/> is not 
            a defined constant in a <see cref="T:XInputium.DigitalButtonInputEventMode"/> 
            enumeration.</exception>
        </member>
        <member name="P:XInputium.DigitalButtonInputEvent`1.Button">
            <summary>
            Gets the <typeparamref name="T"/> instance associated 
            with the <see cref="T:XInputium.DigitalButtonInputEvent`1"/>.
            </summary>
        </member>
        <member name="P:XInputium.DigitalButtonInputEvent`1.Mode">
            <summary>
            Gets the <see cref="T:XInputium.DigitalButtonInputEventMode"/> constant 
            that specifies when the event is triggered.
            </summary>
            <seealso cref="T:XInputium.DigitalButtonInputEventMode"/>
        </member>
        <member name="P:XInputium.DigitalButtonInputEvent`1.HoldDuration">
            <summary>
            Gets a <see cref="T:System.TimeSpan"/> that specifies the 
            minimum amount of time that the associated 
            <see cref="T:XInputium.DigitalButton"/> has to be held for, 
            for the event to be triggered, when <see cref="P:XInputium.DigitalButtonInputEvent`1.Mode"/> 
            is <see cref="F:XInputium.DigitalButtonInputEventMode.OnHold"/>.
            </summary>
            <seealso cref="P:XInputium.DigitalButtonInputEvent`1.Mode"/>
            <seealso cref="F:XInputium.DigitalButtonInputEventMode.OnHold"/>
        </member>
        <member name="M:XInputium.DigitalButtonInputEvent`1.OnUpdate(System.TimeSpan)">
            <summary>
            Updates the event logic with the current state of the 
            associated <typeparamref name="T"/>. Overrides 
            <see cref="M:XInputium.InputEvent.OnUpdate(System.TimeSpan)"/>.
            </summary>
            <param name="time">Amount of time elapsed since the 
            last update operation.</param>
            <seealso cref="M:XInputium.InputEvent.OnUpdate(System.TimeSpan)"/>
            <seealso cref="M:XInputium.InputEvent.Update(System.TimeSpan)"/>
        </member>
        <member name="T:XInputium.DigitalButtonInputEventArgs`1">
            <summary>
            Encapsulates information about an event that was triggered 
            by an <see cref="T:XInputium.InputEvent"/> and is associated with 
            a specific <see cref="T:XInputium.DigitalButton"/>.
            </summary>
            <typeparam name="T"><see cref="T:XInputium.DigitalButton"/> or a 
            type deriving from <see cref="T:XInputium.DigitalButton"/>. This is 
            the type of the button associated with the event.</typeparam>
            <seealso cref="T:XInputium.DigitalButtonInputEventHandler`1"/>
            <seealso cref="T:XInputium.DigitalButtonInputEvent`1"/>
            <seealso cref="T:XInputium.DigitalButton"/>
            <seealso cref="T:XInputium.InputEvent"/>
        </member>
        <member name="M:XInputium.DigitalButtonInputEventArgs`1.#ctor(XInputium.InputEvent,`0)">
            <summary>
            Initializes a new instance of a 
            <see cref="T:XInputium.DigitalButtonInputEventArgs`1"/> class
            that is associated with the specified 
            <see cref="T:XInputium.InputEvent"/> and <typeparamref name="T"/> 
            button.
            </summary>
            <param name="inputEvent"><see cref="T:XInputium.InputEvent"/> 
            associated with the event.</param>
            <param name="button"><typeparamref name="T"/> instance 
            representing the button associated with event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputEvent"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="button"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:XInputium.DigitalButtonInputEventArgs`1.Button">
            <summary>
            Gets the <typeparamref name="T"/> button instance 
            associated with the event.
            </summary>
        </member>
        <member name="T:XInputium.DigitalButtonInputEventHandler`1">
            <summary>
            Event handler for an event that was triggered by an 
            <see cref="T:XInputium.InputEvent"/> and is associated with a 
            <see cref="T:XInputium.DigitalButton"/> object.
            </summary>
            <typeparam name="T"><see cref="T:XInputium.DigitalButton"/> or a 
            type deriving from <see cref="T:XInputium.DigitalButton"/>, which 
            is the type of the button associated with the event.</typeparam>
            <param name="sender">Object that raised the event.</param>
            <param name="e"><see cref="T:XInputium.DigitalButtonInputEventArgs`1"/> 
            instance containing information about the event.</param>
            <seealso cref="T:XInputium.DigitalButtonInputEventArgs`1"/>
            <seealso cref="T:XInputium.DigitalButtonInputEvent`1"/>
            <seealso cref="T:XInputium.DigitalButton"/>
        </member>
        <member name="T:XInputium.DigitalButtonInputEventMode">
            <summary>
            Exposes constants that specify when a 
            <see cref="T:XInputium.DigitalButtonInputEvent`1"/> will trigger 
            an event based on an associated <see cref="T:XInputium.DigitalButton"/>.
            </summary>
            <seealso cref="T:XInputium.DigitalButtonInputEvent`1"/>
        </member>
        <member name="F:XInputium.DigitalButtonInputEventMode.OnPress">
            <summary>
            The event is triggered when the button state changes 
            from released to pressed â€” that is, when the user 
            has just tapped the button.
            </summary>
        </member>
        <member name="F:XInputium.DigitalButtonInputEventMode.OnRelease">
            <summary>
            The event is triggered when the button state changes 
            from pressed to released â€” that is, when the user 
            has just released the button that was being pressed.
            </summary>
        </member>
        <member name="F:XInputium.DigitalButtonInputEventMode.OnHold">
            <summary>
            The event is triggered once after the button was 
            pressed for a specific minimum amount of time.
            </summary>
        </member>
        <member name="T:XInputium.DigitalButtonUpdateCallback">
            <summary>
            Callback delegate that can be used to update the state of 
            a <see cref="T:XInputium.DigitalButton"/> instance.
            </summary>
            <param name="isPressed">A <see cref="T:System.Boolean"/> indicating if 
            the button is currently being pressed.</param>
            <param name="time">A <see cref="T:System.TimeSpan"/> value that 
            specifies the amount of time elapsed since the last button 
            state update.</param>
            <seealso cref="T:XInputium.DigitalButton"/>
        </member>
        <member name="T:XInputium.EventDispatcherObject">
            <summary>
            Provides the base class for objects that need to implement 
            <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface and offers 
            event dispatching functionality. This is an abstract class.
            </summary>
            <remarks>
            Objects that inherit from <see cref="T:XInputium.EventDispatcherObject"/> 
            can either invoke events immediately or enqueue them for 
            sequential invocation at a specific moment. In the context 
            of the <see cref="T:XInputium.EventDispatcherObject"/>, postponing events 
            for later invocation is called Event Dispatching. Event 
            dispatching allows for several changes to be made to an 
            object before effectively reporting them to event listeners. 
            This is useful when the state of an object needs to be 
            fully configured before the state change is reported to 
            outside code.
            <br/><br/>
            To use <see cref="T:XInputium.EventDispatcherObject"/>, inheritors 
            specify the event dispatching mode to use, when instantiating 
            the base <see cref="T:XInputium.EventDispatcherObject"/> through its 
            constructor. If inheritors specify
            <see cref="F:XInputium.EventDispatchMode.Immediate"/> mode, the object 
            instance will behave like other conventional .NET objects, 
            raising events immediately as changes occur. If inheritors 
            specify <see cref="F:XInputium.EventDispatchMode.Deferred"/>, all event 
            invocations will be enqueued. Enqueued event invocations 
            are invoked when inheritors call <see cref="M:XInputium.EventDispatcherObject.DispatchEvents"/> 
            protected method. To register an event invocation with the 
            <see cref="T:XInputium.EventDispatcherObject"/>, inheritors call the 
            protected <see cref="M:XInputium.EventDispatcherObject.RaiseEvent(System.Action)"/> method to raise 
            an event, instead of raising the events directly. This allows 
            internal logic to know what events inheritors want to invoke 
            and allows inheritors to invoke conventional events. Only 
            events you pass to <see cref="M:XInputium.EventDispatcherObject.RaiseEvent(System.Action)"/> method 
            will be eligible for postponing. Events raised directly, 
            will be invoked immediately, regardless of the event 
            dispatching mode in use. If you need to cancel all queued 
            events from being invoked in the next event dispatching, 
            use <see cref="M:XInputium.EventDispatcherObject.ClearEvents"/> method.
            <br/><br/>
            If inheritors specify <see cref="F:XInputium.EventDispatchMode.Deferred"/> 
            event dispatching mode, and they enqueue events using 
            <see cref="M:XInputium.EventDispatcherObject.RaiseEvent(System.Action)"/> method and they never call 
            <see cref="M:XInputium.EventDispatcherObject.DispatchEvents"/> method, enqueued events will 
            never be dequeued and memory consumption will keep growing 
            as the queue grows. This is a potential memory leak inheritors 
            need to avoid.
            <br/><br/>
            <see cref="T:XInputium.EventDispatcherObject"/> implements 
            <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface, enabling 
            consumers to get notified when the value of a property 
            changes. You can use the protected 
            <see cref="M:XInputium.EventDispatcherObject.SetProperty``1(``0@,``0@,System.String)"/> method 
            to change the value of a property and automatically notify 
            consumers as necessary. In other cases, you call 
            <see cref="M:XInputium.EventDispatcherObject.OnPropertyChanged(System.String)"/> method to notify 
            consumers about a specific property change. You can also 
            compare property names using one of the protected static 
            <see cref="M:XInputium.EventDispatcherObject.PropertyNameEquals(System.String,System.String)"/> method 
            overloads.
            </remarks>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged"/>
        </member>
        <member name="M:XInputium.EventDispatcherObject.#ctor(XInputium.EventDispatchMode)">
            <summary>
            Initializes a new instance of an <see cref="T:XInputium.EventDispatcherObject"/> 
            class, that uses the specified event dispatching mode.
            </summary>
            <param name="eventDispatchMode">Event dispatching mode 
            to use in the new instance.</param>
            <exception cref="T:System.ArgumentException"><paramref name="eventDispatchMode"/> 
            is not a defined constant of an 
            <see cref="T:XInputium.EventDispatchMode"/> enumeration.</exception>
        </member>
        <member name="M:XInputium.EventDispatcherObject.#ctor">
            <summary>
            Initializes a new instance of an <see cref="T:XInputium.EventDispatcherObject"/> 
            class, that uses <see cref="F:XInputium.EventDispatchMode.Immediate"/> 
            as its event dispatching mode.
            </summary>
        </member>
        <member name="E:XInputium.EventDispatcherObject.PropertyChanged">
            <summary>
            It's invoked when the value of a property in the 
            <see cref="T:XInputium.EventDispatcherObject"/> changes.
            </summary>
            <seealso cref="M:XInputium.EventDispatcherObject.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)"/>
        </member>
        <member name="P:XInputium.EventDispatcherObject.EventDispatchMode">
            <summary>
            Gets the event dispatch mode in use for the current 
            <see cref="T:XInputium.EventDispatcherObject"/>.
            </summary>
        </member>
        <member name="P:XInputium.EventDispatcherObject.HasQueuedEvents">
            <summary>
            Gets a <see cref="T:System.Boolean"/> indicating if there are 
            currently any events enqueued for dispatching.
            </summary>
            <seealso cref="P:XInputium.EventDispatcherObject.EventDispatchMode"/>
            <seealso cref="M:XInputium.EventDispatcherObject.DispatchEvents"/>
        </member>
        <member name="M:XInputium.EventDispatcherObject.RaiseEvent(System.Action)">
            <summary>
            Adds the specified action as event raising code to 
            the event dispatching queue. Or, if the current event 
            dispatch mode is set to <see cref="F:XInputium.EventDispatchMode.Immediate"/>, 
            immediately invokes the event code, without queuing 
            it.
            </summary>
            <param name="action">An <see cref="T:System.Action"/> delegate 
            containing code that raises a specific event of the 
            current <see cref="T:XInputium.EventDispatcherObject"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:XInputium.EventDispatcherObject.ClearEvents">
            <summary>
            Removes all enqueued events from the event dispatching 
            queue.
            </summary>
            <seealso cref="M:XInputium.EventDispatcherObject.RaiseEvent(System.Action)"/>
            <seealso cref="M:XInputium.EventDispatcherObject.DispatchEvents"/>
        </member>
        <member name="M:XInputium.EventDispatcherObject.DispatchEvents">
            <summary>
            Dispatches all events enqueued in the event dispatching 
            queue, if there are any, and removes them from the 
            queue.
            </summary>
            <remarks>
            This method invokes all event raising code enqueued 
            by <see cref="M:XInputium.EventDispatcherObject.RaiseEvent(System.Action)"/> method and 
            clears the event dispatching queue.
            </remarks>
            <seealso cref="M:XInputium.EventDispatcherObject.RaiseEvent(System.Action)"/>
            <seealso cref="M:XInputium.EventDispatcherObject.ClearEvents"/>
        </member>
        <member name="M:XInputium.EventDispatcherObject.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:XInputium.EventDispatcherObject.PropertyChanged"/> event.
            </summary>
            <param name="e"><see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance 
            containing information about the event or <see langword="null"/> 
            to use a default empty instance.</param>
            <seealso cref="E:XInputium.EventDispatcherObject.PropertyChanged"/>
        </member>
        <member name="M:XInputium.EventDispatcherObject.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:XInputium.EventDispatcherObject.PropertyChanged"/> event using the specified 
            property name.
            </summary>
            <param name="propertyName">Name of the changed property or 
            <see langword="null"/> to specify no specific property. If omitted, 
            this parameter will be the name of the caller property or method.</param>
            <seealso cref="M:XInputium.EventDispatcherObject.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)"/>
        </member>
        <member name="M:XInputium.EventDispatcherObject.SetProperty``1(``0@,``0@,System.String)">
            <summary>
            Sets the specified property with the specified value, and raises 
            the <see cref="E:XInputium.EventDispatcherObject.PropertyChanged"/> event if the values differ.
            </summary>
            <typeparam name="T">Type of the property value.</typeparam>
            <param name="oldValue">Original value of the property. This is a 
            reference to the member that will be set with the new value.</param>
            <param name="newValue">New value to set to the property.</param>
            <param name="propertyName">Optional. Name of the property that is 
            being set, or <see langword="null"/> to specify no specific property. 
            If omitted, the name of the caller member is used as value for this 
            parameter.</param>
            <returns><see langword="true"/> if <paramref name="newValue"/> is 
            different from <paramref name="oldValue"/> and the property was 
            successfully set; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:XInputium.EventDispatcherObject.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)"/>
            <seealso cref="E:XInputium.EventDispatcherObject.PropertyChanged"/>
        </member>
        <member name="M:XInputium.EventDispatcherObject.SetProperty``1(``0@,``0@,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Sets the specified property with the specified value, and raises 
            the <see cref="E:XInputium.EventDispatcherObject.PropertyChanged"/> event if the values differ.
            </summary>
            <typeparam name="T">Type of the property value.</typeparam>
            <param name="oldValue">Original value of the property. This is a 
            reference to the member that will be set with the new value.</param>
            <param name="newValue">New value to set to the property.</param>
            <param name="eventArgs"><see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> 
            instance that will be used as arguments for the event, if the 
            property being set is changed, or <see langword="null"/> to specify 
            no specific property.</param>
            <returns><see langword="true"/> if <paramref name="newValue"/> is 
            different from <paramref name="oldValue"/> and the property was 
            successfully set; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:XInputium.EventDispatcherObject.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)"/>
            <seealso cref="E:XInputium.EventDispatcherObject.PropertyChanged"/>
        </member>
        <member name="M:XInputium.EventDispatcherObject.PropertyNameEquals(System.String,System.String)">
            <summary>
            Determines if both specified property names are equal.
            </summary>
            <param name="propertyX">First property name to compare.</param>
            <param name="propertyY">Second property name to compare.</param>
            <returns><see langword="true"/> if <paramref name="propertyX"/> 
            is identical to <paramref name="propertyY"/>; 
            otherwise, <see langword="false"/>.</returns>
            <remarks>
            This method compares property names using case-sensitive 
            ordinal comparison.
            <br/>
            Property names are trimmed of leading and trailing white spaces 
            before comparison.
            </remarks>
            <seealso cref="M:XInputium.EventDispatcherObject.PropertyNameEquals(System.ComponentModel.PropertyChangedEventArgs,System.String)"/>
        </member>
        <member name="M:XInputium.EventDispatcherObject.PropertyNameEquals(System.ComponentModel.PropertyChangedEventArgs,System.String)">
            <summary>
            Determines if the property name associated with the specified 
            <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> is identical to the specified 
            property name.
            </summary>
            <param name="e"><see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing a 
            property name to compare.</param>
            <param name="propertyName">Property name to compare with the property name 
            associated with <paramref name="e"/>.</param>
            <returns><see langword="true"/> if the property name associated with 
            <paramref name="e"/> is identical to <paramref name="propertyName"/>; 
            otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="e"/> is <see langword="null"/>.</exception>
            <remarks>
            This method compares property names using case-sensitive 
            ordinal comparison.
            <br/>
            Property names are trimmed of leading and trailing white spaces 
            before comparison.
            </remarks>
            <seealso cref="M:XInputium.EventDispatcherObject.PropertyNameEquals(System.String,System.String)"/>
        </member>
        <member name="T:XInputium.EventDispatchMode">
            <summary>
            Exposes constants the that represent the mode for 
            dispatching events in an <see cref="T:XInputium.EventDispatcherObject"/>.
            </summary>
            <seealso cref="T:XInputium.EventDispatcherObject"/>
        </member>
        <member name="F:XInputium.EventDispatchMode.Immediate">
            <summary>
            Events are invoked immediately after they are raised.
            </summary>
        </member>
        <member name="F:XInputium.EventDispatchMode.Deferred">
            <summary>
            Events get stacked when they are raised and are 
            invoked in sequence only when specified.
            </summary>
        </member>
        <member name="T:XInputium.IInputDeviceState">
            <summary>
            Represents the state of a physical input device.
            </summary>
            <remarks>
            Types implementing <see cref="T:XInputium.IInputDeviceState"/> 
            interface can be used to represent input device 
            states in an <see cref="T:XInputium.InputDevice`1"/> 
            derived class.
            <br/><br/>
            Although any object type can implement 
            <see cref="T:XInputium.IInputDeviceState"/> interface, these 
            types are intended to be performance oriented, 
            meaning they should avoid being too resource 
            intensive as much as possible.
            <br/><br/>
            If your type implements <see cref="T:XInputium.IInputDeviceState"/> 
            and use your derived type as the input device state 
            type in an <see cref="T:XInputium.InputDevice`1"/> derived 
            class, your type will be used by that class in 
            different ways, depending on whether your type is 
            a reference type of a value type. If your type is 
            a reference type, only two instances of it will be 
            ever created per each instance of 
            <see cref="T:XInputium.InputDevice`1"/> derived class, 
            and your type's instances will be recycled as 
            necessary to represent newer states. If your type 
            is a value type, your type's objects will be copied 
            by value on each state update. This is a measure to 
            improve performance, avoiding the creation of 
            unused objects in memory and avoiding the need for 
            garbage collection by the CLR runtime.
            </remarks>
            <seealso cref="T:XInputium.InputDevice`1"/>
        </member>
        <member name="P:XInputium.IInputDeviceState.IsConnected">
            <summary>
            Gets a <see cref="T:System.Boolean"/> that indicates the input 
            device is currently connected to the system and 
            available for usage.
            </summary>
        </member>
        <member name="M:XInputium.IInputDeviceState.StateEquals(XInputium.IInputDeviceState)">
            <summary>
            Determines if the current <see cref="T:XInputium.IInputDeviceState"/> 
            represents an input state that is identical to the input 
            state represented by the specified 
            <see cref="T:XInputium.IInputDeviceState"/> object.
            </summary>
            <param name="state"><see cref="T:XInputium.IInputDeviceState"/> derived 
            object to compare.</param>
            <returns><see langword="true"/> if the current object 
            represents an input state that is identical to that of 
            <paramref name="state"/>;
            otherwise, <see langword="false"/>.</returns>
            <remarks>
            This method considers only the state represented by the 
            compared <see cref="T:XInputium.IInputDeviceState"/> objects. It 
            doesn't consider other differences these objects may have 
            (like, references or properties not related to input state). 
            To compare equality between objects, the implementation of 
            an object's <see cref="M:System.Object.Equals(System.Object)"/> method is 
            usually the preferable option.
            </remarks>
        </member>
        <member name="T:XInputium.InputDevice`1">
            <summary>
            Provides the base for classes that represent an 
            input device, offering input device state update 
            and comparison functionality.
            </summary>
            <typeparam name="TState">Type implementing 
            <see cref="T:XInputium.IInputDeviceState"/> interface, that 
            is the type of the objects that represent the state 
            an input device has in a specific moment in time.</typeparam>
            <remarks>
            Classes inheriting from <see cref="T:XInputium.InputDevice`1"/> 
            represent a physical input device. Instances of these 
            classes provide consumers with the ability to get 
            the current state of an input device and to keep 
            track of that state. <see cref="T:XInputium.InputDevice`1"/> 
            compares these states for equality, and keeps the two 
            most recent states, so consumers of derived classes can 
            compare these states for differences for determining 
            what has changed since the last state.
            <br/><br/>
            <see cref="T:XInputium.InputDevice`1"/> provides the 
            <see cref="M:XInputium.InputDevice`1.Update"/> method, which consumers should 
            call to get the current state of the input device. 
            This method should be called several times 
            per second, usually once per each game/application 
            frame, so the state of the input device is updated 
            at a pace that looks to the user as being real-time. 
            See <see cref="M:XInputium.InputDevice`1.Update"/> method for more information.
            <br/><br/>
            After you call <see cref="M:XInputium.InputDevice`1.Update"/> method, you can 
            use its return value or the value of 
            <see cref="P:XInputium.InputDevice`1.HasStateChanged"/> property to determine if 
            the current state of the input device has changed since 
            the last call to the method. <see cref="P:XInputium.InputDevice`1.CurrentState"/> 
            property returns the state of the input device at the time 
            of the last call to <see cref="M:XInputium.InputDevice`1.Update"/> method, and 
            <see cref="P:XInputium.InputDevice`1.PreviousState"/> property returns the state of 
            the input device at the time of that method's 
            second-to-last call. <see cref="P:XInputium.InputDevice`1.HasStateChanged"/> property 
            returns <see langword="true"/> if 
            <see cref="P:XInputium.InputDevice`1.CurrentState"/> and <see cref="P:XInputium.InputDevice`1.PreviousState"/> 
            are not identical.
            <br/><br/>
            <see cref="P:XInputium.InputDevice`1.IsConnected"/> property returns a 
            <see cref="T:System.Boolean"/> that indicates if the device was 
            connected, at the time of the most recent call to 
            <see cref="M:XInputium.InputDevice`1.Update"/> method.
            <br/><br/>
            All base members of the <see cref="T:XInputium.InputDevice`1"/> 
            class assume the current state of the device as the state 
            the device had at the time of the most recent call to 
            <see cref="M:XInputium.InputDevice`1.Update"/> method. If the last call to that 
            method is not very recent, members of 
            <see cref="T:XInputium.InputDevice`1"/> may provide you with 
            unreliable data. For instance, <see cref="P:XInputium.InputDevice`1.IsConnected"/> 
            property may report that the input device is connected, 
            while it actually not connected anymore.
            </remarks>
            <seealso cref="T:XInputium.IInputDeviceState"/>
        </member>
        <member name="M:XInputium.InputDevice`1.#ctor">
            <summary>
            Initializes a new instance of an <see cref="T:XInputium.InputDevice`1"/> 
            class.
            </summary>
        </member>
        <member name="E:XInputium.InputDevice`1.Updated">
            <summary>
            It's invoked every time the device state is updated, 
            through a call to <see cref="M:XInputium.InputDevice`1.Update"/> method.
            </summary>
            <seealso cref="M:XInputium.InputDevice`1.Update"/>
            <seealso cref="M:XInputium.InputDevice`1.OnUpdated"/>
        </member>
        <member name="E:XInputium.InputDevice`1.Connected">
            <summary>
            It's invoked whenever the most recent input device state 
            changes from not connected to connected.
            </summary>
            <seealso cref="E:XInputium.InputDevice`1.Disconnected"/>
            <seealso cref="P:XInputium.InputDevice`1.IsConnected"/>
        </member>
        <member name="E:XInputium.InputDevice`1.Disconnected">
            <summary>
            It's invoked whenever the most recent input device state 
            changes from connected to not connected.
            </summary>
            <seealso cref="E:XInputium.InputDevice`1.Connected"/>
            <seealso cref="P:XInputium.InputDevice`1.IsConnected"/>
        </member>
        <member name="E:XInputium.InputDevice`1.StateChanged">
            <summary>
            It's invoked whenever the known state of the device 
            changes.
            </summary>
            <remarks>
            The current state of the device is represented 
            by <see cref="P:XInputium.InputDevice`1.CurrentState"/> property, and the state 
            it has before that is represented by 
            <see cref="P:XInputium.InputDevice`1.PreviousState"/> property. Whenever the 
            states represented by these properties differ from 
            one another, the input device state is considered to 
            have changed, and <see cref="P:XInputium.InputDevice`1.HasStateChanged"/> 
            property will return <see langword="true"/>. The 
            values of these properties is updated when you call 
            <see cref="M:XInputium.InputDevice`1.Update"/> method, and it is during 
            that call that the <see cref="E:XInputium.InputDevice`1.StateChanged"/> method 
            can be invoked, if the states changed. When this 
            event is invoked, the value of 
            <see cref="P:XInputium.InputDevice`1.HasStateChanged"/> property is always 
            <see langword="true"/>, at least, until the next call 
            to <see cref="M:XInputium.InputDevice`1.Update"/> method.
            <br/><br/>
            You subscribe to <see cref="E:XInputium.InputDevice`1.StateChanged"/> event 
            when you need to get notified of changes to the current 
            state of the underlying input device.
            <br/><br/>
            When a device is connected or unconnected, it is 
            considered that the device state has changed, so the
            <see cref="E:XInputium.InputDevice`1.StateChanged"/> event will be invoked as 
            well. This follows the logic above, about the differing 
            of <see cref="P:XInputium.InputDevice`1.CurrentState"/> and 
            <see cref="P:XInputium.InputDevice`1.PreviousState"/> properties' values.
            </remarks>
            <seealso cref="P:XInputium.InputDevice`1.HasStateChanged"/>
            <seealso cref="P:XInputium.InputDevice`1.CurrentState"/>
            <seealso cref="P:XInputium.InputDevice`1.PreviousState"/>
            <seealso cref="M:XInputium.InputDevice`1.Update"/>
        </member>
        <member name="P:XInputium.InputDevice`1.PreviousState">
            <summary>
            Gets the <typeparamref name="TState"/> object that 
            represents the second most recent known state of the 
            input device, which is the state that was know before 
            the last call to <see cref="M:XInputium.InputDevice`1.Update"/> method.
            </summary>
            <remarks>
            The value of <see cref="P:XInputium.InputDevice`1.PreviousState"/> is only 
            updated when you call <see cref="M:XInputium.InputDevice`1.Update"/> method.
            When you call <see cref="M:XInputium.InputDevice`1.Update"/> method, the value
            of <see cref="P:XInputium.InputDevice`1.CurrentState"/> becomes the value of 
            <see cref="P:XInputium.InputDevice`1.PreviousState"/>, and 
            <see cref="P:XInputium.InputDevice`1.CurrentState"/> value is updated with a 
            value that represents the current state of the 
            underlying input device.
            <br/><br/>
            For performance reasons, if <typeparamref name="TState"/> 
            is a reference type, the <typeparamref name="TState"/> 
            object that is the value of <see cref="P:XInputium.InputDevice`1.PreviousState"/> 
            property is not always the same object, although the 
            state it represents may not change. You should not store 
            a reference to the value of <see cref="P:XInputium.InputDevice`1.PreviousState"/> 
            property, and your <typeparamref name="TState"/> object 
            implementation should account for this. The same is true 
            for <see cref="P:XInputium.InputDevice`1.CurrentState"/> property.
            </remarks>
            <seealso cref="P:XInputium.InputDevice`1.CurrentState"/>
            <seealso cref="M:XInputium.InputDevice`1.Update"/>
        </member>
        <member name="P:XInputium.InputDevice`1.CurrentState">
            <summary>
            Gets the <typeparamref name="TState"/> object that 
            represents the most recent known state of the 
            input device.
            </summary>
            <remarks>
            The value of <see cref="P:XInputium.InputDevice`1.CurrentState"/> is only 
            updated when you call <see cref="M:XInputium.InputDevice`1.Update"/> method.
            When you call <see cref="M:XInputium.InputDevice`1.Update"/> method, the value
            of <see cref="P:XInputium.InputDevice`1.CurrentState"/> becomes the value of 
            <see cref="P:XInputium.InputDevice`1.PreviousState"/>, and 
            <see cref="P:XInputium.InputDevice`1.CurrentState"/> value is updated with a 
            value that represents the current state of the 
            underlying input device.
            <br/><br/>
            For performance reasons, if <typeparamref name="TState"/> 
            is a reference type, the <typeparamref name="TState"/> 
            object that is the value of <see cref="P:XInputium.InputDevice`1.CurrentState"/> 
            property is not always the same object, although the 
            state it represents may not change. You should not store 
            a reference to the value of <see cref="P:XInputium.InputDevice`1.CurrentState"/> 
            property, and your <typeparamref name="TState"/> object 
            implementation should account for this. The same is true 
            for <see cref="P:XInputium.InputDevice`1.PreviousState"/> property.
            </remarks>
            <seealso cref="P:XInputium.InputDevice`1.PreviousState"/>
            <seealso cref="M:XInputium.InputDevice`1.Update"/>
        </member>
        <member name="P:XInputium.InputDevice`1.IsConnected">
            <summary>
            Gets a <see cref="T:System.Boolean"/> that indicates if the device 
            is currently connected, accordingly to its most recent 
            state update.
            </summary>
            <remarks>
            Although <see cref="P:XInputium.InputDevice`1.IsConnected"/> may report the device 
            is currently connected, it might actually not be anymore. 
            This property reports the state of the device accordingly 
            to the information currently present in 
            <see cref="P:XInputium.InputDevice`1.CurrentState"/> property, as this is the most
            recent state. This information is only updated when 
            <see cref="M:XInputium.InputDevice`1.Update"/> method is called. This is intended 
            behavior, so the reported state of the device can only 
            change when explicitly requested, through a formal state 
            update. Call <see cref="M:XInputium.InputDevice`1.Update"/> method to update the 
            current state.
            </remarks>
            <seealso cref="P:XInputium.InputDevice`1.CurrentState"/>
            <seealso cref="M:XInputium.InputDevice`1.Update"/>
        </member>
        <member name="P:XInputium.InputDevice`1.HasStateChanged">
            <summary>
            Gets a <see cref="T:System.Boolean"/> that indicates if the 
            values of <see cref="P:XInputium.InputDevice`1.CurrentState"/> and 
            <see cref="P:XInputium.InputDevice`1.PreviousState"/> properties represent 
            different states, meaning the device state has 
            changed between the two most recent calls to 
            <see cref="M:XInputium.InputDevice`1.Update"/> method.
            </summary>
            <seealso cref="P:XInputium.InputDevice`1.CurrentState"/>
            <seealso cref="P:XInputium.InputDevice`1.PreviousState"/>
            <seealso cref="E:XInputium.InputDevice`1.StateChanged"/>
            <seealso cref="M:XInputium.InputDevice`1.Update"/>
        </member>
        <member name="P:XInputium.InputDevice`1.LastUpdateId">
            <summary>
            Gets a <see cref="T:System.Int64"/> that represents the ID of 
            the last state update operation.
            </summary>
            <remarks>
            <see cref="P:XInputium.InputDevice`1.LastUpdateId"/> property value is a <see cref="T:System.Int64"/> 
            that is sequentially increased each time 
            <see cref="M:XInputium.InputDevice`1.Update"/> method is called. This value can 
            be used as an ID that represents the last state update 
            operation. Although <see cref="P:XInputium.InputDevice`1.CurrentState"/>, 
            <see cref="P:XInputium.InputDevice`1.PreviousState"/> and <see cref="P:XInputium.InputDevice`1.HasStateChanged"/> 
            properties can be used to determine if the current state 
            has changed, <see cref="P:XInputium.InputDevice`1.LastUpdateId"/> enables you to determine 
            if an update operation was performed, even if the device 
            state might had actually not changed.
            </remarks>
            <seealso cref="P:XInputium.InputDevice`1.CurrentState"/>
            <seealso cref="P:XInputium.InputDevice`1.HasStateChanged"/>
        </member>
        <member name="M:XInputium.InputDevice`1.OnUpdated">
            <summary>
            Raises the <see cref="E:XInputium.InputDevice`1.Updated"/> event.
            </summary>
            <seealso cref="E:XInputium.InputDevice`1.Updated"/>
            <seealso cref="M:XInputium.InputDevice`1.Update"/>
        </member>
        <member name="M:XInputium.InputDevice`1.OnStateChanged">
            <summary>
            Raises the <see cref="E:XInputium.InputDevice`1.StateChanged"/> event.
            </summary>
            <seealso cref="E:XInputium.InputDevice`1.StateChanged"/>
            <seealso cref="P:XInputium.InputDevice`1.CurrentState"/>
            <seealso cref="P:XInputium.InputDevice`1.PreviousState"/>
        </member>
        <member name="M:XInputium.InputDevice`1.OnConnected">
            <summary>
            Raises the <see cref="E:XInputium.InputDevice`1.Connected"/> event.
            </summary>
            <seealso cref="E:XInputium.InputDevice`1.Connected"/>
            <seealso cref="P:XInputium.InputDevice`1.IsConnected"/>
        </member>
        <member name="M:XInputium.InputDevice`1.OnDisconnected">
            <summary>
            Raises the <see cref="E:XInputium.InputDevice`1.Disconnected"/> event.
            </summary>
            <seealso cref="E:XInputium.InputDevice`1.Disconnected"/>
            <seealso cref="P:XInputium.InputDevice`1.IsConnected"/>
        </member>
        <member name="M:XInputium.InputDevice`1.CreateStateInstance">
            <summary>
            When overridden in a derived class, creates a new 
            instance of a <typeparamref name="TState"/> object, 
            that represents an input device that is not connected 
            to the system and has no user input.
            </summary>
            <returns>The newly created <typeparamref name="TState"/> 
            instance.</returns>
            <remarks>
            This method is called by internal code to instantiate 
            <typeparamref name="TState"/> objects, that will be 
            used to represent the states of the input device.
            </remarks>
            <seealso cref="M:XInputium.InputDevice`1.UpdateState(`0@)"/>
        </member>
        <member name="M:XInputium.InputDevice`1.UpdateState(`0@)">
            <summary>
            When overridden in a derived class, updates the 
            specified <typeparamref name="TState"/> with current 
            data from the underlying input device.
            </summary>
            <param name="state">Variable that is being updated 
            with current state data from the input device.</param>
            <remarks>
            If the underlying device is not connected to the 
            system or not available, <paramref name="state"/> must 
            be updated to reflect an empty state, to represent a 
            device that is not connected and has no user input.
            <br/><br/>
            This method is called by <see cref="M:XInputium.InputDevice`1.Update"/> method 
            to update the current state of the device. The state 
            information set by <see cref="M:XInputium.InputDevice`1.UpdateState(`0@)"/> 
            method will represent the current device state, which 
            can be obtained using <see cref="P:XInputium.InputDevice`1.CurrentState"/> 
            property.
            </remarks>
            <seealso cref="M:XInputium.InputDevice`1.Update"/>
            <seealso cref="P:XInputium.InputDevice`1.CurrentState"/>
        </member>
        <member name="M:XInputium.InputDevice`1.Update">
            <summary>
            Updates the current state of the <see cref="T:XInputium.InputDevice`1"/> 
            with current data from the underlying input device.
            </summary>
            <returns><see langword="true"/> of the current state of 
            the input device has changed since the last call to 
            <see cref="M:XInputium.InputDevice`1.Update"/> method.</returns>
            <remarks>
            This method updates the values of <see cref="P:XInputium.InputDevice`1.CurrentState"/> 
            and <see cref="P:XInputium.InputDevice`1.PreviousState"/> properties, as well as 
            <see cref="P:XInputium.InputDevice`1.HasStateChanged"/> property. 
            <see cref="P:XInputium.InputDevice`1.PreviousState"/> property gets the value of 
            <see cref="P:XInputium.InputDevice`1.CurrentState"/> property, and its old value is 
            recycle, set with the most recent data from the underlying 
            input device, and set to <see cref="P:XInputium.InputDevice`1.CurrentState"/> property.
            Both states are then compared for equality and, if they 
            differ, <see cref="P:XInputium.InputDevice`1.HasStateChanged"/> property is set to 
            <see langword="true"/>.
            <br/><br/>
            Calling this method will also raise some events, as necessary, 
            like <see cref="E:XInputium.InputDevice`1.Connected"/>, <see cref="E:XInputium.InputDevice`1.Disconnected"/> 
            and <see cref="E:XInputium.InputDevice`1.StateChanged"/> events. These events are raised 
            through a call to their respective triggering methods â€” in 
            this case, <see cref="M:XInputium.InputDevice`1.OnConnected"/>, 
            <see cref="M:XInputium.InputDevice`1.OnDisconnected"/> and 
            <see cref="M:XInputium.InputDevice`1.OnStateChanged"/> methods, respectively.
            <br/><br/>
            To update the current state with current data from the 
            underlying input device, <see cref="M:XInputium.InputDevice`1.Update"/> method 
            calls the inherited class implementation of 
            <see cref="M:XInputium.InputDevice`1.UpdateState(`0@)"/> method. You override 
            this method to provide a way for <see cref="M:XInputium.InputDevice`1.Update"/> 
            method to obtain the state of the input device.
            <br/><br/>
            Consumers of <see cref="T:XInputium.InputDevice`1"/> derived 
            classes would call <see cref="M:XInputium.InputDevice`1.Update"/> method several 
            times per second to determine the current state of the 
            input device. This method would, usually, be called once 
            per game/application render frame.
            </remarks>
            <seealso cref="P:XInputium.InputDevice`1.CurrentState"/>
            <seealso cref="P:XInputium.InputDevice`1.PreviousState"/>
            <seealso cref="P:XInputium.InputDevice`1.HasStateChanged"/>
        </member>
        <member name="T:XInputium.InputEvent">
            <summary>
            Provides the base for classes that implement a dynamic 
            input event. This is an abstract class.
            </summary>
            <remarks>
            <see cref="T:XInputium.InputEvent"/> represents a dynamic event 
            that can be triggered by very specific conditions. 
            This allows for the creation and invocation of events 
            that would not be possible using the regular CLR events. 
            An example of a dynamic event that is specific to the 
            needs of a consumer is an event that triggers only after 
            a digital button is held by the user for a specified 
            amount of time. <see cref="T:XInputium.DigitalButtonInputEvent`1"/> 
            class, which derives from <see cref="T:XInputium.InputEvent"/>, 
            provides this exact functionality.
            <br/><br/>
            Inside <see cref="N:XInputium"/> namespace, 
            <see cref="T:XInputium.LogicalInputDevice`2"/> is 
            the class that is intended to make the most use of 
            <see cref="T:XInputium.InputEvent"/> derived classes. Although it 
            provides regular CLR events, it also provides an input 
            event system that uses <see cref="T:XInputium.InputEvent"/> for its 
            dynamic events. You can create a class that derives 
            from <see cref="T:XInputium.InputEvent"/>, that works with your 
            own event triggering logic, and register an instance 
            of your class in a class that derived from 
            <see cref="T:XInputium.LogicalInputDevice`2"/>.
            </remarks>
            <seealso cref="T:XInputium.InputEventGroup"/>
            <seealso cref="T:XInputium.LogicalInputDevice`2"/>
        </member>
        <member name="M:XInputium.InputEvent.#ctor">
            <summary>
            Initializes a new instance of an <see cref="T:XInputium.InputEvent"/> 
            class.
            </summary>
        </member>
        <member name="P:XInputium.InputEvent.HandlerCount">
            <summary>
            Gets the number of handlers currently registered in the 
            <see cref="T:XInputium.InputEvent"/>.
            </summary>
            <seealso cref="M:XInputium.InputEvent.AddHandler(XInputium.InputEventHandler)"/>
            <seealso cref="M:XInputium.InputEvent.RemoveHandler(XInputium.InputEventHandler)"/>
            <seealso cref="M:XInputium.InputEvent.HasHandler(XInputium.InputEventHandler)"/>
        </member>
        <member name="M:XInputium.InputEvent.Raise(System.Object,XInputium.InputEventArgs)">
            <summary>
            Triggers the event, invoking all the event handlers 
            registered in the current <see cref="T:XInputium.InputEvent"/> instance.
            </summary>
            <param name="source">The source object that triggered the 
            input event.</param>
            <param name="e">Arguments to pass to the callback. 
            You can use <see langword="null"/> to specify that 
            the default <see cref="T:XInputium.InputEventArgs"/> for this 
            <see cref="T:XInputium.InputEvent"/> instance is sent to handlers.</param>
            <seealso cref="M:XInputium.InputEvent.OnUpdate(System.TimeSpan)"/>
        </member>
        <member name="M:XInputium.InputEvent.OnUpdate(System.TimeSpan)">
            <summary>
            When overridden in a derived class, updates the event 
            logic and reevaluates triggering conditions, and, if 
            these conditions are met, triggers the event.
            </summary>
            <param name="time">Amount of time elapsed since the 
            last call to <see cref="M:XInputium.InputEvent.Update(System.TimeSpan)"/> method.</param>
            <remarks>
            This method is called by <see cref="M:XInputium.InputEvent.Update(System.TimeSpan)"/> 
            method, to allow inheritors to reevaluate the event's 
            triggering conditions and to trigger the event when 
            these conditions are met.
            </remarks>
            <seealso cref="M:XInputium.InputEvent.Update(System.TimeSpan)"/>
        </member>
        <member name="M:XInputium.InputEvent.Update(System.TimeSpan)">
            <summary>
            Updates the event logic to reevaluate its event triggering 
            conditions, and, if these conditions are met, triggers 
            the <see cref="T:XInputium.InputEvent"/>.
            </summary>
            <param name="time">Amount of time elapsed since the last 
            call to <see cref="M:XInputium.InputEvent.Update(System.TimeSpan)"/>.</param>
            <seealso cref="M:XInputium.InputEvent.OnUpdate(System.TimeSpan)"/>
        </member>
        <member name="M:XInputium.InputEvent.AddHandler(XInputium.InputEventHandler)">
            <summary>
            Adds the specified <see cref="T:XInputium.InputEventHandler"/> to 
            the <see cref="T:XInputium.InputEvent"/>, allowing it to 
            handle events triggered by the <see cref="T:XInputium.InputEvent"/>.
            </summary>
            <param name="handler"><see cref="T:XInputium.InputEventHandler"/> to 
            add.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="handler"/> is <see langword="null"/>.</exception>
            <seealso cref="M:XInputium.InputEvent.RemoveHandler(XInputium.InputEventHandler)"/>
            <seealso cref="M:XInputium.InputEvent.HasHandler(XInputium.InputEventHandler)"/>
        </member>
        <member name="M:XInputium.InputEvent.RemoveHandler(XInputium.InputEventHandler)">
            <summary>
            Removes the specified <see cref="T:XInputium.InputEventHandler"/> from 
            the <see cref="T:XInputium.InputEvent"/>.
            </summary>
            <param name="handler"><see cref="T:XInputium.InputEventHandler"/> to 
            remove.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="handler"/> is <see langword="null"/>.</exception>
            <seealso cref="M:XInputium.InputEvent.AddHandler(XInputium.InputEventHandler)"/>
            <seealso cref="M:XInputium.InputEvent.ClearHandlers"/>
            <seealso cref="M:XInputium.InputEvent.HasHandler(XInputium.InputEventHandler)"/>
        </member>
        <member name="M:XInputium.InputEvent.ClearHandlers">
            <summary>
            Removes all event handlers currently registered 
            in the <see cref="T:XInputium.InputEvent"/>.
            </summary>
            <seealso cref="M:XInputium.InputEvent.RemoveHandler(XInputium.InputEventHandler)"/>
            <seealso cref="M:XInputium.InputEvent.AddHandler(XInputium.InputEventHandler)"/>
            <seealso cref="P:XInputium.InputEvent.HandlerCount"/>
        </member>
        <member name="M:XInputium.InputEvent.HasHandler(XInputium.InputEventHandler)">
            <summary>
            Determines if the specified <see cref="T:XInputium.InputEventHandler"/> 
            is registered in the <see cref="T:XInputium.InputEvent"/>.
            </summary>
            <param name="handler"><see cref="T:XInputium.InputEventHandler"/> to 
            check for.</param>
            <returns><see langword="true"/> if <paramref name="handler"/> 
            is registered in the <see cref="T:XInputium.InputEvent"/>;
            otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="handler"/> is <see langword="null"/>.</exception>
            <seealso cref="M:XInputium.InputEvent.AddHandler(XInputium.InputEventHandler)"/>
            <seealso cref="M:XInputium.InputEvent.RemoveHandler(XInputium.InputEventHandler)"/>
        </member>
        <member name="T:XInputium.InputEventArgs">
            <summary>
            Encapsulates information about an event that was 
            triggered by an <see cref="T:XInputium.InputEvent"/> instance.
            </summary>
            <seealso cref="T:XInputium.InputEventHandler"/>
            <seealso cref="T:XInputium.InputEvent"/>
            <seealso cref="T:System.EventArgs"/>
        </member>
        <member name="M:XInputium.InputEventArgs.#ctor(XInputium.InputEvent)">
            <summary>
            Initializes a new instance of an <see cref="T:XInputium.InputEventArgs"/> 
            class, that is associated with the specified 
            <see cref="T:XInputium.InputEvent"/>.
            </summary>
            <param name="inputEvent"><see cref="T:XInputium.InputEvent"/> 
            that is triggering the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputEvent"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:XInputium.InputEventArgs.Event">
            <summary>
            Gets the <see cref="T:XInputium.InputEvent"/> instance that 
            triggered the event.
            </summary>
            <seealso cref="T:XInputium.InputEvent"/>
        </member>
        <member name="T:XInputium.InputEventGroup">
            <summary>
            Implements an <see cref="T:XInputium.InputEvent"/> that can group 
            children <see cref="T:XInputium.InputEvent"/> instances, listen 
            for their events and trigger an event when any of 
            its children event is triggered.
            </summary>
            <seealso cref="T:XInputium.InputEvent"/>
        </member>
        <member name="M:XInputium.InputEventGroup.#ctor">
            <summary>
            Initializes a new instance of an <see cref="T:XInputium.InputEventGroup"/> 
            class.
            </summary>
        </member>
        <member name="P:XInputium.InputEventGroup.Children">
            <summary>
            Gets the collection that contains the child 
            <see cref="T:XInputium.InputEvent"/> instances of the 
            <see cref="T:XInputium.InputEventGroup"/>.
            </summary>
        </member>
        <member name="P:XInputium.InputEventGroup.Count">
            <summary>
            Gets the number of child <see cref="T:XInputium.InputEvent"/> 
            instances in the <see cref="T:XInputium.InputEventGroup"/>.
            </summary>
            <seealso cref="M:XInputium.InputEventGroup.Add(XInputium.InputEvent)"/>
            <seealso cref="M:XInputium.InputEventGroup.Remove(XInputium.InputEvent)"/>
        </member>
        <member name="M:XInputium.InputEventGroup.OnUpdate(System.TimeSpan)">
            <summary>
            Updates the children of the <see cref="T:XInputium.InputEventGroup"/>. 
            Overrides <see cref="M:XInputium.InputEvent.OnUpdate(System.TimeSpan)"/>
            </summary>
            <param name="time">The amount of time elapsed since 
            the last update operation.</param>
            <seealso cref="M:XInputium.InputEvent.OnUpdate(System.TimeSpan)"/>
            <seealso cref="M:XInputium.InputEvent.Update(System.TimeSpan)"/>
        </member>
        <member name="M:XInputium.InputEventGroup.Add(XInputium.InputEvent)">
            <summary>
            Adds the specified <see cref="T:XInputium.InputEvent"/> instance 
            to the <see cref="T:XInputium.InputEventGroup"/> children.
            </summary>
            <param name="inputEvent"><see cref="T:XInputium.InputEvent"/> 
            instance to add.</param>
            <returns><see langword="true"/> if <paramref name="inputEvent"/> 
            is not already a child of the <see cref="T:XInputium.InputEventGroup"/> 
            and was successfully added; 
            otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputEvent"/> is <see langword="null"/>.</exception>
            <seealso cref="M:XInputium.InputEventGroup.Remove(XInputium.InputEvent)"/>
            <seealso cref="P:XInputium.InputEventGroup.Count"/>
        </member>
        <member name="M:XInputium.InputEventGroup.Remove(XInputium.InputEvent)">
            <summary>
            Removes the specified <see cref="T:XInputium.InputEvent"/> from 
            the <see cref="T:XInputium.InputEventGroup"/>.
            </summary>
            <param name="inputEvent"><see cref="T:XInputium.InputEvent"/> 
            instance to remove.</param>
            <returns><see langword="true"/> if <paramref name="inputEvent"/> 
            was a child of the <see cref="T:XInputium.InputEventGroup"/> and 
            was successfully removed; 
            otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputEvent"/> is <see langword="null"/>.</exception>
            <seealso cref="M:XInputium.InputEventGroup.Add(XInputium.InputEvent)"/>
            <seealso cref="M:XInputium.InputEventGroup.Clear"/>
        </member>
        <member name="M:XInputium.InputEventGroup.Clear">
            <summary>
            Removes all child <see cref="T:XInputium.InputEvent"/> instances 
            from the <see cref="T:XInputium.InputEventGroup"/>.
            </summary>
            <seealso cref="M:XInputium.InputEventGroup.Remove(XInputium.InputEvent)"/>
            <seealso cref="P:XInputium.InputEventGroup.Count"/>
        </member>
        <member name="M:XInputium.InputEventGroup.Contains(XInputium.InputEvent)">
            <summary>
            Determine if the specified <see cref="T:XInputium.InputEvent"/> 
            instance is a child of the <see cref="T:XInputium.InputEventGroup"/>.
            </summary>
            <param name="inputEvent"><see cref="T:XInputium.InputEvent"/> 
            instance to check for.</param>
            <returns><see langword="true"/> if <paramref name="inputEvent"/> 
            is a child of the <see cref="T:XInputium.InputEventGroup"/>; 
            otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputEvent"/> is <see langword="null"/>.</exception>
            <seealso cref="M:XInputium.InputEventGroup.Add(XInputium.InputEvent)"/>
            <seealso cref="M:XInputium.InputEventGroup.Remove(XInputium.InputEvent)"/>
            <seealso cref="P:XInputium.InputEventGroup.Count"/>
        </member>
        <member name="M:XInputium.InputEventGroup.GetEnumerator">
            <summary>
            Gets an enumerator that iterates through the children 
            of the <see cref="T:XInputium.InputEventGroup"/>.
            </summary>
            <returns>An enumerator that can be used to iterate 
            through the children of <see cref="T:XInputium.InputEventGroup"/>.</returns>
            <seealso cref="P:XInputium.InputEventGroup.Count"/>
            <seealso cref="M:XInputium.InputEventGroup.Contains(XInputium.InputEvent)"/>
        </member>
        <member name="T:XInputium.InputEventHandler">
            <summary>
            Handler for an event associated with an 
            <see cref="T:XInputium.InputEvent"/> instance.
            </summary>
            <param name="sender"><see cref="T:System.Object"/> that invoked the 
            event.</param>
            <param name="e"><see cref="T:XInputium.InputEventArgs"/> instance 
            containing information about the event.</param>
            <seealso cref="T:XInputium.InputEventArgs"/>
            <seealso cref="T:XInputium.InputEvent"/>
        </member>
        <member name="T:XInputium.InputLoopWatch">
            <summary>
            Provides the base for classes that provide time measurement 
            features for input loops.
            </summary>
            <remarks>
            The default implementation of <see cref="T:XInputium.InputLoopWatch"/>
            can be obtained using the <see cref="M:XInputium.InputLoopWatch.GetDefault"/> static 
            method, which uses the system counter to measure time.
            </remarks>
        </member>
        <member name="M:XInputium.InputLoopWatch.#ctor">
            <summary>
            Initializes a new instance of an <see cref="T:XInputium.InputLoopWatch"/> 
            class.
            </summary>
        </member>
        <member name="M:XInputium.InputLoopWatch.Reset">
            <summary>
            When overridden in a derived class, stops time measurement 
            and resets the measured time to 0.
            </summary>
            <seealso cref="M:XInputium.InputLoopWatch.GetTime"/>
        </member>
        <member name="M:XInputium.InputLoopWatch.GetTime">
            <summary>
            When overridden in a derived class, gets the amount 
            of time elapsed since the last call to 
            <see cref="M:XInputium.InputLoopWatch.GetTime"/> method.
            </summary>
            <returns>The amount of time elapsed since the last 
            call to <see cref="M:XInputium.InputLoopWatch.GetTime"/> method. If this is 
            the first time <see cref="M:XInputium.InputLoopWatch.GetTime"/> method is 
            called or if <see cref="M:XInputium.InputLoopWatch.Reset"/> was called after 
            the last call to <see cref="M:XInputium.InputLoopWatch.GetTime"/>, 
            <see cref="F:System.TimeSpan.Zero"/> is returned.</returns>
            <seealso cref="M:XInputium.InputLoopWatch.Reset"/>
        </member>
        <member name="M:XInputium.InputLoopWatch.GetDefault">
            <summary>
            Gets the default <see cref="T:XInputium.InputLoopWatch"/>, that uses the 
            system's counter to measure time.
            </summary>
            <returns>A new instance that is the default implementation of 
            <see cref="T:XInputium.InputLoopWatch"/>.</returns>
        </member>
        <member name="T:XInputium.InputMath">
            <summary>
            Exposes static methods that can be used as math utility 
            methods for common math operations related with input 
            processing.
            </summary>
        </member>
        <member name="M:XInputium.InputMath.Clamp01(System.Single)">
            <summary>
            Truncates the specified <see cref="T:System.Single"/> value to the 0 to 1 
            inclusive range.
            </summary>
            <param name="value">A <see cref="T:System.Single"/> value to truncate.</param>
            <returns>0 if <paramref name="value"/> is lower than or equal to 0, 
            1 if <paramref name="value"/> is greater than or equal to 1, 
            or <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is <see cref="F:System.Single.NaN"/>.</exception>
        </member>
        <member name="M:XInputium.InputMath.Clamp11(System.Single)">
            <summary>
            Truncates the specified <see cref="T:System.Single"/> value to the -1 to 1 
            inclusive range.
            </summary>
            <param name="value">A <see cref="T:System.Single"/> value to truncate.</param>
            <returns>-1 if <paramref name="value"/> is lower than or equal to -1, 
            1 if <paramref name="value"/> is greater than or equal to 1, 
            or <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is <see cref="F:System.Single.NaN"/>.</exception>
        </member>
        <member name="M:XInputium.InputMath.Interpolate(System.Single,System.Single,System.Single)">
            <summary>
            Linearly interpolates between the two specified values.
            </summary>
            <param name="x">Value on interpolation value 0.</param>
            <param name="y">Value on interpolation value 1</param>
            <param name="interpolation">A number between 0 and 1 
            specifying the interpolation amount to apply.</param>
            <returns>The result of the interpolation between 
            <paramref name="x"/> and <paramref name="y"/>, where an 
            <paramref name="interpolation"/> value of 0 would fully 
            return <paramref name="x"/> and 1 would return 
            <paramref name="y"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="x"/> 
            is <see cref="F:System.Single.NaN"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="y"/> 
            is <see cref="F:System.Single.NaN"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="interpolation"/> 
            is <see cref="F:System.Single.NaN"/>.</exception>
            <seealso cref="M:XInputium.InputMath.Clamp01(System.Single)"/>
        </member>
        <member name="M:XInputium.InputMath.ConvertToPolar(System.Single,System.Single,System.Single@,System.Single@)">
            <summary>
            Converts the specified Cartesian coordinates to 
            polar coordinates.
            </summary>
            <param name="x">X Cartesian coordinate.</param>
            <param name="y">Y Cartesian coordinate.</param>
            <param name="angle">Variable that will be set with the 
            converted angle coordinate, in radians.</param>
            <param name="radius">Variable that will be set with 
            the converted radius coordinate.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="x"/> is <see cref="F:System.Single.NaN"/>.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="y"/> is <see cref="F:System.Single.NaN"/>.</exception>
            <remarks>
            <p>
            This method converts the specified <paramref name="x"/> 
            and <paramref name="y"/> Cartesian coordinates to their 
            polar representation, which are composed of the 
            <paramref name="angle"/> and <paramref name="radius"/>.
            You can convert polar coordinates back to Cartesian 
            coordinates using 
            <see cref="M:XInputium.InputMath.ConvertToCartesian(System.Single,System.Single,System.Single@,System.Single@)"/>
            method, which performs the inverse conversion.
            </p>
            <p>
            The outputted <paramref name="angle"/> is in radians.
            You can convert radians to the normalized angle using 
            <see cref="M:XInputium.InputMath.ConvertRadiansToNormal(System.Single)"/> method and 
            convert that back to radians using 
            <see cref="M:XInputium.InputMath.ConvertNormalToRadians(System.Single)"/> method.
            </p>
            <p>
            Note that neither the input nor the output coordinates 
            are clamped in any way. If you need to clamp them to a normal 
            axis range, you can use <see cref="M:XInputium.InputMath.Clamp01(System.Single)"/> or 
            <see cref="M:XInputium.InputMath.Clamp11(System.Single)"/> methods.
            </p>
            </remarks>
            <seealso cref="M:XInputium.InputMath.ConvertToCartesian(System.Single,System.Single,System.Single@,System.Single@)"/>
            <seealso cref="M:XInputium.InputMath.ConvertRadiansToNormal(System.Single)"/>
        </member>
        <member name="M:XInputium.InputMath.ConvertToCartesian(System.Single,System.Single,System.Single@,System.Single@)">
            <summary>
            Converts the specified polar coordinates to 
            2D Cartesian coordinates.
            </summary>
            <param name="angle">Input angle coordinate, in radians.</param>
            <param name="radius">Input radius coordinate.</param>
            <param name="x">Variable that will be set with the
            converted X Cartesian coordinate.</param>
            <param name="y">Variable that will be set with the
            converted Y Cartesian coordinate.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="angle"/> is <see cref="F:System.Single.NaN"/>.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="radius"/> is <see cref="F:System.Single.NaN"/>.</exception>
            <remarks>
            <p>
            This method converts the specified <paramref name="angle"/> 
            and <paramref name="radius"/> polar coordinates to their 
            Cartesian representation, which are composed of the 
            <paramref name="x"/> and <paramref name="y"/> axes.
            You can convert Cartesian coordinates back to polar 
            coordinates using 
            <see cref="M:XInputium.InputMath.ConvertToPolar(System.Single,System.Single,System.Single@,System.Single@)"/>
            method, which performs the inverse conversion.
            </p>
            <p>
            The input <paramref name="angle"/> is in radians.
            You can convert a normalized angle to radians using 
            <see cref="M:XInputium.InputMath.ConvertNormalToRadians(System.Single)"/> method and 
            convert that back to normalized angle using 
            <see cref="M:XInputium.InputMath.ConvertRadiansToNormal(System.Single)"/> method.
            </p>
            <p>
            Note that neither the input nor the output coordinates 
            are clamped in any way. If you need to clamp them to a normal 
            axis range, you can use <see cref="M:XInputium.InputMath.Clamp01(System.Single)"/> or 
            <see cref="M:XInputium.InputMath.Clamp11(System.Single)"/> methods.
            </p>
            </remarks>
            <seealso cref="M:XInputium.InputMath.ConvertToPolar(System.Single,System.Single,System.Single@,System.Single@)"/>
            <seealso cref="M:XInputium.InputMath.ConvertNormalToRadians(System.Single)"/>
        </member>
        <member name="M:XInputium.InputMath.ConvertRadiansToNormal(System.Single)">
            <summary>
            Converts the specified angle from radians to a normalized 
            0-1 ranged clockwise angle.
            </summary>
            <param name="angle">Angle to convert, in radians.</param>
            <returns>A number between 0 and 1 representing the normalized 
            <paramref name="angle"/>. See remarks for more details.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="angle"/> is <see cref="F:System.Single.NaN"/>.</exception>
            <remarks>
            This method takes in an angle in radians and returns it 
            converted to its normalized version. In the context of input 
            axes, within <see cref="T:XInputium.InputMath"/>, a normalized angle is 
            a number between 0 and 1 that is analogous to a quartz clock.
            In this analogy, a normalized angle of 0 is analogous to 
            12 o'clock, while the normalized angle increases towards 1 
            in clockwise orientation and an angle of 1 is analogous to 
            12 o'clock, completing a full turn. In this case, this method 
            assumes <paramref name="angle"/> represents an angle that can 
            be represented in Cartesian coordinates with a bottom-up Y axis.
            <br/><br/>
            The normalized angle can be useful for easy of conversion 
            to other angular units.
            </remarks>
            <see cref="M:XInputium.InputMath.ConvertNormalToRadians(System.Single)"/>
        </member>
        <member name="M:XInputium.InputMath.ConvertNormalToRadians(System.Single)">
            <summary>
            Converts the specified normalized angle, produced by 
            <see cref="M:XInputium.InputMath.ConvertRadiansToNormal(System.Single)"/> method, 
            back to radians.
            </summary>
            <param name="normalAngle">A <see cref="T:System.Single"/> number 
            representing the normalized angle.</param>
            <returns>The representation of <paramref name="normalAngle"/> 
            in radians.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="normalAngle"/> 
            is <see cref="F:System.Single.NaN"/>, <see cref="F:System.Single.PositiveInfinity"/> 
            or <see cref="F:System.Single.NegativeInfinity"/>.</exception>
            <remarks>
            This method assumes <paramref name="normalAngle"/> was 
            previously converted from radians using 
            <see cref="M:XInputium.InputMath.ConvertRadiansToNormal(System.Single)"/>, and is the 
            complementary convert-back method to that method. See the
            remarks section of 
            <see cref="M:XInputium.InputMath.ConvertRadiansToNormal(System.Single)"/> method for 
            more information about normalized angles.
            </remarks>
            <seealso cref="M:XInputium.InputMath.ConvertRadiansToNormal(System.Single)"/>
        </member>
        <member name="M:XInputium.InputMath.ApplyDeadZone(System.Single,System.Single,System.Single)">
            <summary>
            Applies a dead-zone to the specified axis inner and outer 
            edges.
            </summary>
            <param name="value">A number between -1 and 1, representing 
            the position of an axis.</param>
            <param name="innerDeadZone">A value between 0 and 1 
            representing the inner portion of the axis that is in 
            the dead-zone.</param>
            <param name="outerDeadZone">A value between 0 and 1 
            representing the outer portion of the axis that is in 
            the dead-zone.</param>
            <returns>A number between 0 and 1, if <paramref name="value"/> 
            is positive, or between -1 and 0 if <paramref name="value"/> is 
            negative, which results from applying the inner and outer 
            dead-zones to <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is <see cref="F:System.Single.NaN"/>.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="innerDeadZone"/> is <see cref="F:System.Single.NaN"/>.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="outerDeadZone"/> is <see cref="F:System.Single.NaN"/>.</exception>
            <remarks>
            Dead-zone, in the context of a controller axis, represents 
            the portion of the axis that will be ignored. In this case,
            the dead-zone includes two portions of an axis, with the inner 
            portion ranging from the beginning of the axis (its 0 position) to 
            the value of <paramref name="innerDeadZone"/>, and the outer 
            portion ranging from the value of <paramref name="outerDeadZone"/> 
            to the end of the axis (its 1 position). After these edge portions 
            are excluded from the axis, the remaining space of the axis is 
            represented in a range from 0 to 1 or from -1 to 0, depending on 
            whether <paramref name="value"/> is positive or negative, 
            respectively, and that is the value returned by this method. 
            If <paramref name="value"/> is greater than 1 or lower than -1, 
            it will be clamped accordingly to stay in the -1 to 1 range 
            before the dead-zones are applied.
            </remarks>
        </member>
        <member name="M:XInputium.InputMath.ApplyDeadZone(System.Single,System.Single)">
            <summary>
            Applies a dead-zone to the specified axis inner edge.
            </summary>
            <param name="value">A number between -1 and 1, representing 
            the position of an axis.</param>
            <param name="innerDeadZone">A value between 0 and 1 
            representing the inner portion of the axis that is in 
            the dead-zone.</param>
            <returns>A number between 0 and 1, if <paramref name="value"/> 
            is positive, or between -1 and 0 if <paramref name="value"/> is 
            negative, which results from applying the inner dead-zone to 
            <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is <see cref="F:System.Single.NaN"/>.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="innerDeadZone"/> is <see cref="F:System.Single.NaN"/>.</exception>
            <remarks>
            Dead-zone, in the context of a controller axis, represents 
            the portion of the axis that will be ignored. In this case,
            the dead-zone includes one portions of an axis â€” the inner portion, 
            which ranges from the beginning of the axis (its 0 position) to 
            the value of <paramref name="innerDeadZone"/>. After this portion 
            is excluded from the axis, the remaining space of the axis is 
            represented in a range from 0 to 1 or from -1 to 0, depending on 
            whether <paramref name="value"/> is positive or negative, 
            respectively, and that is the value returned by this method. 
            If <paramref name="value"/> is greater than 1 or lower than -1, 
            it will be clamped accordingly to stay in the -1 to 1 range 
            before the dead-zone is applied.
            </remarks>
        </member>
        <member name="T:XInputium.InputObject">
            <summary>
            Implements an <see cref="T:XInputium.EventDispatcherObject"/> that 
            provides an input event system based on <see cref="T:XInputium.InputEvent"/>.
            </summary>
            <seealso cref="T:XInputium.EventDispatcherObject"/>
            <seealso cref="T:XInputium.InputEvent"/>
        </member>
        <member name="M:XInputium.InputObject.#ctor(XInputium.EventDispatchMode)">
            <summary>
            Initializes a new instance of an 
            <see cref="T:XInputium.InputObject"/> class.
            </summary>
            <param name="eventDispatchMode"><see cref="T:XInputium.EventDispatchMode"/> 
            constant that specifies the way events are dispatched.</param>
            <exception cref="T:System.ArgumentException"><paramref name="eventDispatchMode"/> 
            is not a defined constant in an <see cref="T:XInputium.EventDispatchMode"/> 
            enumeration.</exception>
            <seealso cref="T:XInputium.EventDispatchMode"/>
        </member>
        <member name="E:XInputium.InputObject.InputEventTriggered">
            <summary>
            It's invoked whenever an <see cref="T:XInputium.InputEvent"/> 
            registered in the <see cref="T:XInputium.InputObject"/> is 
            triggered.
            </summary>
            <seealso cref="M:XInputium.InputObject.OnInputEventTriggered(XInputium.InputEventArgs)"/>
            <seealso cref="T:XInputium.InputEvent"/>
            <seealso cref="M:XInputium.InputObject.RegisterInputEvent(XInputium.InputEvent)"/>
            <seealso cref="M:XInputium.InputObject.UnregisterInputEvent(XInputium.InputEvent)"/>
        </member>
        <member name="M:XInputium.InputObject.OnInputEventTriggered(XInputium.InputEventArgs)">
            <summary>
            Raises the <see cref="E:XInputium.InputObject.InputEventTriggered"/> event.
            </summary>
            <param name="e"><see cref="T:XInputium.InputEventArgs"/> instance 
            that contains information about the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="e"/> is <see langword="null"/>.</exception>
            <seealso cref="E:XInputium.InputObject.InputEventTriggered"/>
            <seealso cref="T:XInputium.InputEvent"/>
        </member>
        <member name="M:XInputium.InputObject.RegisterInputEvent(XInputium.InputEvent)">
            <summary>
            Registers the specified <see cref="T:XInputium.InputEvent"/> in 
            the <see cref="T:XInputium.InputObject"/>.
            </summary>
            <param name="inputEvent"><see cref="T:XInputium.InputEvent"/> 
            instance to register.</param>
            <returns><see langword="true"/> if <paramref name="inputEvent"/> 
            was successfully registered; <see langword="false"/> 
            if <paramref name="inputEvent"/> is already registered.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputEvent"/> is <see langword="null"/>.</exception>
            <remarks>
            This method registers the specified <see cref="T:XInputium.InputEvent"/> 
            instance in the <see cref="T:XInputium.InputObject"/>. 
            Registered input events will participate in the 
            <see cref="T:XInputium.InputObject"/>'s input event system, and will fire 
            events once their respective conditions are met. Registered 
            input events are tied to the event dispatching system and 
            will be triggered when 
            <see cref="M:XInputium.InputObject.UpdateInputObject(System.TimeSpan)"/>. method is called.
            <br/><br/>
            To unregister a registered input event, use 
            <see cref="M:XInputium.InputObject.UnregisterInputEvent(XInputium.InputEvent)"/> method.
            </remarks>
            <seealso cref="M:XInputium.InputObject.UnregisterInputEvent(XInputium.InputEvent)"/>
        </member>
        <member name="M:XInputium.InputObject.UnregisterInputEvent(XInputium.InputEvent)">
            <summary>
            Unregisters an <see cref="T:XInputium.InputEvent"/> that was 
            previously registered with 
            <see cref="M:XInputium.InputObject.RegisterInputEvent(XInputium.InputEvent)"/> 
            method.
            </summary>
            <param name="inputEvent"><see cref="T:XInputium.InputEvent"/> 
            instance to unregister from the input event system.</param>
            <returns><see langword="true"/> if 
            <paramref name="inputEvent"/> was found and unregistered; 
            otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputEvent"/> is <see langword="null"/>.</exception>
            <seealso cref="M:XInputium.InputObject.RegisterInputEvent(XInputium.InputEvent)"/>
            <seealso cref="M:XInputium.InputObject.UnregisterAllInputEvents"/>
        </member>
        <member name="M:XInputium.InputObject.UnregisterAllInputEvents">
            <summary>
            Unregisters all <see cref="T:XInputium.InputEvent"/> instances 
            currently registered in the 
            <see cref="T:XInputium.InputObject"/>'s input event system.
            </summary>
            <seealso cref="M:XInputium.InputObject.UnregisterInputEvent(XInputium.InputEvent)"/>
            <seealso cref="M:XInputium.InputObject.RegisterInputEvent(XInputium.InputEvent)"/>
        </member>
        <member name="M:XInputium.InputObject.IsInputEventRegistered(XInputium.InputEvent)">
            <summary>
            Determines if the specified <see cref="T:XInputium.InputEvent"/> 
            is registered in the current <see cref="T:XInputium.InputObject"/>.
            </summary>
            <param name="inputEvent"><see cref="T:XInputium.InputEvent"/> 
            to check for.</param>
            <returns><see langword="true"/> if <paramref name="inputEvent"/> 
            is registered in the <see cref="T:XInputium.InputObject"/>;
            otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputEvent"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:XInputium.InputObject.UpdateInputObject(System.TimeSpan)">
            <summary>
            Updates the state of <see cref="T:XInputium.InputObject"/>.
            </summary>
            <param name="time">AMount of time elapsed since 
            the last update operation.</param>
            <remarks>
            This method updates the <see cref="T:XInputium.InputObject"/>, 
            making it update the logic of all registered 
            <see cref="T:XInputium.InputEvent"/> instances and dispatching 
            any enqueued events. Inheritors must call this method 
            for every update to the input state.
            </remarks>
        </member>
        <member name="T:XInputium.InputObjectExtensions">
            <summary>
            Exposes extension methods for <see cref="T:XInputium.InputObject"/> 
            objects.
            </summary>
            <seealso cref="T:XInputium.InputObject"/>
        </member>
        <member name="M:XInputium.InputObjectExtensions.RegisterActivationInputEvent(XInputium.InputObject,System.Func{System.Boolean},System.TimeSpan,System.TimeSpan,System.TimeSpan,XInputium.ActivationInputEventTriggerMode,System.Object,XInputium.ActivationInputEventHandler)">
            <summary>
            Registers a new <see cref="T:XInputium.ActivationInputEvent"/> that 
            triggers whenever the specified activator function activates 
            or deactivates.
            </summary>
            <param name="inputObject"><see cref="T:XInputium.InputObject"/> where 
            the event will be registered.</param>
            <param name="activator">Function that will be called to 
            determine whether a custom condition is met.</param>
            <param name="activationDelay">Delay time the event will 
            wait after the activator function activates, until the 
            event triggers. If you specify <see cref="F:System.TimeSpan.Zero"/>, 
            the event triggers immediately.</param>
            <param name="deactivationDelay">Delay time the event will 
            wait after the activator function deactivates, until the 
            event triggers. If you specify <see cref="F:System.TimeSpan.Zero"/>, 
            the event triggers immediately.</param>
            <param name="activeTimeout">Maximum duration the event's active 
            state is allowed to have. Once the event is continuously active 
            for longer than this amount of time, the event deactivates.
            If you specify <see cref="F:System.TimeSpan.Zero"/>, the event 
            deactivates immediately after activating.</param>
            <param name="triggerMode">An 
            <see cref="T:XInputium.ActivationInputEventTriggerMode"/> constant that 
            specifies when the event will trigger.</param>
            <param name="parameter">An custom object that will be passed 
            to the event handler of the event; or <see langword="null"/> 
            to use no custom object.</param>
            <param name="callback">Callback that will handle the event.</param>
            <returns>The newly created and registered 
            <see cref="T:XInputium.ActivationInputEvent"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputObject"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="activator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="callback"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="triggerMode"/> 
            is not a defined constant in an 
            <see cref="T:XInputium.ActivationInputEventTriggerMode"/> enumeration.</exception>
            <seealso cref="T:XInputium.InputObject"/>
            <seealso cref="T:XInputium.ActivationInputEvent"/>
        </member>
        <member name="M:XInputium.InputObjectExtensions.RegisterActivationInputEvent(XInputium.InputObject,System.Func{System.Boolean},System.TimeSpan,System.TimeSpan,System.TimeSpan,XInputium.ActivationInputEventTriggerMode,XInputium.ActivationInputEventHandler)">
            <summary>
            Registers a new <see cref="T:XInputium.ActivationInputEvent"/> that 
            triggers whenever the specified activator function activates 
            or deactivates.
            </summary>
            <param name="inputObject"><see cref="T:XInputium.InputObject"/> where 
            the event will be registered.</param>
            <param name="activator">Function that will be called to 
            determine whether a custom condition is met.</param>
            <param name="activationDelay">Delay time the event will 
            wait after the activator function activates, until the 
            event triggers. If you specify <see cref="F:System.TimeSpan.Zero"/>, 
            the event triggers immediately.</param>
            <param name="deactivationDelay">Delay time the event will 
            wait after the activator function deactivates, until the 
            event triggers. If you specify <see cref="F:System.TimeSpan.Zero"/>, 
            the event triggers immediately.</param>
            <param name="activeTimeout">Maximum duration the event's active 
            state is allowed to have. Once the event is continuously active 
            for longer than this amount of time, the event deactivates.
            If you specify <see cref="F:System.TimeSpan.Zero"/>, the event 
            deactivates immediately after activating.</param>
            <param name="triggerMode">An 
            <see cref="T:XInputium.ActivationInputEventTriggerMode"/> constant that 
            specifies when the event will trigger.</param>
            <param name="callback">Callback that will handle the event.</param>
            <returns>The newly created and registered 
            <see cref="T:XInputium.ActivationInputEvent"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputObject"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="activator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="callback"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="triggerMode"/> 
            is not a defined constant in an 
            <see cref="T:XInputium.ActivationInputEventTriggerMode"/> enumeration.</exception>
            <seealso cref="T:XInputium.InputObject"/>
            <seealso cref="T:XInputium.ActivationInputEvent"/>
        </member>
        <member name="M:XInputium.InputObjectExtensions.RegisterActivationInputEvent(XInputium.InputObject,System.Func{System.Boolean},System.TimeSpan,System.TimeSpan,XInputium.ActivationInputEventTriggerMode,XInputium.ActivationInputEventHandler)">
            <summary>
            Registers a new <see cref="T:XInputium.ActivationInputEvent"/> that 
            triggers whenever the specified activator function activates 
            or deactivates.
            </summary>
            <param name="inputObject"><see cref="T:XInputium.InputObject"/> where 
            the event will be registered.</param>
            <param name="activator">Function that will be called to 
            determine whether a custom condition is met.</param>
            <param name="activationDelay">Delay time the event will 
            wait after the activator function activates, until the 
            event triggers. If you specify <see cref="F:System.TimeSpan.Zero"/>, 
            the event triggers immediately.</param>
            <param name="deactivationDelay">Delay time the event will 
            wait after the activator function deactivates, until the 
            event triggers. If you specify <see cref="F:System.TimeSpan.Zero"/>, 
            the event triggers immediately.</param>
            <param name="triggerMode">An 
            <see cref="T:XInputium.ActivationInputEventTriggerMode"/> constant that 
            specifies when the event will trigger.</param>
            <param name="callback">Callback that will handle the event.</param>
            <returns>The newly created and registered 
            <see cref="T:XInputium.ActivationInputEvent"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputObject"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="activator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="callback"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="triggerMode"/> 
            is not a defined constant in an 
            <see cref="T:XInputium.ActivationInputEventTriggerMode"/> enumeration.</exception>
            <seealso cref="T:XInputium.InputObject"/>
            <seealso cref="T:XInputium.ActivationInputEvent"/>
        </member>
        <member name="M:XInputium.InputObjectExtensions.RegisterActivationInputEvent(XInputium.InputObject,System.Func{System.Boolean},System.TimeSpan,XInputium.ActivationInputEventTriggerMode,XInputium.ActivationInputEventHandler)">
            <summary>
            Registers a new <see cref="T:XInputium.ActivationInputEvent"/> that 
            triggers whenever the specified activator function activates 
            or deactivates.
            </summary>
            <param name="inputObject"><see cref="T:XInputium.InputObject"/> where 
            the event will be registered.</param>
            <param name="activator">Function that will be called to 
            determine whether a custom condition is met.</param>
            <param name="activationDelay">Delay time the event will 
            wait after the activator function activates, until the 
            event triggers. If you specify <see cref="F:System.TimeSpan.Zero"/>, 
            the event triggers immediately.</param>
            <param name="triggerMode">An 
            <see cref="T:XInputium.ActivationInputEventTriggerMode"/> constant that 
            specifies when the event will trigger.</param>
            <param name="callback">Callback that will handle the event.</param>
            <returns>The newly created and registered 
            <see cref="T:XInputium.ActivationInputEvent"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputObject"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="activator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="callback"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="triggerMode"/> 
            is not a defined constant in an 
            <see cref="T:XInputium.ActivationInputEventTriggerMode"/> enumeration.</exception>
            <seealso cref="T:XInputium.InputObject"/>
            <seealso cref="T:XInputium.ActivationInputEvent"/>
        </member>
        <member name="M:XInputium.InputObjectExtensions.RegisterActivationInputEvent(XInputium.InputObject,System.Func{System.Boolean},XInputium.ActivationInputEventTriggerMode,XInputium.ActivationInputEventHandler)">
            <summary>
            Registers a new <see cref="T:XInputium.ActivationInputEvent"/> that 
            triggers whenever the specified activator function activates 
            or deactivates.
            </summary>
            <param name="inputObject"><see cref="T:XInputium.InputObject"/> where 
            the event will be registered.</param>
            <param name="activator">Function that will be called to 
            determine whether a custom condition is met.</param>
            <param name="triggerMode">An 
            <see cref="T:XInputium.ActivationInputEventTriggerMode"/> constant that 
            specifies when the event will trigger.</param>
            <param name="callback">Callback that will handle the event.</param>
            <returns>The newly created and registered 
            <see cref="T:XInputium.ActivationInputEvent"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputObject"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="activator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="callback"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="triggerMode"/> 
            is not a defined constant in an 
            <see cref="T:XInputium.ActivationInputEventTriggerMode"/> enumeration.</exception>
            <seealso cref="T:XInputium.InputObject"/>
            <seealso cref="T:XInputium.ActivationInputEvent"/>
        </member>
        <member name="M:XInputium.InputObjectExtensions.RegisterActivationInputEvent(XInputium.InputObject,System.Func{System.Boolean},XInputium.ActivationInputEventHandler)">
            <summary>
            Registers a new <see cref="T:XInputium.ActivationInputEvent"/> that 
            triggers whenever the specified activator function activates 
            or deactivates, and uses 
            <see cref="F:XInputium.ActivationInputEventTriggerMode.OnActivationAndDeactivation"/>
            as its trigger mode.
            </summary>
            <param name="inputObject"><see cref="T:XInputium.InputObject"/> where 
            the event will be registered.</param>
            <param name="activator">Function that will be called to 
            determine whether a custom condition is met.</param>
            <param name="callback">Callback that will handle the event.</param>
            <returns>The newly created and registered 
            <see cref="T:XInputium.ActivationInputEvent"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputObject"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="activator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="callback"/> is <see langword="null"/>.</exception>
            <seealso cref="T:XInputium.InputObject"/>
            <seealso cref="T:XInputium.ActivationInputEvent"/>
        </member>
        <member name="M:XInputium.InputObjectExtensions.RegisterButtonPressedEvent``1(XInputium.InputObject,``0,XInputium.DigitalButtonInputEventHandler{``0})">
            <summary>
            Registers a new <see cref="T:XInputium.DigitalButtonInputEvent`1"/> 
            that is triggered when the specified button changes its state 
            from released to pressed, meaning the user has just tapped 
            the button.
            </summary>
            <typeparam name="T">A type deriving from <see cref="T:XInputium.DigitalButton"/> 
            that specifies the type of the button that the event will listen to.
            </typeparam>
            <param name="inputObject">THe <see cref="T:XInputium.InputObject"/> instance 
            where the event will be registered.</param>
            <param name="button">A <typeparamref name="T"/> object deriving
            from <see cref="T:XInputium.DigitalButton"/>, that represents the button 
            the event will listen for.</param>
            <param name="callback">Callback that will be called when 
            the event is triggered.</param>
            <returns>The new <see cref="T:XInputium.DigitalButtonInputEvent`1"/> 
            instance that was registered.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputObject"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="button"/> 
            is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="callback"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:XInputium.InputObjectExtensions.RegisterButtonReleasedEvent``1(XInputium.InputObject,``0,XInputium.DigitalButtonInputEventHandler{``0})">
            <summary>
            Registers a new <see cref="T:XInputium.DigitalButtonInputEvent`1"/> 
            that is triggered when the specified button changes its state 
            from pressed to released, meaning the user has just released 
            the button that was being pressed.
            </summary>
            <typeparam name="T">A type deriving from <see cref="T:XInputium.DigitalButton"/> 
            that specifies the type of the button that the event will listen to.
            </typeparam>
            <param name="inputObject">THe <see cref="T:XInputium.InputObject"/> instance 
            where the event will be registered.</param>
            <param name="button">A <typeparamref name="T"/> object deriving
            from <see cref="T:XInputium.DigitalButton"/>, that represents the button 
            the event will listen for.</param>
            <param name="callback">Callback that will be called when the event 
            is triggered.</param>
            <returns>The new <see cref="T:XInputium.DigitalButtonInputEvent`1"/> 
            instance that was registered.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputObject"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="button"/> 
            is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="callback"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:XInputium.InputObjectExtensions.RegisterButtonHoldEvent``1(XInputium.InputObject,``0,System.TimeSpan,XInputium.DigitalButtonInputEventHandler{``0})">
            <summary>
            Registers a new <see cref="T:XInputium.DigitalButtonInputEvent`1"/> 
            that is triggered when the specified button is held by the 
            specified duration.
            </summary>
            <typeparam name="T">A type deriving from <see cref="T:XInputium.DigitalButton"/> 
            that specifies the type of the button that the event will listen to.
            </typeparam>
            <param name="inputObject">THe <see cref="T:XInputium.InputObject"/> instance 
            where the event will be registered.</param>
            <param name="button">A <typeparamref name="T"/> object deriving
            from <see cref="T:XInputium.DigitalButton"/>, that represents the button 
            the event will listen for.</param>
            <param name="holdDuration">The amount of time the user must 
            hold down the button for the event to trigger. If you specify 
            <see cref="F:System.TimeSpan.Zero"/>, this event will behave like a pressed 
            event.</param>
            <param name="callback">Callback that will be called when 
            the event is triggered.</param>
            <returns>The new <see cref="T:XInputium.DigitalButtonInputEvent`1"/> 
            instance that was registered.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputObject"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="button"/> 
            is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="callback"/> is <see langword="null"/>.</exception>
            <remarks>
            The returned registered <see cref="T:XInputium.DigitalButtonInputEvent`1"/> 
            will be triggered once, when the user presses and holds the button 
            for the specified amount of time. Once the event is triggered, 
            it will only be triggered again after the user releases the 
            button and repeats the same action (pressing and holding the 
            button for <paramref name="holdDuration"/>).
            </remarks>
        </member>
        <member name="M:XInputium.InputObjectExtensions.RegisterButtonRepeatEvent``1(XInputium.InputObject,``0,System.TimeSpan,System.TimeSpan,System.Single,System.TimeSpan,System.TimeSpan,XInputium.DigitalButtonInputEventHandler{``0})">
            <summary>
            Registers a new a <see cref="T:XInputium.RepeatDigitalButtonInputEvent`1"/> 
            that is triggered repeatedly while the specified button is held, and 
            uses the specified acceleration parameters for acceleration or 
            deceleration of repeat delay times.
            </summary>
            <typeparam name="T">A type deriving from <see cref="T:XInputium.DigitalButton"/> 
            that specifies the type of the button that the event will listen to.
            </typeparam>
            <param name="inputObject"><see cref="T:XInputium.InputObject"/> instance where the 
            event will be registered.</param>
            <param name="button">A <typeparamref name="T"/> object deriving from 
            <see cref="T:XInputium.DigitalButton"/> to which the event will listen.</param>
            <param name="initialDelay">Amount of time the button must be held for 
            the repeating to start.</param>
            <param name="repeatDelay">Base amount of time to wait between each 
            repeat.</param>
            <param name="accelerationRatio">A number greater than 0, that specifies 
            the acceleration ratio of the <paramref name="repeatDelay"/> time that 
            will be applied on each triggering repeat. A value less than 1 causes 
            the repeats to be slower, more than 1 causes the repeats to be faster, 
            and 1 uses no acceleration or deceleration.</param>
            <param name="minRepeatDelay">When <paramref name="accelerationRatio"/> 
            is greater than 1, causing the repeat delay time to be shorter on each 
            triggering repeat, this specifies the minimum delay time allowed between 
            each repeat.</param>
            <param name="maxRepeatDelay">When <paramref name="accelerationRatio"/> 
            is lower than 1, causing the repeat delay time to be longer on each 
            triggering repeat, this specifies the maximum delay time allowed between 
            each repeat.</param>
            <param name="callback">Callback that will be called when the event is 
            triggered.</param>
            <returns>The new <see cref="T:XInputium.RepeatDigitalButtonInputEvent`1"/> that 
            was registered.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputObject"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="button"/>
            is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="callback"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="accelerationRatio"/> 
            is <see cref="F:System.Single.NaN"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="accelerationRatio"/> is equal to or lower than 0.</exception>
            <seealso cref="T:XInputium.RepeatDigitalButtonInputEvent`1"/>
        </member>
        <member name="M:XInputium.InputObjectExtensions.RegisterButtonRepeatEvent``1(XInputium.InputObject,``0,System.TimeSpan,System.TimeSpan,XInputium.DigitalButtonInputEventHandler{``0})">
            <summary>
            Registers a new a <see cref="T:XInputium.RepeatDigitalButtonInputEvent`1"/> 
            that is triggered repeatedly while the specified button is held.
            </summary>
            <typeparam name="T">A type deriving from <see cref="T:XInputium.DigitalButton"/> 
            that specifies the type of the button that the event will listen to.
            </typeparam>
            <param name="inputObject"><see cref="T:XInputium.InputObject"/> instance where the 
            event will be registered.</param>
            <param name="button">A <typeparamref name="T"/> object deriving from 
            <see cref="T:XInputium.DigitalButton"/> to which the event will listen.</param>
            <param name="initialDelay">Amount of time the button must be held for 
            the repeating to start.</param>
            <param name="repeatDelay">Amount of time to wait between each 
            repeat.</param>
            <param name="callback">Callback that will be called when the event is 
            triggered.</param>
            <returns>The new <see cref="T:XInputium.RepeatDigitalButtonInputEvent`1"/> that 
            was registered.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputObject"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="button"/>
            is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="callback"/> is <see langword="null"/>.</exception>
            <seealso cref="T:XInputium.RepeatDigitalButtonInputEvent`1"/>
        </member>
        <member name="T:XInputium.Internal.DefaultInputLoopWatch">
            <summary>
            Implements an <see cref="T:XInputium.InputLoopWatch"/> that uses 
            the system counter to measure time.
            </summary>
            <seealso cref="T:XInputium.InputLoopWatch"/>
        </member>
        <member name="M:XInputium.Internal.DefaultInputLoopWatch.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:XInputium.Internal.DefaultInputLoopWatch"/> 
            class.
            </summary>
        </member>
        <member name="M:XInputium.Internal.DefaultInputLoopWatch.Reset">
            <summary>
            Stops time measurement and resets the measured time 
            to 0.
            Overrides <see cref="M:XInputium.InputLoopWatch.Reset"/>.
            </summary>
            <seealso cref="M:XInputium.Internal.DefaultInputLoopWatch.GetTime"/>
        </member>
        <member name="M:XInputium.Internal.DefaultInputLoopWatch.GetTime">
            <summary>
            Gets the amount of time elapsed since the last call to 
            <see cref="M:XInputium.Internal.DefaultInputLoopWatch.GetTime"/> method. 
            Overrides <see cref="M:XInputium.InputLoopWatch.GetTime"/>.
            </summary>
            <returns>The amount of time elapsed since the last call 
            to <see cref="M:XInputium.Internal.DefaultInputLoopWatch.GetTime"/> method.</returns>
            <seealso cref="M:XInputium.Internal.DefaultInputLoopWatch.Reset"/>
        </member>
        <member name="T:XInputium.Internal.Statistics.SampledAverage`1">
            <summary>
            Provides an efficient algorithm to determine the average value 
            of a collection of values, as these values are continuously added. 
            This is an abstract class.
            </summary>
            <typeparam name="T">Type of the sample values.</typeparam>
        </member>
        <member name="M:XInputium.Internal.Statistics.SampledAverage`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:XInputium.Internal.Statistics.SampledAverage`1"/> 
            class, that has the specified maximum capacity.
            </summary>
            <param name="maxSampleLength">A number greater than 0, that 
            specifies how many sample values the <see cref="T:XInputium.Internal.Statistics.SampledAverage`1"/> 
            instance can hold.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxSampleLength"/> is lower than 1.</exception>
            <seealso cref="P:XInputium.Internal.Statistics.SampledAverage`1.MaxSampleLength"/>
        </member>
        <member name="P:XInputium.Internal.Statistics.SampledAverage`1.Zero">
            <summary>
            When overridden in a derived class, gets the zero 
            value for <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="P:XInputium.Internal.Statistics.SampledAverage`1.MaxSampleLength">
            <summary>
            Gets the maximum number of sample values the 
            <see cref="T:XInputium.Internal.Statistics.SampledAverage`1"/> can hold.
            </summary>
            <returns>An <see cref="T:System.Int32"/> greater than 0.</returns>
            <remarks>
            This property returns the maximum number of sample 
            values that can be stored in the current 
            <see cref="T:XInputium.Internal.Statistics.SampledAverage`1"/> instance â€” that is, it 
            returns its maximum capacity.
            <see cref="P:XInputium.Internal.Statistics.SampledAverage`1.MaxSampleLength"/> is always equal to or 
            greater than <see cref="P:XInputium.Internal.Statistics.SampledAverage`1.Count"/>. If 
            <see cref="P:XInputium.Internal.Statistics.SampledAverage`1.IsFull"/> property returns 
            <see langword="true"/> â€” meaning <see cref="P:XInputium.Internal.Statistics.SampledAverage`1.Count"/> 
            equals to <see cref="P:XInputium.Internal.Statistics.SampledAverage`1.MaxSampleLength"/> â€” and you add 
            a new sample value to the <see cref="T:XInputium.Internal.Statistics.SampledAverage`1"/>, 
            all of the oldest excess samples will be automatically 
            removed.
            <br/><br/>
            The initial value of <see cref="P:XInputium.Internal.Statistics.SampledAverage`1.MaxSampleLength"/> is 
            specified when the <see cref="T:XInputium.Internal.Statistics.SampledAverage`1"/> is 
            instantiated. However, you can set a new maximum 
            capacity using <see cref="M:XInputium.Internal.Statistics.SampledAverage`1.SetMaxSampleLength(System.Int32)"/> 
            method. See <see cref="M:XInputium.Internal.Statistics.SampledAverage`1.SetMaxSampleLength(System.Int32)"/> for 
            more information.
            </remarks>
            <seealso cref="M:XInputium.Internal.Statistics.SampledAverage`1.SetMaxSampleLength(System.Int32)"/>
            <seealso cref="P:XInputium.Internal.Statistics.SampledAverage`1.Count"/>
            <seealso cref="P:XInputium.Internal.Statistics.SampledAverage`1.IsFull"/>
        </member>
        <member name="P:XInputium.Internal.Statistics.SampledAverage`1.Count">
            <summary>
            Gets the number of sample values currently stored in 
            the <see cref="T:XInputium.Internal.Statistics.SampledAverage`1"/>.
            </summary>
            <returns>An <see cref="T:System.Int32"/> equal to or greater 
            than 0, and equal to or lower than 
            <see cref="P:XInputium.Internal.Statistics.SampledAverage`1.MaxSampleLength"/>.</returns>
            <seealso cref="P:XInputium.Internal.Statistics.SampledAverage`1.MaxSampleLength"/>
            <seealso cref="P:XInputium.Internal.Statistics.SampledAverage`1.IsFull"/>
        </member>
        <member name="P:XInputium.Internal.Statistics.SampledAverage`1.IsFull">
            <summary>
            Gets a <see cref="T:System.Boolean"/> that indicates if the 
            number of sample values in the 
            <see cref="T:XInputium.Internal.Statistics.SampledAverage`1"/> is at its maximum capacity.
            </summary>
            <remarks>
            When the <see cref="T:XInputium.Internal.Statistics.SampledAverage`1"/> is full, any 
            new sample values you add will make oldest samples to 
            get removed to make room for the new ones. This is the 
            intended behavior. This property allows you to 
            determine if the calculation of the sample average has 
            already reached its intended precision.
            </remarks>
            <seealso cref="P:XInputium.Internal.Statistics.SampledAverage`1.Count"/>
            <seealso cref="P:XInputium.Internal.Statistics.SampledAverage`1.MaxSampleLength"/>
            <seealso cref="P:XInputium.Internal.Statistics.SampledAverage`1.IsEmpty"/>
        </member>
        <member name="P:XInputium.Internal.Statistics.SampledAverage`1.IsEmpty">
            <summary>
            Gets a <see cref="T:System.Boolean"/> that indicates if the 
            <see cref="T:XInputium.Internal.Statistics.SampledAverage`1"/> has currently no stored 
            sample values.
            </summary>
            <seealso cref="P:XInputium.Internal.Statistics.SampledAverage`1.IsFull"/>
            <seealso cref="P:XInputium.Internal.Statistics.SampledAverage`1.Count"/>
        </member>
        <member name="P:XInputium.Internal.Statistics.SampledAverage`1.TotalSum">
            <summary>
            Gets the sum of all sample values currently stored in 
            the <see cref="T:XInputium.Internal.Statistics.SampledAverage`1"/>.
            </summary>
            <seealso cref="P:XInputium.Internal.Statistics.SampledAverage`1.Average"/>
            <seealso cref="P:XInputium.Internal.Statistics.SampledAverage`1.Count"/>
        </member>
        <member name="P:XInputium.Internal.Statistics.SampledAverage`1.Average">
            <summary>
            Gets the average value of the sample values currently 
            stored in the <see cref="T:XInputium.Internal.Statistics.SampledAverage`1"/>.
            </summary>
            <seealso cref="P:XInputium.Internal.Statistics.SampledAverage`1.TotalSum"/>
            <seealso cref="P:XInputium.Internal.Statistics.SampledAverage`1.Count"/>
        </member>
        <member name="M:XInputium.Internal.Statistics.SampledAverage`1.OnUpdated">
            <summary>
            It's called whenever samples in the <see cref="T:XInputium.Internal.Statistics.SampledAverage`1"/> 
            are added, removed, or cleared. When overridden in derived 
            classes, enables inheritors to determine additional values 
            for the derived class.
            </summary>
            <seealso cref="M:XInputium.Internal.Statistics.SampledAverage`1.Add(`0)"/>
            <seealso cref="M:XInputium.Internal.Statistics.SampledAverage`1.Clear"/>
        </member>
        <member name="M:XInputium.Internal.Statistics.SampledAverage`1.GetAverage(System.Int32,`0)">
            <summary>
            When overridden in a derived class, gets the average sample 
            value, given the provided number of samples and the 
            provided samples sum.
            </summary>
            <param name="samplesCount">Number of samples to get the 
            average value of.</param>
            <param name="totalSum">Total sum of all the samples.</param>
            <returns>The calculated average value.</returns>
        </member>
        <member name="M:XInputium.Internal.Statistics.SampledAverage`1.SumValue(`0,`0)">
            <summary>
            Calculates the sum of both specified values.
            </summary>
            <param name="x">First value of the sum.</param>
            <param name="y">Second value of the sum.</param>
            <returns>The sum of <paramref name="x"/> and 
            <paramref name="y"/>.</returns>
            <seealso cref="M:XInputium.Internal.Statistics.SampledAverage`1.SubtractValue(`0,`0)"/>
        </member>
        <member name="M:XInputium.Internal.Statistics.SampledAverage`1.SubtractValue(`0,`0)">
            <summary>
            Calculates the subtraction of <paramref name="y"/> 
            from <paramref name="x"/>.
            </summary>
            <param name="x">Value to subtract from.</param>
            <param name="y">Value to subtract by.</param>
            <returns>The result of 
            <paramref name="x"/>-<paramref name="y"/>.</returns>
            <seealso cref="M:XInputium.Internal.Statistics.SampledAverage`1.SumValue(`0,`0)"/>
        </member>
        <member name="M:XInputium.Internal.Statistics.SampledAverage`1.Add(`0)">
            <summary>
            Adds a new sample into the <see cref="T:XInputium.Internal.Statistics.SampledAverage`1"/>,
            that has the specified value.
            </summary>
            <param name="value">The sample value to add.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:XInputium.Internal.Statistics.SampledAverage`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds all the sample values in the specified collection 
            to the <see cref="T:XInputium.Internal.Statistics.SampledAverage`1"/>.
            </summary>
            <param name="values">Collection that contains the 
            sample values to add.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:XInputium.Internal.Statistics.SampledAverage`1.Clear">
            <summary>
            Removes all samples from the <see cref="T:XInputium.Internal.Statistics.SampledAverage`1"/>.
            </summary>
            <seealso cref="M:XInputium.Internal.Statistics.SampledAverage`1.Add(`0)"/>
        </member>
        <member name="M:XInputium.Internal.Statistics.SampledAverage`1.SetMaxSampleLength(System.Int32)">
            <summary>
            Sets the maximum number of samples that the 
            <see cref="T:XInputium.Internal.Statistics.SampledAverage`1"/> can hold.
            </summary>
            <param name="maxSampleLength">A number greater than 0, that 
            specifies how many sample values the 
            <see cref="T:XInputium.Internal.Statistics.SampledAverage`1"/> can store.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxSampleLength"/> is less than 1.</exception>
            <remarks>
            This method can be used to increase or decrease the 
            current capacity of the <see cref="T:XInputium.Internal.Statistics.SampledAverage`1"/> 
            instance. If you set a maximum sample length that is 
            lower than the current number of stored samples, all 
            of the oldest excess samples will be removed.
            <br/><br/>
            To determine the current capacity of the 
            <see cref="T:XInputium.Internal.Statistics.SampledAverage`1"/> instance, use 
            <see cref="P:XInputium.Internal.Statistics.SampledAverage`1.MaxSampleLength"/> property.
            </remarks>
            <seealso cref="P:XInputium.Internal.Statistics.SampledAverage`1.MaxSampleLength"/>
            <seealso cref="M:XInputium.Internal.Statistics.SampledAverage`1.Clear"/>
        </member>
        <member name="M:XInputium.Internal.Statistics.SampledAverage`1.GetEnumerator">
            <summary>
            Gets an enumerator that iterates though the 
            sample values in the <see cref="T:XInputium.Internal.Statistics.SampledAverage`1"/>.
            </summary>
            <returns>An enumerator that can be used to 
            iterate though the sample values in the 
            <see cref="T:XInputium.Internal.Statistics.SampledAverage`1"/>.</returns>
        </member>
        <member name="M:XInputium.Internal.Statistics.SampledAverage`1.RemoveWhile(System.Predicate{`0})">
            <summary>
            Removes all of the oldest sample values that match the 
            specified predicate, until the predicate returns 
            <see langword="false"/>.
            </summary>
            <param name="predicate">Predicate that will select the 
            samples to remove.</param>
            <returns>The number of samples removed.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="predicate"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:XInputium.Joystick">
            <summary>
            Represents a controller joystick, with support for 
            configuration of how its position is effectively 
            represented.
            </summary>
            <remarks>
            For a lightweight alternative to the <see cref="T:XInputium.Joystick"/> 
            class, that has only the essential functionality, you 
            can use <see cref="T:XInputium.SlimJoystick"/> structure.
            </remarks>
            <seealso cref="T:XInputium.SlimJoystick"/>
            <seealso cref="T:XInputium.Trigger"/>
        </member>
        <member name="M:XInputium.Joystick.#ctor">
            <summary>
            Initializes a default instance of a <see cref="T:XInputium.Joystick"/> 
            class.
            </summary>
        </member>
        <member name="M:XInputium.Joystick.#ctor(XInputium.JoystickUpdateCallback@)">
            <summary>
            Initializes a new instance of a <see cref="T:XInputium.Joystick"/> 
            class, that supports state updating from external code.
            </summary>
            <param name="updateCallback">Variable that will be set 
            with a <see cref="T:XInputium.JoystickUpdateCallback"/> delegate 
            that can be invoked to update the state of the 
            <see cref="T:XInputium.Joystick"/> instance.</param>
        </member>
        <member name="M:XInputium.Joystick.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of a <see cref="T:XInputium.Joystick"/> 
            class, that has a read-only raw position.
            </summary>
            <param name="x">A value between -1 and 1 representing the 
            horizontal axis, where -1 is the left and 1 is the right 
            position.</param>
            <param name="y">A value between -1 and 1 representing the 
            vertical axis, where -1 is the bottom and 1 is the top 
            position.</param>
            <exception cref="T:System.ArgumentException"><paramref name="x"/> 
            is <see cref="F:System.Single.NaN"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="y"/> 
            is <see cref="F:System.Single.NaN"/>.</exception>
        </member>
        <member name="M:XInputium.Joystick.#ctor(XInputium.SlimJoystick)">
            <summary>
            Creates a new instance of a <see cref="T:XInputium.Joystick"/> 
            class that has read-only raw coordinates obtained from 
            the coordinates of the specified <see cref="T:XInputium.SlimJoystick"/> 
            object.
            </summary>
            <param name="joystick"><see cref="T:XInputium.SlimJoystick"/> object 
            to obtain the raw coordinates from.</param>
            <seealso cref="T:XInputium.SlimJoystick"/>
        </member>
        <member name="E:XInputium.Joystick.Updated">
            <summary>
            It's invoked whenever the state of the <see cref="T:XInputium.Joystick"/>
            is updated from outside code.
            </summary>
        </member>
        <member name="E:XInputium.Joystick.PositionChanged">
            <summary>
            It's invoked whenever the value of <see cref="P:XInputium.Joystick.X"/> or 
            <see cref="P:XInputium.Joystick.Y"/> properties changes.
            </summary>
            <seealso cref="P:XInputium.Joystick.X"/>
            <seealso cref="P:XInputium.Joystick.Y"/>
        </member>
        <member name="E:XInputium.Joystick.AngleChanged">
            <summary>
            It's invoked whenever the value of <see cref="P:XInputium.Joystick.Angle"/> 
            property changes.
            </summary>
            <seealso cref="P:XInputium.Joystick.Angle"/>
        </member>
        <member name="E:XInputium.Joystick.RadiusChanged">
            <summary>
            It's invoked whenever the value of <see cref="P:XInputium.Joystick.Radius"/> 
            property changes.
            </summary>
            <seealso cref="P:XInputium.Joystick.Radius"/>
        </member>
        <member name="E:XInputium.Joystick.DirectionChanged">
            <summary>
            It's invoked whenever the value of <see cref="P:XInputium.Joystick.Direction"/> 
            property changes.
            </summary>
            <seealso cref="P:XInputium.Joystick.Direction"/>
        </member>
        <member name="E:XInputium.Joystick.IsMovingChanged">
            <summary>
            It's invoked whenever the value of <see cref="P:XInputium.Joystick.IsMoving"/> 
            property changes.
            </summary>
            <seealso cref="P:XInputium.Joystick.IsMoving"/>
            <seealso cref="M:XInputium.Joystick.OnIsMovingChanged"/>
        </member>
        <member name="E:XInputium.Joystick.IsPushedChanged">
            <summary>
            It's invoked whenever the value of <see cref="P:XInputium.Joystick.IsPushed"/> 
            property changes.
            </summary>
            <seealso cref="P:XInputium.Joystick.IsPushed"/>
        </member>
        <member name="P:XInputium.Joystick.RawX">
            <summary>
            Gets the raw position of the joystick's X axis.
            </summary>
            <returns>A value between -1 and 1, where -1 represents the 
            left and 1 represents the right raw position of 
            the joystick.</returns>
            <remarks>
            <see cref="P:XInputium.Joystick.RawX"/> returns the raw position of the 
            joystick's horizontal axis as provided by the underlying 
            device. To get the effective position of the X axis, 
            use <see cref="P:XInputium.Joystick.X"/> property, which considers all of 
            the <see cref="T:XInputium.Joystick"/>'s modifiers.
            </remarks>
            <seealso cref="P:XInputium.Joystick.RawY"/>
            <seealso cref="P:XInputium.Joystick.X"/>
        </member>
        <member name="P:XInputium.Joystick.RawY">
            <summary>
            Gets the raw position of the joystick's Y axis.
            </summary>
            <returns>A value between -1 and 1, where -1 represents the 
            bottom and 1 represents the top raw position of 
            the joystick.</returns>
            <remarks>
            <see cref="P:XInputium.Joystick.RawY"/> returns the raw position of the 
            joystick's vertical axis as provided by the underlying 
            device. To get the effective position of the Y axis, 
            use <see cref="P:XInputium.Joystick.Y"/> property, which considers all of 
            the <see cref="T:XInputium.Joystick"/>'s modifiers.
            </remarks>
            <seealso cref="P:XInputium.Joystick.RawX"/>
            <seealso cref="P:XInputium.Joystick.Y"/>
        </member>
        <member name="P:XInputium.Joystick.RawRadius">
            <summary>
            Gets the raw radius of the joystick, which is 
            analogous to its distance from the center raw 
            position.
            </summary>
            <returns>A value between 0 and 1, where 0 is the center 
            of the joystick and 1 is its outer edge.</returns>
            <seealso cref="P:XInputium.Joystick.Radius"/>
            <seealso cref="P:XInputium.Joystick.Angle"/>
            <seealso cref="P:XInputium.Joystick.RawX"/>
            <seealso cref="P:XInputium.Joystick.RawY"/>
        </member>
        <member name="P:XInputium.Joystick.RawAngle">
            <summary>
            Gets the normalized raw angle of the joystick.
            </summary>
            <returns>A value between 0 and 1, representing the 
            joystick's normalized raw angle.</returns>
            <remarks>
            In the context of the <see cref="T:XInputium.Joystick"/> class, 
            a normalized angle is a value between 0 and 1 that 
            represents the angle. The normalized angle is 
            analogous to a quartz clock, where 0 is analogous 
            to 12 oÂ´clock, and increases in clockwise orientation 
            until 1 is analogous to 12 o'clock again.
            <br/>
            The normalized angle can be useful when converting 
            it to other units, like degrees.
            <br/>
            You can convert between normalized angles and radians 
            using <see cref="M:XInputium.InputMath.ConvertNormalToRadians(System.Single)"/> 
            and <see cref="M:XInputium.InputMath.ConvertRadiansToNormal(System.Single)"/> 
            methods.
            </remarks>
            <seealso cref="P:XInputium.Joystick.RawRadius"/>
            <seealso cref="P:XInputium.Joystick.Angle"/>
        </member>
        <member name="P:XInputium.Joystick.IsRawWithinCircle">
            <summary>
            Gets a <see cref="T:System.Boolean"/> that indicates whether the 
            raw position of the joystick is within the full circular 
            area of the joystick.
            </summary>
            <returns><see langword="true"/> when the raw position 
            of the joystick would result in a radius lower than or 
            equal to 1; otherwise, <see langword="false"/>.</returns>
            <remarks>
            This property will return <see langword="false"/> when 
            the raw position of the joystick, as reported by 
            <see cref="P:XInputium.Joystick.RawX"/> and <see cref="P:XInputium.Joystick.RawY"/> coordinates, 
            would result in a radius that is greater than 1. 
            Usually, when this property returns <see langword="false"/>, 
            it means the raw position would not be valid for a 
            circular joystick, meaning a device reporting such position 
            may be damaged or defective. Not that devices may not 
            be 100% accurate in their axis measurement, making it 
            possible for this property to return <see langword="false"/> 
            even on properly working devices.
            </remarks>
        </member>
        <member name="P:XInputium.Joystick.X">
            <summary>
            Gets the effective value of the joystick's X axis.
            </summary>
            <returns>A value between -1 and 1, where -1 represents the 
            left and 1 represents the right effective position of 
            the joystick.</returns>
            <remarks>
            <see cref="P:XInputium.Joystick.X"/> property returns the effective position 
            of the joystick's horizontal axis. In the context of the 
            <see cref="T:XInputium.Joystick"/> class, the effective position of 
            an axis is the position of the axis with all the modifiers 
            applied to the joystick. This contrasts with the raw 
            position, which represents the non-processed position of 
            the joystick as provided by the underlying device. You 
            can use <see cref="P:XInputium.Joystick.RawX"/> to get the raw position of the 
            X axis.
            </remarks>
            <seealso cref="P:XInputium.Joystick.Y"/>
            <seealso cref="P:XInputium.Joystick.RawX"/>
        </member>
        <member name="P:XInputium.Joystick.Y">
            <summary>
            Gets the effective value of the joystick's Y axis.
            </summary>
            <returns>A value between -1 and 1, where -1 represents the 
            bottom and 1 represents the top effective position of 
            the joystick.</returns>
            <remarks>
            <see cref="P:XInputium.Joystick.Y"/> property returns the effective position 
            of the joystick's vertical axis. In the context of the 
            <see cref="T:XInputium.Joystick"/> class, the effective position of 
            an axis is the position of the axis with all the modifiers 
            applied to the joystick. This contrasts with the raw 
            position, which represents the non-processed position of 
            the joystick as provided by the underlying device. You 
            can use <see cref="P:XInputium.Joystick.RawY"/> to get the raw position of the 
            Y axis.
            </remarks>
            <seealso cref="P:XInputium.Joystick.X"/>
            <seealso cref="P:XInputium.Joystick.RawY"/>
        </member>
        <member name="P:XInputium.Joystick.Angle">
            <summary>
            Gets the effective normalized angle of the joystick.
            </summary>
            <returns>A value between 0 and 1, representing the 
            joystick's effective normalized angle.</returns>
            <remarks>
            In the context of the <see cref="T:XInputium.Joystick"/> class, 
            a normalized angle is a value between 0 and 1 that 
            represents the angle. The normalized angle is 
            analogous to a quartz clock, where 0 is analogous 
            to 12 oÂ´clock, and increases in clockwise orientation 
            until 1 is analogous to 12 o'clock again.
            <br/>
            The normalized angle can be useful when converting 
            it to other units, like degrees.
            <br/>
            You can convert between normalized angles and radians 
            using <see cref="M:XInputium.InputMath.ConvertNormalToRadians(System.Single)"/> 
            and <see cref="M:XInputium.InputMath.ConvertRadiansToNormal(System.Single)"/> 
            methods.
            </remarks>
            <seealso cref="P:XInputium.Joystick.Radius"/>
        </member>
        <member name="P:XInputium.Joystick.Radius">
            <summary>
            Gets the effective radius of the joystick, which is 
            analogous to its distance from the center effective 
            position.
            </summary>
            <returns>A value between 0 and 1, where 0 is the center 
            of the joystick and 1 is its outer edge.</returns>
            <seealso cref="P:XInputium.Joystick.RawRadius"/>
            <seealso cref="P:XInputium.Joystick.Angle"/>
        </member>
        <member name="P:XInputium.Joystick.Delta">
            <summary>
            Gets a <see cref="T:XInputium.JoystickDelta"/> object that represents 
            the difference between the current and the previous joystick 
            effective position.
            </summary>
            <returns>A <see cref="T:XInputium.JoystickDelta"/> object representing 
            the movement delta of the joystick.</returns>
            <remarks>
            This property can be useful to determine if the joystick has 
            moved and by how much it has moved. The returned 
            <see cref="T:XInputium.JoystickDelta"/> object contains the relative 
            coordinates of the current joystick effective position, relative 
            to the effective position it had before the most recent update.
            </remarks>
            <seealso cref="P:XInputium.Joystick.IsPushed"/>
        </member>
        <member name="P:XInputium.Joystick.Direction">
            <summary>
            Gets a <see cref="T:XInputium.JoystickDirection"/> constant 
            that represents the current effective direction of 
            the joystick.
            </summary>
            <returns>An <see cref="T:XInputium.JoystickDirection"/> constant 
            representing the direction of the joystick's angle. 
            If the joystick radius is 0, <see cref="F:XInputium.JoystickDirection.None"/> 
            is returned.</returns>
            <seealso cref="T:XInputium.JoystickDirection"/>
            <seealso cref="P:XInputium.Joystick.Angle"/>
            <seealso cref="P:XInputium.Joystick.Radius"/>
        </member>
        <member name="P:XInputium.Joystick.MovementSpeed">
            <summary>
            Gets the estimated distance per second the joystick is being moved by,
            by considering its current a previous effective position.
            </summary>
            <returns>A number equal to or greater than 0, representing the estimated 
            distance the joystick is moving per second. If <see cref="P:XInputium.Joystick.FrameTime"/> 
            is <see cref="F:System.TimeSpan.Zero"/> and <see cref="P:XInputium.Joystick.Delta"/> reports a 
            movement distance greater than 0, <see cref="F:System.Single.PositiveInfinity"/> 
            is returned.</returns>
            <remarks>
            The number returned by this property represents the total distance the 
            joystick would travel within a second, if it kept moving at its current 
            speed. Its current speed is the joystick's delta distance (see 
            <see cref="P:XInputium.Joystick.Delta"/> property), divided by the number of seconds elapsed 
            between the two most recent update operations. Although the joystick 
            could not keep moving indeterminately because it is constrained to its 
            -1 to 1 boundaries, this property assumes as if it could.
            <br/><br/>
            When the time elapsed between the two most recent update operations is 
            zero (<see cref="F:System.TimeSpan.Zero"/>) while the delta distance is greater 
            than 0, this property returns <see cref="F:System.Single.PositiveInfinity"/> to 
            indicate the joystick is moving at infinite speed and represent an 
            immediate movement.
            </remarks>
            <seealso cref="P:XInputium.Joystick.Delta"/>
            <seealso cref="P:XInputium.Joystick.FrameTime"/>
            <seealso cref="P:XInputium.Joystick.IsPushed"/>
        </member>
        <member name="P:XInputium.Joystick.IsMoving">
            <summary>
            Gets a <see cref="T:System.Boolean"/> that indicates if the joystick is 
            currently being moved, considering the two most recent 
            update operations.
            </summary>
            <returns><see langword="true"/> if the joystick is being moved;
            otherwise, <see langword="false"/>.</returns>
            <seealso cref="P:XInputium.Joystick.Delta"/>
            <seealso cref="P:XInputium.Joystick.MovementSpeed"/>
            <seealso cref="P:XInputium.Joystick.IsPushed"/>
        </member>
        <member name="P:XInputium.Joystick.IsPushed">
            <summary>
            Gets a <see cref="T:System.Boolean"/> that indicates the joystick's 
            effective position is currently not at its center position, 
            meaning it is being pushed by the user.
            </summary>
            <returns><see langword="true"/> if <see cref="P:XInputium.Joystick.Radius"/> is 
            greater than 0; otherwise, <see langword="false"/>.</returns>
            <seealso cref="P:XInputium.Joystick.Radius"/>
        </member>
        <member name="P:XInputium.Joystick.FrameTime">
            <summary>
            Gets the amount of time elapsed since the last time the 
            <see cref="T:XInputium.Joystick"/> raw position was updated.
            </summary>
        </member>
        <member name="P:XInputium.Joystick.InvertX">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> that specifies if the 
            value of the X axis must be inverted.
            </summary>
            <value><see langword="true"/> to invert the value of 
            the X axis or <see langword="false"/> to not change it. 
            The default value is <see langword="false"/>.</value>
            <remarks>
            When this property is set to <see langword="true"/>, the 
            value of the X axis will be inverted, meaning a value that 
            would be -1 will be 1, and a value that would be 1 will 
            be -1.
            </remarks>
            <seealso cref="P:XInputium.Joystick.InvertY"/>
            <seealso cref="P:XInputium.Joystick.X"/>
        </member>
        <member name="P:XInputium.Joystick.InvertY">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> that specifies if the 
            value of the Y axis must be inverted.
            </summary>
            <value><see langword="true"/> to invert the value of 
            the Y axis or <see langword="false"/> to not change it. 
            The default value is <see langword="false"/>.</value>
            <remarks>
            When this property is set to <see langword="true"/>, the 
            value of the T axis will be inverted, meaning a value that 
            would be -1 will be 1, and a value that would be 1 will 
            be -1.
            </remarks>
            <seealso cref="P:XInputium.Joystick.InvertX"/>
            <seealso cref="P:XInputium.Joystick.Y"/>
        </member>
        <member name="P:XInputium.Joystick.InnerDeadZone">
            <summary>
            Gets or sets the inner circular dead-zone of the joystick.
            </summary>
            <value>A value between 0 and 1, representing the portion 
            of the joystick's inner area that will be effectively 
            ignored. The default value is 0.</value>
            <exception cref="T:System.ArgumentException">The value being set 
            to the property is <see cref="F:System.Single.NaN"/>.</exception>
            <seealso cref="P:XInputium.Joystick.OuterDeadZone"/>
        </member>
        <member name="P:XInputium.Joystick.OuterDeadZone">
            <summary>
            Gets or sets the outer circular dead-zone of the joystick.
            </summary>
            <value>A value between 0 and 1, representing the portion 
            of the joystick's outer area that will be effectively 
            ignored. The default value is 0.</value>
            <exception cref="T:System.ArgumentException">The value being set 
            to the property is <see cref="F:System.Single.NaN"/>.</exception>
            <seealso cref="P:XInputium.Joystick.InnerDeadZone"/>
        </member>
        <member name="P:XInputium.Joystick.XModifierFunction">
            <summary>
            Gets or sets the <see cref="T:XInputium.ModifierFunction"/> delegate 
            that is used to modify the X axis.
            </summary>
            <value>A <see cref="T:XInputium.ModifierFunction"/> delegate or 
            <see langword="null"/> to specify no modifier function. 
            The default value is <see langword="null"/>.</value>
            <seealso cref="P:XInputium.Joystick.X"/>
        </member>
        <member name="P:XInputium.Joystick.YModifierFunction">
            <summary>
            Gets or sets the <see cref="T:XInputium.ModifierFunction"/> delegate 
            that is used to modify the Y axis.
            </summary>
            <value>A <see cref="T:XInputium.ModifierFunction"/> delegate or 
            <see langword="null"/> to specify no modifier function. 
            The default value is <see langword="null"/>.</value>
            <seealso cref="P:XInputium.Joystick.Y"/>
        </member>
        <member name="P:XInputium.Joystick.RadiusModifierFunction">
            <summary>
            Gets or sets the <see cref="T:XInputium.ModifierFunction"/> delegate 
            that is used to modify the effective radius of the 
            joystick.
            </summary>
            <value>A <see cref="T:XInputium.ModifierFunction"/> delegate or 
            <see langword="null"/> to specify no modifier function. 
            The default value is <see langword="null"/>.</value>
            <seealso cref="P:XInputium.Joystick.Radius"/>
        </member>
        <member name="P:XInputium.Joystick.AngleModifierFunction">
            <summary>
            Gets or sets the <see cref="T:XInputium.ModifierFunction"/> delegate 
            that is used to modify the effective angle of the 
            joystick.
            </summary>
            <value>A <see cref="T:XInputium.ModifierFunction"/> delegate or 
            <see langword="null"/> to specify no modifier function. 
            The default value is <see langword="null"/>.</value>
            <seealso cref="P:XInputium.Joystick.Angle"/>
        </member>
        <member name="P:XInputium.Joystick.SmoothingSamplePeriod">
            <summary>
            Gets or sets the maximum amount of time a smoothing 
            sample is kept in memory for joystick smoothing 
            calculation.
            </summary>
            <value>A <see cref="T:System.TimeSpan"/> object representing 
            positive time, where <see cref="F:System.TimeSpan.Zero"/> 
            disables smoothing. The default value is 
            <see cref="F:System.TimeSpan.Zero"/>.</value>
            <remarks>
            This property specifies how long the most recent 
            joystick position samples are kept in memory for 
            use in joystick smoothing calculation. The longer 
            the period, the more smoothing is applied and, 
            consequently, the more the fastest joystick movements 
            are slowed down. A <see cref="F:System.TimeSpan.Zero"/> means 
            no time frame will be considered, meaning smoothing 
            doesn't occur. Usually, for smoothing of fast and
            unstable movements, just a few milliseconds would 
            be the ideal value for this property.
            <br/><br/>
            To specify how much of the calculated smoothing is 
            effectively applied to the joystick, use 
            <see cref="P:XInputium.Joystick.SmoothingFactor"/> property.
            <br/><br/>
            Joystick smoothing is not applicable to all use cases. 
            Some use cases might include a game or application 
            that requires the user to move an object in screen 
            with high precision or to minimize accidental 
            steering in a car driving game.
            </remarks>
            <seealso cref="P:XInputium.Joystick.SmoothingFactor"/>
        </member>
        <member name="P:XInputium.Joystick.SmoothingFactor">
            <summary>
            Gets or sets how much of the computed smoothing is 
            applied to the joystick.
            </summary>
            <value>A number between 0 and 1, where 0 means no 
            smoothing is applied and 1 means full smoothing. 
            The default value is 0.</value>
            <exception cref="T:System.ArgumentException">The value being 
            set to the property is <see cref="F:System.Single.NaN"/>.</exception>
            <remarks>
            This property specifies how much smoothing is applied. 
            While <see cref="P:XInputium.Joystick.SmoothingSamplePeriod"/> specifies the 
            amount of time newer registered samples are kept in 
            memory for the smoothing algorithm to determine the 
            smoothed coordinates calculation, 
            <see cref="P:XInputium.Joystick.SmoothingFactor"/> specifies how much of 
            that smoothed coordinates are used for the effective 
            position.
            </remarks>
            <seealso cref="P:XInputium.Joystick.SmoothingSamplePeriod"/>
        </member>
        <member name="M:XInputium.Joystick.Encapsulate(XInputium.Joystick)">
            <summary>
            Gets a new <see cref="T:XInputium.Joystick"/> instance that encapsulates 
            the specified <see cref="T:XInputium.Joystick"/> instance, and that has 
            its raw joystick position automatically updated whenever the 
            encapsulated instance is updated.
            </summary>
            <param name="joystick"><see cref="T:XInputium.Joystick"/> instance to 
            encapsulate.</param>
            <returns>The newly created <see cref="T:XInputium.Joystick"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="joystick"/>
            is <see langword="null"/>.</exception>
            <remarks>
            This method allows you to create a new <see cref="T:XInputium.Joystick"/> instance, 
            but use another <see cref="T:XInputium.Joystick"/> instance as the source of 
            its raw state information. This is useful in scenarios where you need 
            to have different <see cref="T:XInputium.Joystick"/> instances that represent the 
            same physical joystick, but need to have different settings depending 
            on your application's state. The returned <see cref="T:XInputium.Joystick"/> 
            instance is automatically updated whenever the underlying 
            <paramref name="joystick"/> is updated. Only the underlying joystick's 
            raw position and time information is obtained; the effective position 
            of the returned <see cref="T:XInputium.Joystick"/> is determined depending on the 
            obtained raw position and the settings you specify on the new 
            <see cref="T:XInputium.Joystick"/>.
            </remarks>
        </member>
        <member name="M:XInputium.Joystick.ConvertNormalAngleToJoystickDirection(System.Single)">
            <summary>
            Converts the specified normalized angle to a 
            <see cref="T:XInputium.JoystickDirection"/> constant that represents 
            the direction of the angle.
            </summary>
            <param name="normalAngle">A value between 0 and 1, that 
            specifies the normalized angle to convert.</param>
            <returns>A <see cref="T:XInputium.JoystickDirection"/> constant 
            that specifies the direction of the angle.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="normalAngle"/> is <see cref="F:System.Single.NaN"/>.</exception>
        </member>
        <member name="M:XInputium.Joystick.ToString">
            <summary>
            Gets the <see cref="T:System.String"/> representation of the 
            current <see cref="T:XInputium.Joystick"/> instance.
            </summary>
            <returns>The <see cref="T:System.String"/> representation of 
            the <see cref="T:XInputium.Joystick"/></returns>
        </member>
        <member name="M:XInputium.Joystick.OnUpdated">
            <summary>
            It's called once on every update and raises the 
            <see cref="E:XInputium.Joystick.Updated"/> event.
            </summary>
            <seealso cref="E:XInputium.Joystick.Updated"/>
        </member>
        <member name="M:XInputium.Joystick.OnPositionChanged">
            <summary>
            Raises the <see cref="E:XInputium.Joystick.PositionChanged"/> event.
            </summary>
            <seealso cref="E:XInputium.Joystick.PositionChanged"/>
            <seealso cref="P:XInputium.Joystick.X"/>
            <seealso cref="P:XInputium.Joystick.Y"/>
        </member>
        <member name="M:XInputium.Joystick.OnAngleChanged">
            <summary>
            Raises the <see cref="E:XInputium.Joystick.AngleChanged"/> event.
            </summary>
            <seealso cref="E:XInputium.Joystick.AngleChanged"/>
            <seealso cref="P:XInputium.Joystick.Angle"/>
        </member>
        <member name="M:XInputium.Joystick.OnRadiusChanged">
            <summary>
            Raises the <see cref="E:XInputium.Joystick.RadiusChanged"/> event.
            </summary>
            <seealso cref="E:XInputium.Joystick.RadiusChanged"/>
            <seealso cref="P:XInputium.Joystick.Radius"/>
        </member>
        <member name="M:XInputium.Joystick.OnDirectionChanged">
            <summary>
            Raises the <see cref="E:XInputium.Joystick.DirectionChanged"/> event.
            </summary>
            <seealso cref="E:XInputium.Joystick.DirectionChanged"/>
            <seealso cref="P:XInputium.Joystick.Direction"/>
        </member>
        <member name="M:XInputium.Joystick.OnIsMovingChanged">
            <summary>
            Raises the <see cref="E:XInputium.Joystick.IsMovingChanged"/> event.
            </summary>
            <seealso cref="E:XInputium.Joystick.IsMovingChanged"/>
            <seealso cref="P:XInputium.Joystick.IsMoving"/>
        </member>
        <member name="M:XInputium.Joystick.OnIsPushedChanged">
            <summary>
            Raises the <see cref="E:XInputium.Joystick.IsPushedChanged"/> event.
            </summary>
            <seealso cref="E:XInputium.Joystick.IsPushedChanged"/>
            <seealso cref="P:XInputium.Joystick.IsPushed"/>
        </member>
        <member name="M:XInputium.Joystick.OnUpdating">
            <summary>
            It's called on every update to the <see cref="T:XInputium.Joystick"/>, 
            before joystick validation. When overridden by a derived 
            class, performs inheritors custom operations that need to 
            occur before the validation is performed.
            </summary>
            <remarks>
            This method allows inheritors to perform any operation 
            that must occur when the <see cref="T:XInputium.Joystick"/> is updated, 
            that might invalidate the <see cref="T:XInputium.Joystick"/>, forcing 
            a validation to occur as soon as possible.
            <br/><br/>
            Use <see cref="P:XInputium.Joystick.RawX"/>, <see cref="P:XInputium.Joystick.RawY"/>, <see cref="P:XInputium.Joystick.RawAngle"/>,
            <see cref="P:XInputium.Joystick.RawRadius"/> and <see cref="P:XInputium.Joystick.FrameTime"/> properties 
            to get the new raw position of the joystick and the current 
            update's frame time.
            </remarks>
            <seealso cref="M:XInputium.Joystick.Invalidate"/>
        </member>
        <member name="M:XInputium.Joystick.Invalidate">
            <summary>
            Marks the effective position of the <see cref="T:XInputium.Joystick"/> 
            as outdated. The next time a getter method of one of the 
            properties that are associated with the position of the 
            <see cref="T:XInputium.Joystick"/> is called, the <see cref="T:XInputium.Joystick"/> 
            will be validated.
            </summary>
            <remarks>
            Inheritors can call this method if they are implementing 
            functionality that may affect th effective position of the 
            <see cref="T:XInputium.Joystick"/> â€” the value of <see cref="P:XInputium.Joystick.X"/> 
            or <see cref="P:XInputium.Joystick.Y"/> properties â€” that is not automatically 
            applied. For instance, if you are implementing a custom 
            modifier property that consumers can change, you would call 
            this method whenever your property's value changes.
            </remarks>
            <seealso cref="M:XInputium.Joystick.Validate"/>
        </member>
        <member name="M:XInputium.Joystick.Validate">
            <summary>
            If the effective position of the joystick is outdated, 
            forces it to get updated and all modifiers to be applied.
            </summary>
            <returns><see langword="true"/> if the effective position 
            of the joystick was updated and effectively 
            changed as a result of this operation; 
            otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.NotSupportedException">The 
            <see cref="M:XInputium.Joystick.ApplyCartesianModifiers(System.Single@,System.Single@)"/> 
            was overridden in the derived class, and outputted a
            <see cref="F:System.Single.NaN"/> value when called by 
            <see cref="M:XInputium.Joystick.Validate"/>.</exception>
            <exception cref="T:System.NotSupportedException">The 
            <see cref="M:XInputium.Joystick.ApplyPolarModifiers(System.Single@,System.Single@)"/> was 
            overridden in the derived class, and outputted a
            <see cref="F:System.Single.NaN"/> value when called by 
            <see cref="M:XInputium.Joystick.Validate"/>.</exception>
            <remarks>
            You call this method when you need to force the effective 
            position of the joystick to be updated with all the modifiers. 
            You usually call this method after changing the value of a 
            property that can affect the joystick's effective position. 
            Although the effective position is automatically updated 
            as needed when the getter method of some properties is 
            called, calling <see cref="M:XInputium.Joystick.Validate"/> method ensures it 
            is updated immediately, so any events that depend on this 
            will be triggered.
            </remarks>
            <seealso cref="P:XInputium.Joystick.X"/>
            <seealso cref="P:XInputium.Joystick.Y"/>
            <seealso cref="M:XInputium.Joystick.Invalidate"/>
            <seealso cref="M:XInputium.Joystick.ApplyCartesianModifiers(System.Single@,System.Single@)"/>
            <seealso cref="M:XInputium.Joystick.ApplyPolarModifiers(System.Single@,System.Single@)"/>
        </member>
        <member name="M:XInputium.Joystick.ApplyCartesianModifiers(System.Single@,System.Single@)">
            <summary>
            When overridden in derived classes, receives the specified 
            joystick raw Cartesian coordinates and applies any modifiers 
            to them.
            </summary>
            <param name="rawX">Reference to the raw X axis value to modify. 
            This is a value between -1 and 1.</param>
            <param name="rawY">Reference to the raw Y axis value to modify. 
            This is a value between -1 and 1.</param>
            <remarks>
            This method is called by <see cref="M:XInputium.Joystick.Validate"/> method to 
            apply the modifiers to the axes position. The base 
            implementation applies all of the base Cartesian modifiers, so 
            you need to call the base implementation from your own 
            implementation to ensure the base modifiers are correctly 
            applied. Because <paramref name="rawX"/> and 
            <paramref name="rawY"/> represent the raw values of the X and 
            Y axes, obtained from the underlying device, you have the 
            ability to apply modifications that require the raw axes' 
            value for them to be applied, meaning you would call the base 
            implementation in the most appropriate moment for your needs.
            </remarks>
            <seealso cref="P:XInputium.Joystick.X"/>
            <seealso cref="P:XInputium.Joystick.Y"/>
            <seealso cref="M:XInputium.Joystick.Validate"/>
            <seealso cref="M:XInputium.Joystick.ApplyPolarModifiers(System.Single@,System.Single@)"/>
        </member>
        <member name="M:XInputium.Joystick.ApplyPolarModifiers(System.Single@,System.Single@)">
            <summary>
            When overridden in derived classes, receives the specified 
            joystick raw polar coordinates and applies any modifiers 
            to them.
            </summary>
            <param name="normalAngle">Reference to the normalized angle 
            to modify. This is a value between 0 and 1.</param>
            <param name="radius">Reference to the radius to modify. 
            This is a value between 0 and 1. See <see cref="P:XInputium.Joystick.Radius"/> 
            property for more information about normalized 
            <see cref="T:XInputium.Joystick"/> angles.</param>
            <remarks>
            This method is called by <see cref="M:XInputium.Joystick.Validate"/> method to 
            apply the modifiers to the joystick position in polar 
            coordinates, after a call to 
            <see cref="M:XInputium.Joystick.ApplyCartesianModifiers(System.Single@,System.Single@)"/> 
            method.
            <br/>
            The base implementation applies all of the base polar 
            modifiers, so you need to call the base implementation from 
            your own implementation to ensure the base modifiers are 
            correctly applied.
            </remarks>
            <seealso cref="P:XInputium.Joystick.Angle"/>
            <seealso cref="P:XInputium.Joystick.Radius"/>
            <seealso cref="M:XInputium.Joystick.Validate"/>
            <seealso cref="M:XInputium.Joystick.ApplyCartesianModifiers(System.Single@,System.Single@)"/>
        </member>
        <member name="M:XInputium.Joystick.CopyConfigurationFrom(XInputium.Joystick)">
            <summary>
            Sets all writable properties in the current <see cref="T:XInputium.Joystick"/>
            instance with values obtained from the corresponding properties 
            in the specified <see cref="T:XInputium.Joystick"/> instance.
            </summary>
            <param name="joystick"><see cref="T:XInputium.Joystick"/> instance to copy 
            the configuration from.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="joystick"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:XInputium.Joystick.ToDigitalButton(System.Func{XInputium.Joystick,XInputium.DigitalButton,System.Boolean})">
            <summary>
            Gets a new <see cref="T:XInputium.DigitalButton"/> instance that activates 
            (presses) when the specified activation function returns 
            <see langword="true"/> for the current state of the 
            <see cref="T:XInputium.Joystick"/>.
            </summary>
            <param name="activationFunction">Function that will be called 
            on every update to the state of the <see cref="T:XInputium.Joystick"/>, which 
            receives the current <see cref="T:XInputium.Joystick"/> instance and the 
            <see cref="T:XInputium.DigitalButton"/> as its parameters.</param>
            <returns>A new <see cref="T:XInputium.DigitalButton"/> instance that is updated 
            automatically, and reports its state as pressed depending on the state 
            of the <see cref="T:XInputium.Joystick"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="activationFunction"/> is <see langword="null"/>.</exception>
            <seealso cref="T:XInputium.DigitalButton"/>
        </member>
        <member name="M:XInputium.Joystick.ToDigitalButton(XInputium.JoystickDirection,System.Single,System.Single)">
            <summary>
            Gets a new <see cref="T:XInputium.DigitalButton"/> instance that activates 
            (presses) whenever the current <see cref="T:XInputium.Joystick"/>'s effective 
            direction matches the specified direction and the joystick's 
            effective radius reaches the specified activation threshold,
            and then deactivates if the effective radius gets under the 
            specified deactivation threshold.
            </summary>
            <param name="direction">A <see cref="T:XInputium.JoystickDirection"/> constant 
            that specifies the effective direction the joystick must have for 
            the button to be activated.</param>
            <param name="activationThreshold">A number between the 0 and 1 
            inclusive range, that specifies the minimum value over which 
            the joystick's effective radius must reach for the button 
            to get activated.</param>
            <param name="deactivationThreshold">A number between the 0 and 1 
            inclusive range, that specifies the value under which the 
            joystick's effective radius must be for the button 
            to get deactivated, when the button is activated. Usually, 
            this is a value equal to or lower than 
            <paramref name="activationThreshold"/>.</param>
            <returns>A new <see cref="T:XInputium.DigitalButton"/> that is automatically 
            updated whenever the state of the current <see cref="T:XInputium.Joystick"/> 
            is updated, and that is activated (pressed) whenever the state of 
            the joystick matches the specified conditions.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="direction"/>
            is not a defined constant in a <see cref="T:XInputium.JoystickDirection"/> 
            enumeration.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="activationThreshold"/> is <see cref="F:System.Single.NaN"/>.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="deactivationThreshold"/> is <see cref="F:System.Single.NaN"/>.</exception>
            <seealso cref="T:XInputium.DigitalButton"/>
        </member>
        <member name="M:XInputium.Joystick.ToDigitalButton(XInputium.JoystickDirection,System.Single)">
            <summary>
            Gets a new <see cref="T:XInputium.DigitalButton"/> instance that activates 
            (presses) whenever the current <see cref="T:XInputium.Joystick"/>'s effective 
            direction matches the specified direction and the joystick's 
            effective radius reaches the specified activation threshold.
            </summary>
            <param name="direction">A <see cref="T:XInputium.JoystickDirection"/> constant 
            that specifies the effective direction the joystick must have for 
            the button to be activated.</param>
            <param name="activationThreshold">A number between the 0 and 1 
            inclusive range, that specifies the minimum value over which 
            the joystick's effective radius must reach for the button 
            to get activated.</param>
            <returns>A new <see cref="T:XInputium.DigitalButton"/> that is automatically 
            updated whenever the state of the current <see cref="T:XInputium.Joystick"/> 
            is updated, and that is activated (pressed) whenever the state of 
            the joystick matches the specified conditions.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="direction"/>
            is not a defined constant in a <see cref="T:XInputium.JoystickDirection"/> 
            enumeration.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="activationThreshold"/> is <see cref="F:System.Single.NaN"/>.</exception>
            <seealso cref="T:XInputium.DigitalButton"/>
        </member>
        <member name="T:XInputium.JoystickDelta">
            <summary>
            Represents the difference between two joystick positions,
            providing a way to determine a joystick's movement.
            </summary>
            <seealso cref="T:XInputium.SlimJoystick"/>
            <seealso cref="T:XInputium.Joystick"/>
        </member>
        <member name="F:XInputium.JoystickDelta.Zero">
            <summary>
            A <see cref="T:XInputium.JoystickDelta"/> object that represents 
            no joystick movement, having a relative position of 0, 0.
            </summary>
            <seealso cref="P:XInputium.JoystickDelta.HasMoved"/>
        </member>
        <member name="M:XInputium.JoystickDelta.#ctor(System.Single,System.Single)">
            <summary>
            Creates a new <see cref="T:XInputium.JoystickDelta"/> object that has the 
            specified delta coordinates.
            </summary>
            <param name="x">Target position of the joystick's X axis, 
            relative to its source position.</param>
            <param name="y">Target position of the joystick's Y axis, 
            relative to its source position.</param>
            <exception cref="T:System.ArgumentException"><paramref name="x"/> is 
            <see cref="F:System.Single.NaN"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="y"/> is 
            <see cref="F:System.Single.NaN"/>.</exception>
            <seealso cref="M:XInputium.JoystickDelta.FromJoystickPosition(System.Single,System.Single,System.Single,System.Single)"/>
        </member>
        <member name="M:XInputium.JoystickDelta.op_Equality(XInputium.JoystickDelta,XInputium.JoystickDelta)">
            <summary>
            Determines if both <see cref="T:XInputium.JoystickDelta"/> objects are identical.
            </summary>
            <param name="left">Left <see cref="T:XInputium.JoystickDelta"/> operand.</param>
            <param name="right">Right <see cref="T:XInputium.JoystickDelta"/> operand.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is identical 
            to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:XInputium.JoystickDelta.op_Inequality(XInputium.JoystickDelta,XInputium.JoystickDelta)">
            <summary>
            Determines if both <see cref="T:XInputium.JoystickDelta"/> objects differ.
            </summary>
            <param name="left">Left <see cref="T:XInputium.JoystickDelta"/> operand.</param>
            <param name="right">Right <see cref="T:XInputium.JoystickDelta"/> operand.</param>
            <returns><see langword="true"/> if <paramref name="left"/> differs from 
            <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:XInputium.JoystickDelta.X">
            <summary>
            Gets the target position of the joystick's X axis, relative to 
            its source position. This is by how much the joystick's X axis 
            has moved.
            </summary>
            <seealso cref="P:XInputium.JoystickDelta.Y"/>
        </member>
        <member name="P:XInputium.JoystickDelta.Y">
            <summary>
            Gets the target position of the joystick's Y axis, relative to 
            its source position. This is by how much the joystick's Y axis 
            has moved.
            </summary>
            <seealso cref="P:XInputium.JoystickDelta.X"/>
        </member>
        <member name="P:XInputium.JoystickDelta.Angle">
            <summary>
            Gets the angle towards which the joystick has moved, relative 
            to its source position.
            </summary>
            <seealso cref="P:XInputium.JoystickDelta.Distance"/>
            <seealso cref="P:XInputium.JoystickDelta.Direction"/>
        </member>
        <member name="P:XInputium.JoystickDelta.Distance">
            <summary>
            Gets the distance the joystick has moved, from its source position 
            to its target position.
            </summary>
            <seealso cref="P:XInputium.JoystickDelta.Angle"/>
        </member>
        <member name="P:XInputium.JoystickDelta.HasMoved">
            <summary>
            Gets a <see cref="T:System.Boolean"/> that indicates if the joystick 
            has moved, considering its delta.
            </summary>
            <seealso cref="F:XInputium.JoystickDelta.Zero"/>
            <seealso cref="P:XInputium.JoystickDelta.Distance"/>
        </member>
        <member name="P:XInputium.JoystickDelta.Direction">
            <summary>
            Gets a <see cref="T:XInputium.JoystickDirection"/> constant that 
            indicates the direction to which the joystick was moved.
            </summary>
            <seealso cref="P:XInputium.JoystickDelta.Angle"/>
        </member>
        <member name="M:XInputium.JoystickDelta.FromJoystickPosition(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Gets a <see cref="T:XInputium.JoystickDelta"/> object that represents the 
            movement delta between the specified source and target 
            positions of a joystick.
            </summary>
            <param name="sourceX">A number between -1 and 1, representing 
            the source position of the X axis of the joystick.</param>
            <param name="sourceY">A number between -1 and 1, representing 
            the source position of the Y axis of the joystick.</param>
            <param name="targetX">A number between -1 and 1, representing 
            the target position of the X axis of the joystick.</param>
            <param name="targetY">A number between -1 and 1, representing 
            the target position of the Y axis of the joystick.</param>
            <returns>A <see cref="T:XInputium.JoystickDelta"/> object that represents 
            the difference between the specified source and target 
            positions. If there is no difference between the source and 
            target positions, <see cref="F:XInputium.JoystickDelta.Zero"/> is returned.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="sourceX"/>
            is <see cref="F:System.Single.NaN"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="sourceY"/>
            is <see cref="F:System.Single.NaN"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="targetX"/>
            is <see cref="F:System.Single.NaN"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="targetY"/>
            is <see cref="F:System.Single.NaN"/>.</exception>
        </member>
        <member name="M:XInputium.JoystickDelta.FromJoystickPosition(XInputium.SlimJoystick,XInputium.SlimJoystick)">
            <summary>
            Gets a <see cref="T:XInputium.JoystickDelta"/> object that represents the 
            movement delta between the specified source and target 
            positions of a joystick.
            </summary>
            <param name="source">A <see cref="T:XInputium.SlimJoystick"/> object 
            representing the source joystick position.</param>
            <param name="target">A <see cref="T:XInputium.SlimJoystick"/> object 
            representing the target joystick position.</param>
            <returns>A <see cref="T:XInputium.JoystickDelta"/> object that represents 
            the difference between the specified source and target 
            positions. If there is no difference between the source and 
            target positions, <see cref="F:XInputium.JoystickDelta.Zero"/> is returned.</returns>
        </member>
        <member name="M:XInputium.JoystickDelta.ToString">
            <summary>
            Gets the <see cref="T:System.String"/> representation of the 
            <see cref="T:XInputium.JoystickDelta"/> instance.
            </summary>
            <returns>The <see cref="T:System.String"/> representation of 
            the <see cref="T:XInputium.JoystickDelta"/>.</returns>
        </member>
        <member name="M:XInputium.JoystickDelta.GetHashCode">
            <summary>
            Gets the hash code for the current <see cref="T:XInputium.JoystickDelta"/>
            object. Overrides <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns>The computed hash code.</returns>
            <seealso cref="M:XInputium.JoystickDelta.Equals(System.Object)"/>
        </member>
        <member name="M:XInputium.JoystickDelta.Equals(System.Object)">
            <summary>
            Determines if the current <see cref="T:XInputium.JoystickDelta"/> is 
            identical to the specified <see cref="T:System.Object"/> instance.
            Overrides <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
            <param name="obj"><see cref="T:System.Object"/> instance to 
            compare with the current <see cref="T:XInputium.JoystickDelta"/>.</param>
            <returns><see langword="true"/> if the current 
            <see cref="T:XInputium.JoystickDelta"/> is identical to <paramref name="obj"/>;
            otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:XInputium.JoystickDelta.GetHashCode"/>
        </member>
        <member name="M:XInputium.JoystickDelta.Equals(XInputium.JoystickDelta)">
            <summary>
            Determines if the current <see cref="T:XInputium.JoystickDelta"/> is 
            identical to the specified <see cref="T:XInputium.JoystickDelta"/> 
            object.
            </summary>
            <param name="other"><see cref="T:XInputium.JoystickDelta"/> object to 
            compare with the current <see cref="T:XInputium.JoystickDelta"/>.</param>
            <returns><see langword="true"/> if the current 
            <see cref="T:XInputium.JoystickDelta"/> is identical to <paramref name="other"/>;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:XInputium.JoystickDelta.GetSourcePosition(System.Single,System.Single)">
            <summary>
            Gets the source position of the joystick, considering its specified 
            target position.
            </summary>
            <param name="targetX">Target position of the joystick's X axis.</param>
            <param name="targetY">Target position of the joystick's Y axis.</param>
            <returns>A <see cref="T:XInputium.SlimJoystick"/> object that represents the 
            source joystick position.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="targetX"/> 
            is <see cref="F:System.Single.NaN"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="targetY"/>
            is <see cref="F:System.Single.NaN"/>.</exception>
        </member>
        <member name="M:XInputium.JoystickDelta.GetSourcePosition(XInputium.SlimJoystick)">
            <summary>
            Gets the source position of the joystick, considering its specified 
            target position.
            </summary>
            <param name="joystick"><see cref="T:XInputium.SlimJoystick"/> object representing 
            the target joystick position.</param>
        </member>
        <member name="M:XInputium.JoystickDelta.GetSourcePosition(XInputium.Joystick)">
            <summary>
            Gets the source position of the joystick, considering its specified 
            target position.
            </summary>
            <param name="joystick"><see cref="T:XInputium.Joystick"/> object representing 
            the target joystick position.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="joystick"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:XInputium.JoystickDelta.GetTargetPosition(System.Single,System.Single)">
            <summary>
            Gets the target position of the joystick, considering its specified 
            source position.
            </summary>
            <param name="sourceX">Source position of the joystick's X axis.</param>
            <param name="sourceY">Source position of the joystick's Y axis.</param>
            <returns>A <see cref="T:XInputium.SlimJoystick"/> object that represents the 
            target joystick position.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="sourceX"/> 
            is <see cref="F:System.Single.NaN"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="sourceY"/>
            is <see cref="F:System.Single.NaN"/>.</exception>
        </member>
        <member name="M:XInputium.JoystickDelta.GetTargetPosition(XInputium.SlimJoystick)">
            <summary>
            Gets the target position of the joystick, considering its specified 
            source position.
            </summary>
            <param name="joystick"><see cref="T:XInputium.SlimJoystick"/> object representing 
            the source joystick position.</param>
        </member>
        <member name="M:XInputium.JoystickDelta.GetTargetPosition(XInputium.Joystick)">
            <summary>
            Gets the target position of the joystick, considering its specified 
            source position.
            </summary>
            <param name="joystick"><see cref="T:XInputium.Joystick"/> object representing 
            the source joystick position.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="joystick"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:XInputium.JoystickDirection">
            <summary>
            Exposes constants that represent the push direction of 
            a joystick's axes.
            </summary>
            <seealso cref="T:XInputium.Joystick"/>
        </member>
        <member name="F:XInputium.JoystickDirection.None">
            <summary>
            Represents no direction, for when there is no movement.
            </summary>
        </member>
        <member name="F:XInputium.JoystickDirection.Up">
            <summary>
            The joystick is pushed upwards.
            </summary>
        </member>
        <member name="F:XInputium.JoystickDirection.Down">
            <summary>
            The joystick is pushed downwards.
            </summary>
        </member>
        <member name="F:XInputium.JoystickDirection.Left">
            <summary>
            The joystick is pushed towards the left.
            </summary>
        </member>
        <member name="F:XInputium.JoystickDirection.Right">
            <summary>
            The joystick is pushed up towards the right.
            </summary>
        </member>
        <member name="T:XInputium.JoystickUpdateCallback">
            <summary>
            Callback delegate that is used by <see cref="T:XInputium.Joystick"/> 
            to enable external code to update its state.
            </summary>
            <param name="x">A value between -1 and 1, that specifies 
            the raw position of the joystick's horizontal axis.</param>
            <param name="y">A value between -1 and 1, that specifies 
            the raw position of the joystick's vertical axis.</param>
            <param name="time">Amount of time elapsed since the last 
            call to this callback.</param>
            <seealso cref="T:XInputium.Joystick"/>
        </member>
        <member name="T:XInputium.LogicalInputDevice`2">
            <summary>
            Represents a logical input device, that can abstract different input 
            devices of the same type. This is an abstract class.
            </summary>
            <typeparam name="TDevice">Type deriving from 
            <see cref="T:XInputium.InputDevice`1"/>, that's the type of the 
            input devices that can be abstracted by this class.</typeparam>
            <typeparam name="TState">Type of the device state, which 
            is a type that derives from <see cref="T:XInputium.IInputDeviceState"/>.</typeparam>
            <remarks>
            You update the state of the <see cref="T:XInputium.LogicalInputDevice`2"/> 
            instance by updating the state of the underlying input device 
            (the input device set at <see cref="P:XInputium.LogicalInputDevice`2.Device"/> property), by 
            calling its <see cref="M:XInputium.InputDevice`1.Update"/> method.
            <br/><br/>
            <see cref="T:XInputium.LogicalInputDevice`2"/> inherits from 
            <see cref="T:XInputium.InputObject"/> and defers event dispatching. All 
            <see cref="T:XInputium.LogicalInputDevice`2"/> events are 
            raised only immediately after you call 
            <see cref="M:XInputium.InputDevice`1.Update"/> method on the 
            underlying input device. Any property changes and event 
            invocations will occur immediately before 
            <see cref="M:XInputium.InputDevice`1.Update"/> method returns. 
            Usually, you call <see cref="M:XInputium.InputDevice`1.Update"/> 
            method once per each game frame or UI render loop iteration, 
            several times per second.
            </remarks>
            <seealso cref="T:XInputium.InputDevice`1"/>
            <seealso cref="T:XInputium.IInputDeviceState"/>
            <seealso cref="T:XInputium.InputObject"/>
        </member>
        <member name="M:XInputium.LogicalInputDevice`2.#ctor(XInputium.InputLoopWatch)">
            <summary>
            Initializes a new instance of a 
            <see cref="T:XInputium.LogicalInputDevice`2"/> class, 
            that measures time using the specified 
            <see cref="T:XInputium.InputLoopWatch"/>.
            </summary>
            <param name="watch"><see cref="T:XInputium.InputLoopWatch"/> based 
            instance that will be used to measure time between input 
            loops iterations. If you pass <see langword="null"/> to 
            this parameter, the default watch will be used.</param>
        </member>
        <member name="E:XInputium.LogicalInputDevice`2.Updated">
            <summary>
            It's invoked whenever an update operation is performed 
            on the underlying input device.
            </summary>
            <remarks>
            Update operations are performed by calling 
            <see cref="M:XInputium.InputDevice`1.Update"/> method 
            on the input device set at <see cref="P:XInputium.LogicalInputDevice`2.Device"/> property.
            </remarks>
            <seealso cref="M:XInputium.LogicalInputDevice`2.OnUpdated"/>
        </member>
        <member name="E:XInputium.LogicalInputDevice`2.DeviceChanged">
            <summary>
            It's invoked whenever the value of <see cref="P:XInputium.LogicalInputDevice`2.Device"/> 
            property changes.
            </summary>
            <seealso cref="P:XInputium.LogicalInputDevice`2.Device"/>
            <seealso cref="M:XInputium.LogicalInputDevice`2.OnDeviceChanged"/>
        </member>
        <member name="E:XInputium.LogicalInputDevice`2.IsConnectedChanged">
            <summary>
            It's invoked whenever the value of <see cref="P:XInputium.LogicalInputDevice`2.IsConnected"/> 
            property changes.
            </summary>
            <seealso cref="P:XInputium.LogicalInputDevice`2.IsConnected"/>
            <seealso cref="M:XInputium.LogicalInputDevice`2.OnIsConnectedChanged"/>
            <seealso cref="E:XInputium.LogicalInputDevice`2.Connected"/>
            <seealso cref="E:XInputium.LogicalInputDevice`2.Disconnected"/>
        </member>
        <member name="E:XInputium.LogicalInputDevice`2.Connected">
            <summary>
            It's invoked when the underlying <typeparamref name="TDevice"/>
            changes to it's connected state.
            </summary>
            <seealso cref="M:XInputium.LogicalInputDevice`2.OnConnected"/>
            <seealso cref="E:XInputium.LogicalInputDevice`2.Disconnected"/>
            <seealso cref="E:XInputium.LogicalInputDevice`2.IsConnectedChanged"/>
            <seealso cref="P:XInputium.LogicalInputDevice`2.IsConnected"/>
        </member>
        <member name="E:XInputium.LogicalInputDevice`2.Disconnected">
            <summary>
            It's invoked when the underlying <typeparamref name="TDevice"/>
            changes to it's unconnected state, or when <see cref="P:XInputium.LogicalInputDevice`2.Device"/> 
            property is set to <see langword="null"/>.
            </summary>
            <seealso cref="M:XInputium.LogicalInputDevice`2.OnDisconnected"/>
            <seealso cref="E:XInputium.LogicalInputDevice`2.Connected"/>
            <seealso cref="E:XInputium.LogicalInputDevice`2.IsConnectedChanged"/>
            <seealso cref="P:XInputium.LogicalInputDevice`2.IsConnected"/>
        </member>
        <member name="E:XInputium.LogicalInputDevice`2.StateChanged">
            <summary>
            It's invoked whenever the device input state changes.
            </summary>
            <seealso cref="M:XInputium.LogicalInputDevice`2.OnStateChanged"/>
        </member>
        <member name="E:XInputium.LogicalInputDevice`2.IsEnabledChanged">
            <summary>
            It's invoked whenever the value of <see cref="P:XInputium.LogicalInputDevice`2.IsEnabled"/> 
            property changes.
            </summary>
            <seealso cref="P:XInputium.LogicalInputDevice`2.IsEnabled"/>
            <seealso cref="M:XInputium.LogicalInputDevice`2.OnIsEnabledChanged"/>
        </member>
        <member name="P:XInputium.LogicalInputDevice`2.Device">
            <summary>
            Gets or sets the <typeparamref name="TDevice"/> used by the 
            current <see cref="T:XInputium.LogicalInputDevice`2"/> instance.
            </summary>
        </member>
        <member name="P:XInputium.LogicalInputDevice`2.IsConnected">
            <summary>
            Gets a <see cref="T:System.Boolean"/> indicating if the underlying 
            input device is currently connected.
            </summary>
            <remarks>
            This method always returns <see langword="false"/> 
            when <see cref="P:XInputium.LogicalInputDevice`2.Device"/> is set to <see langword="null"/>. 
            The value of this property is updated after a device 
            update operation.
            </remarks>
        </member>
        <member name="P:XInputium.LogicalInputDevice`2.HasStateChanged">
            <summary>
            Gets a <see cref="T:System.Boolean"/> that indicates if the 
            device state has changed since the last device update 
            operation.
            </summary>
        </member>
        <member name="P:XInputium.LogicalInputDevice`2.FrameTime">
            <summary>
            Gets the amount of time elapsed between the two 
            most recent device update operations.
            </summary>
            <remarks>
            This property can be used to get the time between 
            update operations method. This is usually regarded 
            as the frame time.
            </remarks>
        </member>
        <member name="P:XInputium.LogicalInputDevice`2.IsEnabled">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> that indicates the 
            <see cref="T:XInputium.LogicalInputDevice`2"/> is 
            enabled, meaning it will update its state and trigger 
            events based on state changes from the underlying 
            input device.
            </summary>
            <value><see langword="true"/> to enabled input updating, 
            or <see langword="false"/> to disable it. 
            The default is <see langword="true"/>.</value>
            <remarks>
            This property allows you to disable input device state 
            updates on the <see cref="T:XInputium.LogicalInputDevice`2"/>. 
            When you set this property to <see langword="false"/>, 
            events will not be triggered and the current state will 
            not be updated until you set this property to 
            <see langword="true"/> again, even if you update the 
            underlying input device.
            <br/><br/>
            <see cref="P:XInputium.LogicalInputDevice`2.IsEnabled"/> can be useful when you wish to 
            stop receiving input information but don't want to change 
            the logic of your code to accommodate for that.
            </remarks>
        </member>
        <member name="M:XInputium.LogicalInputDevice`2.OnUpdated">
            <summary>
            Raises the <see cref="E:XInputium.LogicalInputDevice`2.Updated"/> event.
            </summary>
            <seealso cref="E:XInputium.LogicalInputDevice`2.Updated"/>
        </member>
        <member name="M:XInputium.LogicalInputDevice`2.OnDeviceChanged">
            <summary>
            Raises the <see cref="E:XInputium.LogicalInputDevice`2.DeviceChanged"/> event.
            </summary>
            <seealso cref="E:XInputium.LogicalInputDevice`2.DeviceChanged"/>
            <seealso cref="P:XInputium.LogicalInputDevice`2.Device"/>
        </member>
        <member name="M:XInputium.LogicalInputDevice`2.OnIsConnectedChanged">
            <summary>
            Raises the <see cref="E:XInputium.LogicalInputDevice`2.IsConnectedChanged"/> event.
            </summary>
            <seealso cref="E:XInputium.LogicalInputDevice`2.IsConnectedChanged"/>
            <seealso cref="P:XInputium.LogicalInputDevice`2.IsConnected"/>
            <seealso cref="M:XInputium.LogicalInputDevice`2.OnConnected"/>
            <seealso cref="M:XInputium.LogicalInputDevice`2.OnDisconnected"/>
        </member>
        <member name="M:XInputium.LogicalInputDevice`2.OnConnected">
            <summary>
            Raises the <see cref="E:XInputium.LogicalInputDevice`2.Connected"/> event.
            </summary>
            <seealso cref="P:XInputium.LogicalInputDevice`2.IsConnected"/>
            <seealso cref="M:XInputium.LogicalInputDevice`2.OnDisconnected"/>
            <seealso cref="M:XInputium.LogicalInputDevice`2.OnIsConnectedChanged"/>
        </member>
        <member name="M:XInputium.LogicalInputDevice`2.OnDisconnected">
            <summary>
            Raises the <see cref="E:XInputium.LogicalInputDevice`2.Disconnected"/> event.
            </summary>
            <seealso cref="P:XInputium.LogicalInputDevice`2.IsConnected"/>
            <seealso cref="M:XInputium.LogicalInputDevice`2.OnConnected"/>
            <seealso cref="M:XInputium.LogicalInputDevice`2.OnIsConnectedChanged"/>
        </member>
        <member name="M:XInputium.LogicalInputDevice`2.OnStateChanged">
            <summary>
            Raises the <see cref="E:XInputium.LogicalInputDevice`2.StateChanged"/> event.
            </summary>
            <seealso cref="E:XInputium.LogicalInputDevice`2.StateChanged"/>
        </member>
        <member name="M:XInputium.LogicalInputDevice`2.OnIsEnabledChanged">
            <summary>
            Raises the <see cref="E:XInputium.LogicalInputDevice`2.IsEnabledChanged"/> event.
            </summary>
            <seealso cref="E:XInputium.LogicalInputDevice`2.IsEnabledChanged"/>
            <seealso cref="P:XInputium.LogicalInputDevice`2.IsEnabled"/>
        </member>
        <member name="M:XInputium.LogicalInputDevice`2.DetachCurrentDevice">
            <summary>
            Removes the current device from being attached to the 
            current instance.
            </summary>
        </member>
        <member name="M:XInputium.LogicalInputDevice`2.AttachDevice(`0)">
            <summary>
            Attaches the specified device to the current instance.
            </summary>
            <param name="device">Device to attach.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="device"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:XInputium.LogicalInputDevice`2.Reset(System.Boolean)">
            <summary>
            Resets the <see cref="T:XInputium.LogicalInputDevice`2"/> to 
            its no-device state.
            </summary>
            <param name="keepConnected">Optional. Indicates if the device 
            should keep reporting is current connection status.</param>
            <remarks>
            This method is called when the value of <see cref="P:XInputium.LogicalInputDevice`2.Device"/> 
            property is set to <see langword="null"/>, turning the 
            <see cref="T:XInputium.LogicalInputDevice`2"/> into a 
            no-device instance.
            </remarks>
            <seealso cref="P:XInputium.LogicalInputDevice`2.Device"/>
        </member>
        <member name="M:XInputium.LogicalInputDevice`2.ResetLogicalState">
            <summary>
            When overridden in an inherited class, resets the 
            <see cref="T:XInputium.LogicalInputDevice`2"/> to 
            its no-device state.
            </summary>
            <remarks>
            This method is called when the value of <see cref="P:XInputium.LogicalInputDevice`2.Device"/> 
            property is set to <see langword="null"/>, turning the 
            <see cref="T:XInputium.LogicalInputDevice`2"/> into a 
            no-device instance.
            </remarks>
            <seealso cref="P:XInputium.LogicalInputDevice`2.Device"/>
        </member>
        <member name="M:XInputium.LogicalInputDevice`2.UpdateLogicalState">
            <summary>
            When overridden in derived classes, updates the state 
            of the <see cref="T:XInputium.LogicalInputDevice`2"/> 
            instance based on the current physical device state.
            </summary>
            <exception cref="T:System.InvalidOperationException">There 
            is no device currently set. <see cref="P:XInputium.LogicalInputDevice`2.Device"/> property 
            is <see langword="null"/>.</exception>
            <seealso cref="M:XInputium.LogicalInputDevice`2.SetDeviceState"/>
            <seealso cref="M:XInputium.LogicalInputDevice`2.ResetLogicalState"/>
        </member>
        <member name="M:XInputium.LogicalInputDevice`2.SetDeviceState">
            <summary>
            When overridden in derived classes, forwards any state 
            changes to the <see cref="T:XInputium.LogicalInputDevice`2"/> 
            instance based on the current logical state.
            </summary>
            <exception cref="T:System.InvalidOperationException">There 
            is no device currently set. <see cref="P:XInputium.LogicalInputDevice`2.Device"/> property 
            is <see langword="null"/>.</exception>
            <remarks>
            You would override this method to set the device state, 
            like vibration motors speed and similar. This method is 
            called after a call to <see cref="M:XInputium.LogicalInputDevice`2.UpdateLogicalState"/> 
            method, which performs the inverse operation.
            </remarks>
            <seealso cref="M:XInputium.LogicalInputDevice`2.UpdateLogicalState"/>
        </member>
        <member name="M:XInputium.LogicalInputDevice`2.UpdateInternal">
            <summary>
            Updates the state of the 
            <see cref="T:XInputium.LogicalInputDevice`2"/> instance 
            with data from the underlying <typeparamref name="TDevice"/>, 
            and dispatches all enqueued events.
            </summary>
            <returns><see langword="true"/> if the device state was 
            changed since the last call to this method; 
            otherwise, <see langword="false"/>.</returns>
            <remarks>
            This method updates the 
            <see cref="T:XInputium.LogicalInputDevice`2"/> instance 
            with current state data from the underlying 
            <typeparamref name="TDevice"/> (the device set in 
            <see cref="P:XInputium.LogicalInputDevice`2.Device"/> property), forwards any state changes 
            to the device, and dispatches all enqueued events.
            <br/><br/>
            This method is automatically invoked on every update 
            operation performed on the underlying input device. You 
            should not call this method. Instead, call the 
            <see cref="M:XInputium.InputDevice`1.Update"/> method of the 
            input device currently set at <see cref="P:XInputium.LogicalInputDevice`2.Device"/> property.
            </remarks>
            <seealso cref="P:XInputium.LogicalInputDevice`2.Device"/>
            <seealso cref="M:XInputium.InputDevice`1.Update"/>
        </member>
        <member name="M:XInputium.LogicalInputDevice`2.Update">
            <summary>
            Updates the state of the 
            <see cref="T:XInputium.LogicalInputDevice`2"/> instance 
            with data from the underlying <typeparamref name="TDevice"/>, 
            and dispatches all enqueued events.
            </summary>
            <returns><see langword="true"/> if the device state was 
            changed since the last time the device was updated, and 
            <see cref="P:XInputium.LogicalInputDevice`2.IsEnabled"/> is <see langword="true"/>; 
            otherwise, <see langword="false"/>.</returns>
            <remarks>
            This method updates the 
            <see cref="T:XInputium.LogicalInputDevice`2"/> instance 
            with current state data from the underlying 
            <typeparamref name="TDevice"/> (the device set in 
            <see cref="P:XInputium.LogicalInputDevice`2.Device"/> property), forwards any state changes 
            to the device, and dispatches all enqueued events.
            <br/><br/>
            As an alternative to calling this method, you may opt to 
            call the <see cref="M:XInputium.InputDevice`1.Update"/> method
            directly.
            </remarks>
            <seealso cref="P:XInputium.LogicalInputDevice`2.Device"/>
            <seealso cref="M:XInputium.InputDevice`1.Update"/>
        </member>
        <member name="T:XInputium.ModifierFunction">
            <summary>
            Delegate that represents a function that can be used 
            to modify a normalized value in order to process it 
            â€” i.e. to provide non-linear functions.
            </summary>
            <param name="normalValue">A normalized value (between 
            0 and 1).</param>
            <returns>The modified value. This must not be 
            <see cref="F:System.Single.NaN"/>.</returns>
        </member>
        <member name="T:XInputium.ModifierFunctionGroup">
            <summary>
            Provides a collection that combines multiple 
            <see cref="T:XInputium.ModifierFunction"/> delegates into 
            one single <see cref="T:XInputium.ModifierFunction"/>.
            </summary>
            <remarks>
            Use <see cref="P:XInputium.ModifierFunctionGroup.ModifierFunction"/> property to obtain 
            the <see cref="T:XInputium.ModifierFunction"/> delegate 
            that represents the <see cref="T:XInputium.ModifierFunctionGroup"/>.
            <br/><br/>
            Modifier functions in the <see cref="T:XInputium.ModifierFunctionGroup"/> 
            are evaluated sequentially, from the first element to the 
            last.
            </remarks>
            <seealso cref="T:XInputium.ModifierFunction"/>
        </member>
        <member name="M:XInputium.ModifierFunctionGroup.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:XInputium.ModifierFunctionGroup"/> 
            class.
            </summary>
        </member>
        <member name="P:XInputium.ModifierFunctionGroup.ModifierFunction">
            <summary>
            Gets the modifier function that evaluates a value using all 
            of the modifier functions in the <see cref="T:XInputium.ModifierFunctionGroup"/>.
            </summary>
        </member>
        <member name="T:XInputium.ModifierFunctions.CommonModifierFunctions">
            <summary>
            Provides static members that allow the creation of 
            customized <see cref="T:XInputium.ModifierFunction"/> delegates 
            for the most common usages.
            </summary>
            <seealso cref="T:XInputium.ModifierFunction"/>
        </member>
        <member name="P:XInputium.ModifierFunctions.CommonModifierFunctions.Zero">
            <summary>
            Gets a <see cref="T:XInputium.ModifierFunction"/> that always returns 0.
            </summary>
        </member>
        <member name="P:XInputium.ModifierFunctions.CommonModifierFunctions.Reverse">
            <summary>
            Gets a <see cref="T:XInputium.ModifierFunction"/> that reverses a value, 
            where a 0 value will return 1 and a 1 value will return 0.
            </summary>
            <seealso cref="P:XInputium.ModifierFunctions.CommonModifierFunctions.Negate"/>
        </member>
        <member name="P:XInputium.ModifierFunctions.CommonModifierFunctions.Negate">
            <summary>
            Gets a <see cref="T:XInputium.ModifierFunction"/> that negates a value,
            where 1 returns -1 and -1 returns 1.
            </summary>
            <seealso cref="P:XInputium.ModifierFunctions.CommonModifierFunctions.Reverse"/>
        </member>
        <member name="P:XInputium.ModifierFunctions.CommonModifierFunctions.Clamp01">
            <summary>
            Gets a <see cref="T:XInputium.ModifierFunction"/> that clamps 
            a value within the 0 and 1 inclusive range.
            </summary>
            <seealso cref="P:XInputium.ModifierFunctions.CommonModifierFunctions.Clamp11"/>
        </member>
        <member name="P:XInputium.ModifierFunctions.CommonModifierFunctions.Clamp11">
            <summary>
            Gets a <see cref="T:XInputium.ModifierFunction"/> that clamps 
            a value within the -1 and 1 inclusive range.
            </summary>
            <seealso cref="P:XInputium.ModifierFunctions.CommonModifierFunctions.Clamp01"/>
        </member>
        <member name="M:XInputium.ModifierFunctions.CommonModifierFunctions.Scale(System.Single)">
            <summary>
            Gets a <see cref="T:XInputium.ModifierFunction"/> that scales its 
            input value to the specified scale.
            </summary>
            <param name="scale">A number that will be multiplied 
            by the function's input value.</param>
            <returns>A new <see cref="T:XInputium.ModifierFunction"/> that 
            multiplies its input value by <paramref name="scale"/>.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="scale"/> is <see cref="F:System.Single.NaN"/>.</exception>
        </member>
        <member name="M:XInputium.ModifierFunctions.CommonModifierFunctions.Combine(XInputium.ModifierFunction,XInputium.ModifierFunction)">
            <summary>
            Gets a new <see cref="T:XInputium.ModifierFunction"/> that combines 
            the two specified functions in sequence.
            </summary>
            <param name="function1">First function. This function's 
            return value will be the input value of 
            <paramref name="function2"/>.</param>
            <param name="function2">Second function, which will receive 
            the return value of <paramref name="function2"/>.</param>
            <returns>A new <see cref="T:XInputium.ModifierFunction"/> instance that 
            combines <paramref name="function1"/> and 
            <paramref name="function2"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="function1"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="function2"/> is null.</exception>
        </member>
        <member name="M:XInputium.ModifierFunctions.CommonModifierFunctions.Boolean(System.Single)">
            <summary>
            Gets a new <see cref="T:XInputium.ModifierFunction"/> that returns 
            0 if input value is less than the specified absolute middle 
            or 1 if the value is equal to or greater than the specified 
            absolute middle or -1 if the value is less than the specified 
            negated absolute middle.
            </summary>
            <param name="middle">Value that determines where any input 
            value should start returning true.</param>
            <returns>A new <see cref="T:XInputium.ModifierFunction"/> that returns 
            0 if its input value is less than the absolute 
            <paramref name="middle"/>, 1 if the input value is greater 
            than the absolute <paramref name="middle"/> or -1 if the 
            input value is less that the negated absolute 
            <paramref name="middle"/>.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="middle"/> is <see cref="F:System.Single.NaN"/>.</exception>
            <seealso cref="M:XInputium.ModifierFunctions.CommonModifierFunctions.Quantize(System.Single)"/>
        </member>
        <member name="M:XInputium.ModifierFunctions.CommonModifierFunctions.ApplyDeadZone(System.Single,System.Single)">
            <summary>
            Gets a <see cref="T:XInputium.ModifierFunction"/> that applies the 
            specified inner and outer dead-zone to a value.
            </summary>
            <param name="innerDeadZone">Region from 0 where the 
            dead-zone will be applied.</param>
            <param name="outerDeadZone">Region from 1 or -1 where 
            the dead-zone will be applied.</param>
            <returns>The newly created <see cref="T:XInputium.ModifierFunction"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="innerDeadZone"/> 
            is <see cref="F:System.Single.NaN"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="outerDeadZone"/> 
            is <see cref="F:System.Single.NaN"/>.</exception>
            <seealso cref="M:XInputium.InputMath.ApplyDeadZone(System.Single,System.Single,System.Single)"/>
        </member>
        <member name="M:XInputium.ModifierFunctions.CommonModifierFunctions.ApplyDeadZone(System.Single)">
            <summary>
            Gets a <see cref="T:XInputium.ModifierFunction"/> that applies the 
            specified inner dead-zone to a value.
            </summary>
            <param name="innerDeadZone">Region from 0 where the 
            dead-zone will be applied.</param>
            <returns>The newly created <see cref="T:XInputium.ModifierFunction"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="innerDeadZone"/> 
            is <see cref="F:System.Single.NaN"/>.</exception>
            <seealso cref="M:XInputium.InputMath.ApplyDeadZone(System.Single,System.Single)"/>
        </member>
        <member name="M:XInputium.ModifierFunctions.CommonModifierFunctions.Quantize(System.Single)">
            <summary>
            Gets a <see cref="T:XInputium.ModifierFunction"/> that quantizes its input 
            value to the specified step size.
            </summary>
            <param name="stepSize">Number by how much the quantization 
            is performed. If 0 is specified, no quantization is applied, 
            making the <see cref="T:XInputium.ModifierFunction"/> return its input 
            value.</param>
            <returns>A <see cref="T:XInputium.ModifierFunction"/> that quantizes its 
            input value to the specified <paramref name="stepSize"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="stepSize"/> 
            is <see cref="F:System.Single.NaN"/>.</exception>
            <remarks>
            The <see cref="T:XInputium.ModifierFunction"/> returned by this method 
            quantizes its input to a specified step size. In other words, 
            its output is equal to <paramref name="stepSize"/>
            multiplied by the closest integer that is lower or equal to 
            its input. For instance, if <paramref name="stepSize"/> is 
            0.25, the function's output will be a multiplier of 0.25 
            (ex. 0, 0.25, 0.5, 0.75, or 1).
            <br/><br/>
            The returned <see cref="T:XInputium.ModifierFunction"/> can be useful in 
            scenarios where you intent to divide an axis in several even
            chunks. One valid example would be to use the 
            <see cref="T:XInputium.ModifierFunction"/> returned by this method with 
            a <paramref name="stepSize"/> of 0.125 (or 1/8th) in the angle
            axis of a joystick. This way, the joystick's angle would always
            get snapped to a horizontal, vertical or diagonal direction.
            </remarks>
            <seealso cref="M:XInputium.ModifierFunctions.CommonModifierFunctions.Boolean(System.Single)"/>
        </member>
        <member name="T:XInputium.ModifierFunctions.NonLinearFunctions">
            <summary>
            Provides static members that allow the creation of customized 
            modifier functions that can be used to turn a normalized 
            linear value into a non-linear one.
            </summary>
            <seealso cref="T:XInputium.ModifierFunction"/>
        </member>
        <member name="P:XInputium.ModifierFunctions.NonLinearFunctions.Linear">
            <summary>
            Gets a <see cref="T:XInputium.ModifierFunction"/> that returns the 
            provided value without any modification.
            </summary>
        </member>
        <member name="P:XInputium.ModifierFunctions.NonLinearFunctions.QuadraticEaseIn">
            <summary>
            Gets a <see cref="T:XInputium.ModifierFunction"/> that returns the 
            eased-in quadratic result of the provided value.
            </summary>
            <seealso cref="M:XInputium.ModifierFunctions.NonLinearFunctions.PowerEaseIn(System.Single)"/>
        </member>
        <member name="P:XInputium.ModifierFunctions.NonLinearFunctions.QuadraticEaseOut">
            <summary>
            Gets a <see cref="T:XInputium.ModifierFunction"/> that returns the 
            eased-out quadratic result of the provided value.
            </summary>
            <seealso cref="M:XInputium.ModifierFunctions.NonLinearFunctions.PowerEaseOut(System.Single)"/>
        </member>
        <member name="P:XInputium.ModifierFunctions.NonLinearFunctions.QuadraticEaseInOut">
            <summary>
            Gets a <see cref="T:XInputium.ModifierFunction"/> that returns the 
            eased-in-out quadratic result of the provided value.
            </summary>
            <seealso cref="M:XInputium.ModifierFunctions.NonLinearFunctions.PowerEaseInOut(System.Single)"/>
        </member>
        <member name="P:XInputium.ModifierFunctions.NonLinearFunctions.CubicEaseIn">
            <summary>
            Gets a <see cref="T:XInputium.ModifierFunction"/> that returns the 
            eased-in cubic result of the provided value.
            </summary>
            <seealso cref="M:XInputium.ModifierFunctions.NonLinearFunctions.PowerEaseIn(System.Single)"/>
        </member>
        <member name="P:XInputium.ModifierFunctions.NonLinearFunctions.CubicEaseOut">
            <summary>
            Gets a <see cref="T:XInputium.ModifierFunction"/> that returns the 
            eased-out cubic result of the provided value.
            </summary>
            <seealso cref="M:XInputium.ModifierFunctions.NonLinearFunctions.PowerEaseOut(System.Single)"/>
        </member>
        <member name="P:XInputium.ModifierFunctions.NonLinearFunctions.CubicEaseInOut">
            <summary>
            Gets a <see cref="T:XInputium.ModifierFunction"/> that returns the 
            eased-in-out cubic result of the provided value.
            </summary>
            <seealso cref="M:XInputium.ModifierFunctions.NonLinearFunctions.PowerEaseInOut(System.Single)"/>
        </member>
        <member name="P:XInputium.ModifierFunctions.NonLinearFunctions.QuarticEaseIn">
            <summary>
            Gets a <see cref="T:XInputium.ModifierFunction"/> that returns the 
            eased-in quartic result of the provided value.
            </summary>
            <seealso cref="M:XInputium.ModifierFunctions.NonLinearFunctions.PowerEaseIn(System.Single)"/>
        </member>
        <member name="P:XInputium.ModifierFunctions.NonLinearFunctions.QuarticEaseOut">
            <summary>
            Gets a <see cref="T:XInputium.ModifierFunction"/> that returns the 
            eased-out quartic result of the provided value.
            </summary>
            <seealso cref="M:XInputium.ModifierFunctions.NonLinearFunctions.PowerEaseOut(System.Single)"/>
        </member>
        <member name="P:XInputium.ModifierFunctions.NonLinearFunctions.QuarticEaseInOut">
            <summary>
            Gets a <see cref="T:XInputium.ModifierFunction"/> that returns the 
            eased-in-out quartic result of the provided value.
            </summary>
            <seealso cref="M:XInputium.ModifierFunctions.NonLinearFunctions.PowerEaseInOut(System.Single)"/>
        </member>
        <member name="P:XInputium.ModifierFunctions.NonLinearFunctions.QuinticEaseIn">
            <summary>
            Gets a <see cref="T:XInputium.ModifierFunction"/> that returns the 
            eased-in quintic result of the provided value.
            </summary>
            <seealso cref="M:XInputium.ModifierFunctions.NonLinearFunctions.PowerEaseIn(System.Single)"/>
        </member>
        <member name="P:XInputium.ModifierFunctions.NonLinearFunctions.QuinticEaseOut">
            <summary>
            Gets a <see cref="T:XInputium.ModifierFunction"/> that returns the 
            eased-out quintic result of the provided value.
            </summary>
            <seealso cref="M:XInputium.ModifierFunctions.NonLinearFunctions.PowerEaseOut(System.Single)"/>
        </member>
        <member name="P:XInputium.ModifierFunctions.NonLinearFunctions.QuinticEaseInOut">
            <summary>
            Gets a <see cref="T:XInputium.ModifierFunction"/> that returns the 
            eased-in-out quintic result of the provided value.
            </summary>
            <seealso cref="M:XInputium.ModifierFunctions.NonLinearFunctions.PowerEaseInOut(System.Single)"/>
        </member>
        <member name="P:XInputium.ModifierFunctions.NonLinearFunctions.SineEaseIn">
            <summary>
            Gets a <see cref="T:XInputium.ModifierFunction"/> that returns the 
            eased-in sine of the provided value.
            </summary>
            <seealso cref="P:XInputium.ModifierFunctions.NonLinearFunctions.SineEaseOut"/>
            <seealso cref="P:XInputium.ModifierFunctions.NonLinearFunctions.SineEaseInOut"/>
        </member>
        <member name="P:XInputium.ModifierFunctions.NonLinearFunctions.SineEaseOut">
            <summary>
            Gets a <see cref="T:XInputium.ModifierFunction"/> that returns the 
            eased-out sine of the provided value.
            </summary>
            <seealso cref="P:XInputium.ModifierFunctions.NonLinearFunctions.SineEaseIn"/>
            <seealso cref="P:XInputium.ModifierFunctions.NonLinearFunctions.SineEaseInOut"/>
        </member>
        <member name="P:XInputium.ModifierFunctions.NonLinearFunctions.SineEaseInOut">
            <summary>
            Gets a <see cref="T:XInputium.ModifierFunction"/> that returns the 
            eased-in-out sine of the provided value.
            </summary>
            <seealso cref="P:XInputium.ModifierFunctions.NonLinearFunctions.SineEaseIn"/>
            <seealso cref="P:XInputium.ModifierFunctions.NonLinearFunctions.SineEaseOut"/>
        </member>
        <member name="P:XInputium.ModifierFunctions.NonLinearFunctions.CircularEaseIn">
            <summary>
            Gets a <see cref="T:XInputium.ModifierFunction"/> that returns the 
            eased-in circular result of the provided value.
            </summary>
            <seealso cref="P:XInputium.ModifierFunctions.NonLinearFunctions.CircularEaseOut"/>
            <seealso cref="P:XInputium.ModifierFunctions.NonLinearFunctions.CircularEaseInOut"/>
        </member>
        <member name="P:XInputium.ModifierFunctions.NonLinearFunctions.CircularEaseOut">
            <summary>
            Gets a <see cref="T:XInputium.ModifierFunction"/> that returns the 
            eased-out circular result of the provided value.
            </summary>
            <seealso cref="P:XInputium.ModifierFunctions.NonLinearFunctions.CircularEaseIn"/>
            <seealso cref="P:XInputium.ModifierFunctions.NonLinearFunctions.CircularEaseInOut"/>
        </member>
        <member name="P:XInputium.ModifierFunctions.NonLinearFunctions.CircularEaseInOut">
            <summary>
            Gets a <see cref="T:XInputium.ModifierFunction"/> that returns the 
            eased-in-out circular result of the provided value.
            </summary>
            <seealso cref="P:XInputium.ModifierFunctions.NonLinearFunctions.CircularEaseIn"/>
            <seealso cref="P:XInputium.ModifierFunctions.NonLinearFunctions.CircularEaseOut"/>
        </member>
        <member name="P:XInputium.ModifierFunctions.NonLinearFunctions.ExponentialEaseIn">
            <summary>
            Gets a <see cref="T:XInputium.ModifierFunction"/> that returns the 
            eased-in exponential result of the provided value.
            </summary>
            <seealso cref="P:XInputium.ModifierFunctions.NonLinearFunctions.ExponentialEaseOut"/>
            <seealso cref="P:XInputium.ModifierFunctions.NonLinearFunctions.ExponentialEaseInOut"/>
        </member>
        <member name="P:XInputium.ModifierFunctions.NonLinearFunctions.ExponentialEaseOut">
            <summary>
            Gets a <see cref="T:XInputium.ModifierFunction"/> that returns the 
            eased-out exponential result of the provided value.
            </summary>
            <seealso cref="P:XInputium.ModifierFunctions.NonLinearFunctions.ExponentialEaseIn"/>
            <seealso cref="P:XInputium.ModifierFunctions.NonLinearFunctions.ExponentialEaseInOut"/>
        </member>
        <member name="P:XInputium.ModifierFunctions.NonLinearFunctions.ExponentialEaseInOut">
            <summary>
            Gets a <see cref="T:XInputium.ModifierFunction"/> that returns the 
            eased-in-out exponential result of the provided value.
            </summary>
            <seealso cref="P:XInputium.ModifierFunctions.NonLinearFunctions.ExponentialEaseIn"/>
            <seealso cref="P:XInputium.ModifierFunctions.NonLinearFunctions.ExponentialEaseOut"/>
        </member>
        <member name="P:XInputium.ModifierFunctions.NonLinearFunctions.Bezier">
            <summary>
            Gets a <see cref="T:XInputium.ModifierFunction"/> that returns the 
            BÃ©zier of the provided value.
            </summary>
        </member>
        <member name="M:XInputium.ModifierFunctions.NonLinearFunctions.PowerEaseIn(System.Single)">
            <summary>
            Creates a new <see cref="T:XInputium.ModifierFunction"/> that eases-in 
            a value using the specified power.
            </summary>
            <param name="power">Power to ease the value.</param>
            <returns>The new created <see cref="T:XInputium.ModifierFunction"/> 
            delegate instance.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="power"/> 
            is <see cref="F:System.Single.NaN"/>.</exception>
        </member>
        <member name="M:XInputium.ModifierFunctions.NonLinearFunctions.PowerEaseOut(System.Single)">
            <summary>
            Creates a new <see cref="T:XInputium.ModifierFunction"/> that eases-out 
            a value using the specified power.
            </summary>
            <param name="power">Power to ease the value.</param>
            <returns>The new created <see cref="T:XInputium.ModifierFunction"/> 
            delegate instance.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="power"/> 
            is <see cref="F:System.Single.NaN"/>.</exception>
        </member>
        <member name="M:XInputium.ModifierFunctions.NonLinearFunctions.PowerEaseInOut(System.Single)">
            <summary>
            Creates a new <see cref="T:XInputium.ModifierFunction"/> that eases-in-out 
            a value using the specified power.
            </summary>
            <param name="power">Power to ease the value.</param>
            <returns>The new created <see cref="T:XInputium.ModifierFunction"/> 
            delegate instance.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="power"/> 
            is <see cref="F:System.Single.NaN"/>.</exception>
        </member>
        <member name="T:XInputium.RepeatDigitalButtonInputEvent`1">
            <summary>
            Implements an <see cref="T:XInputium.InputEvent"/> that monitors the state
            of a <see cref="T:XInputium.DigitalButton"/> derived class, and repeatedly 
            triggers while the associated button is held.
            </summary>
            <typeparam name="T"><see cref="T:XInputium.DigitalButton"/> or a type derived 
            from <see cref="T:XInputium.DigitalButton"/>, that is the type of the button 
            monitored by the input event.</typeparam>
            <remarks>
            <see cref="T:XInputium.RepeatDigitalButtonInputEvent`1"/> provides a way 
            for adding button repeating functionality to your game or 
            application. Once the user starts pressing and holding the button, 
            the following happens while the button is held:
            <br/>1. The event is immediately triggered.
            <br/>2. The event waits for an optional <i>initial delay</i> (specified at 
            <see cref="P:XInputium.RepeatDigitalButtonInputEvent`1.InitialDelay"/> property). If no <i>initial delay</i> is 
            used, skips to step 4.
            <br/>3. The event triggers.
            <br/>4. Waits for the <i>repeat delay time</i> (specified at 
            <see cref="P:XInputium.RepeatDigitalButtonInputEvent`1.RepeatDelay"/> property).
            <br/>5. Repeats from step 3.
            <br/><br/>
            At step 4, the <i>repeat delay time</i> is affected by the optional 
            <i>acceleration ratio</i> (specified at <see cref="P:XInputium.RepeatDigitalButtonInputEvent`1.AccelerationRatio"/> 
            property), which either decreases (accelerates) or increases (decelerates) 
            the <i>repeat delay time</i>. On each repeat, this time is divided by the 
            value of <see cref="P:XInputium.RepeatDigitalButtonInputEvent`1.AccelerationRatio"/> to perform the acceleration or 
            deceleration. When accelerating, the effective <i>repeat delay time</i> 
            will be clamped in order to never be less than 
            <see cref="P:XInputium.RepeatDigitalButtonInputEvent`1.MinimumRepeatDelay"/>. Similarly, when decelerating, it will 
            be clamped in order to never be greater than 
            <see cref="P:XInputium.RepeatDigitalButtonInputEvent`1.MaximumRepeatDelay"/>.
            <br/><br/>
            You can get the current <i>repeat delay time</i> using 
            <see cref="P:XInputium.RepeatDigitalButtonInputEvent`1.CurrentRepeatDelay"/> property. To determine if the 
            <see cref="T:XInputium.RepeatDigitalButtonInputEvent`1"/> is currently repeating, 
            use <see cref="P:XInputium.RepeatDigitalButtonInputEvent`1.IsRepeating"/> property. To get the number of triggered 
            repeats since the user pressed the button, use <see cref="P:XInputium.RepeatDigitalButtonInputEvent`1.RepeatCount"/> 
            property.
            <br/><br/>
            <see cref="T:XInputium.RepeatDigitalButtonInputEvent`1"/> is useful in scenarios 
            where you need a button to repeatedly trigger as the user holds the 
            associated physical button. This is common in the UI of many game titles, 
            usually in menus, lists and controls that support items cycling. Although 
            such functionality is usually implemented in the UI layer,
            <see cref="T:XInputium.RepeatDigitalButtonInputEvent`1"/> enables you to get this 
            functionality directly from the input layer.
            </remarks>
            <seealso cref="T:XInputium.InputEvent"/>
            <seealso cref="T:XInputium.DigitalButton"/>
            <seealso cref="T:XInputium.DigitalButtonInputEvent`1"/>
        </member>
        <member name="M:XInputium.RepeatDigitalButtonInputEvent`1.#ctor(`0,System.TimeSpan,System.TimeSpan,System.Single,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of a <see cref="T:XInputium.RepeatDigitalButtonInputEvent`1"/>
            class, that is associated with the specified button, uses the specified delay 
            times and accelerates its repeat delay using the specified acceleration 
            parameters.
            </summary>
            <param name="button"><typeparamref name="T"/> instance that 
            represents the button of which state will be monitored by 
            the <see cref="T:XInputium.RepeatDigitalButtonInputEvent`1"/> instance.</param>
            <param name="initialDelay">Amount of time the user must hold 
            the button before the event triggering starts repeating.</param>
            <param name="repeatDelay">Time to wait between each event triggering 
            repeat.</param>
            <param name="accelerationRatio">A number greater than 0, that specifies 
            the acceleration ratio of the <paramref name="repeatDelay"/> time that 
            will be applied on each triggering repeat. A value less than 1 causes 
            the repeats to be slower, more than 1 causes the repeats to be faster, 
            and 1 uses no acceleration or deceleration.</param>
            <param name="minRepeatDelay">When <paramref name="accelerationRatio"/> 
            is greater than 1, causing the repeat delay time to be shorter on each 
            triggering repeat, this specifies the minimum delay time allowed between 
            each repeat.</param>
            <param name="maxRepeatDelay">When <paramref name="accelerationRatio"/> 
            is lower than 1, causing the repeat delay time to be longer on each 
            triggering repeat, this specifies the maximum delay time allowed between 
            each repeat.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="button"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="accelerationRatio"/> 
            is <see cref="F:System.Single.NaN"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="accelerationRatio"/> is equal to or lower than 0.</exception>
        </member>
        <member name="M:XInputium.RepeatDigitalButtonInputEvent`1.#ctor(`0,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of a <see cref="T:XInputium.RepeatDigitalButtonInputEvent`1"/>
            class, that is associated with the specified button 
            and uses the specified delay times.
            </summary>
            <param name="button"><typeparamref name="T"/> instance that 
            represents the button of which state will be monitored by 
            the <see cref="T:XInputium.RepeatDigitalButtonInputEvent`1"/> instance.</param>
            <param name="initialDelay">Amount of time the user must hold 
            the button before the event triggering starts repeating.</param>
            <param name="repeatDelay">Time to wait between each event triggering 
            repeat.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="button"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:XInputium.RepeatDigitalButtonInputEvent`1.Button">
            <summary>
            Gets the <typeparamref name="T"/> instance that represents the 
            button associated with the current input event.
            </summary>
        </member>
        <member name="P:XInputium.RepeatDigitalButtonInputEvent`1.InitialDelay">
            <summary>
            Gets or sets the amount of time the user must press the button 
            before the button starts repeating.
            </summary>
        </member>
        <member name="P:XInputium.RepeatDigitalButtonInputEvent`1.RepeatDelay">
            <summary>
            Gets or sets the amount of time to wait between each repeat.
            </summary>
            <seealso cref="P:XInputium.RepeatDigitalButtonInputEvent`1.InitialDelay"/>
        </member>
        <member name="P:XInputium.RepeatDigitalButtonInputEvent`1.AccelerationRatio">
            <summary>
            Gets or sets the value by which <see cref="P:XInputium.RepeatDigitalButtonInputEvent`1.RepeatDelay"/> 
            is divided, during the acceleration period.
            </summary>
            <value>A number greater than 0, where less than 1 increases 
            the amount of time between each repeat, more than 1 
            decreases this time, and 1 has no effect.
            The default value is 1.</value>
            <exception cref="T:System.ArgumentException">The value being set to the 
            property is <see cref="F:System.Single.NaN"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value being 
            set to the property is equal to or less than 0.</exception>
            <seealso cref="P:XInputium.RepeatDigitalButtonInputEvent`1.RepeatDelay"/>
        </member>
        <member name="P:XInputium.RepeatDigitalButtonInputEvent`1.MinimumRepeatDelay">
            <summary>
            Gets or sets the minimum repeat delay time allowed for the 
            decelerated initial repeat delay.
            </summary>
            <value>A positive <see cref="T:System.TimeSpan"/> value. 
            The default value is <see cref="F:System.TimeSpan.Zero"/>.</value>
            <seealso cref="P:XInputium.RepeatDigitalButtonInputEvent`1.MaximumRepeatDelay"/>
            <seealso cref="P:XInputium.RepeatDigitalButtonInputEvent`1.RepeatDelay"/>
        </member>
        <member name="P:XInputium.RepeatDigitalButtonInputEvent`1.MaximumRepeatDelay">
            <summary>
            Gets or sets the maximum repeat delay time allowed for the 
            accelerated initial repeat delay.
            </summary>
            <value>A positive <see cref="T:System.TimeSpan"/> value. 
            The default value is <see cref="F:System.TimeSpan.MaxValue"/>.</value>
            <seealso cref="P:XInputium.RepeatDigitalButtonInputEvent`1.MinimumRepeatDelay"/>
            <seealso cref="P:XInputium.RepeatDigitalButtonInputEvent`1.RepeatDelay"/>
        </member>
        <member name="P:XInputium.RepeatDigitalButtonInputEvent`1.CurrentRepeatDelay">
            <summary>
            Gets the calculated repeat delay currently in effect, 
            which can potentially be accelerated or decelerated.
            </summary>
            <returns>If <see cref="P:XInputium.RepeatDigitalButtonInputEvent`1.IsRepeating"/> is <see langword="true"/>, 
            returns the current effective repeat delay; otherwise, returns 
            the value of <see cref="P:XInputium.RepeatDigitalButtonInputEvent`1.RepeatDelay"/>.</returns>
            <seealso cref="P:XInputium.RepeatDigitalButtonInputEvent`1.RepeatDelay"/>
            <seealso cref="P:XInputium.RepeatDigitalButtonInputEvent`1.AccelerationRatio"/>
        </member>
        <member name="P:XInputium.RepeatDigitalButtonInputEvent`1.IsRepeating">
            <summary>
            Gets a <see cref="T:System.Boolean"/> indicating if the input event
            is currently repeating the button press.
            </summary>
            <seealso cref="P:XInputium.RepeatDigitalButtonInputEvent`1.RepeatCount"/>
        </member>
        <member name="P:XInputium.RepeatDigitalButtonInputEvent`1.RepeatCount">
            <summary>
            Gets the number of triggering repeats since the button 
            was tapped.
            </summary>
            <seealso cref="P:XInputium.RepeatDigitalButtonInputEvent`1.IsRepeating"/>
        </member>
        <member name="M:XInputium.RepeatDigitalButtonInputEvent`1.OnUpdate(System.TimeSpan)">
            <summary>
            Evaluates event logic and, if conditions are met, triggers 
            the event. Overrides 
            <see cref="M:XInputium.InputEvent.OnUpdate(System.TimeSpan)"/> method.
            </summary>
            <param name="time">Amount of time elapsed since the last 
            update operation.</param>
        </member>
        <member name="T:XInputium.SlimJoystick">
            <summary>
            Represents a joystick that has two axes.
            </summary>
            <remarks>
            <see cref="T:XInputium.SlimJoystick"/> is a read-only structure that 
            is a more lightweight alternative to <see cref="T:XInputium.Joystick"/> 
            class, at the expense of providing less features. 
            <see cref="T:XInputium.SlimJoystick"/> provides only the crucial 
            features necessary to work with joysticks. Consider using 
            <see cref="T:XInputium.Joystick"/> class if you need more advanced 
            features.
            </remarks>
            <seealso cref="T:XInputium.Joystick"/>
            <seealso cref="T:XInputium.SlimTrigger"/>
        </member>
        <member name="F:XInputium.SlimJoystick.Zero">
            <summary>
            A <see cref="T:XInputium.SlimJoystick"/> object that represents a 
            joystick that has both axes at 0 position.
            </summary>
        </member>
        <member name="M:XInputium.SlimJoystick.#ctor(System.Single,System.Single)">
            <summary>
            Creates a new <see cref="T:XInputium.SlimJoystick"/> that has 
            the specified axes' position.
            </summary>
            <param name="x">A value between -1 and 1, that specifies 
            the position of the horizontal axis. If you specify a 
            value outside this range, it will be clamped 
            accordingly.</param>
            <param name="y">A value between -1 and 1, that specifies 
            the position of the vertical axis. If you specify a 
            value outside this range, it will be clamped 
            accordingly.</param>
            <exception cref="T:System.ArgumentException"><paramref name="x"/> 
            is <see cref="F:System.Single.NaN"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="y"/> 
            is <see cref="F:System.Single.NaN"/>.</exception>
        </member>
        <member name="M:XInputium.SlimJoystick.op_Equality(XInputium.SlimJoystick,XInputium.SlimJoystick)">
            <summary>
            Determines if both specified <see cref="T:XInputium.SlimJoystick"/> 
            objects are identical.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><see langword="true"/> if <paramref name="left"/> 
            is identical to <paramref name="right"/>; 
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:XInputium.SlimJoystick.op_Inequality(XInputium.SlimJoystick,XInputium.SlimJoystick)">
            <summary>
            Determines if both specified <see cref="T:XInputium.SlimJoystick"/> 
            objects are <b>not</b> identical.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><see langword="true"/> if <paramref name="left"/> 
            is <b>not</b> identical to <paramref name="right"/>; 
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:XInputium.SlimJoystick.X">
            <summary>
            Gets the position of the <see cref="T:XInputium.SlimJoystick"/>'s 
            horizontal axis.
            </summary>
            <returns>A value within the -1 and 1 inclusive range.</returns>
        </member>
        <member name="P:XInputium.SlimJoystick.Y">
            <summary>
            Gets the position of the <see cref="T:XInputium.SlimJoystick"/>'s 
            vertical axis.
            </summary>
            <returns>A value within the -1 and 1 inclusive range.</returns>
        </member>
        <member name="P:XInputium.SlimJoystick.IsZero">
            <summary>
            Gets a <see cref="T:System.Boolean"/> that indicates if the 
            <see cref="T:XInputium.SlimJoystick"/> is identical to 
            <see cref="F:XInputium.SlimJoystick.Zero"/>, meaning its both axes are 
            at position 0.
            </summary>
            <seealso cref="F:XInputium.SlimJoystick.Zero"/>
        </member>
        <member name="M:XInputium.SlimJoystick.ToString">
            <summary>
            Gets the <see cref="T:System.String"/> representation of the 
            <see cref="T:XInputium.SlimJoystick"/>.
            </summary>
            <returns>The <see cref="T:System.String"/> representation of 
            the current <see cref="T:XInputium.SlimJoystick"/>.</returns>
        </member>
        <member name="M:XInputium.SlimJoystick.GetHashCode">
            <summary>
            Gets the hash code for the <see cref="T:XInputium.SlimJoystick"/> 
            instance.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:XInputium.SlimJoystick.Equals(System.Object)">
            <summary>
            Determines if the specified <see cref="T:System.Object"/> is 
            identical to the current <see cref="T:XInputium.SlimJoystick"/>.
            </summary>
            <param name="obj"><see cref="T:System.Object"/> instance to 
            compare with the current <see cref="T:XInputium.SlimJoystick"/>.</param>
            <returns><see langword="true"/> if <paramref name="obj"/> 
            is identical to the current <see cref="T:XInputium.SlimJoystick"/>; 
            otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:XInputium.SlimJoystick.GetHashCode"/>
        </member>
        <member name="M:XInputium.SlimJoystick.Equals(XInputium.SlimJoystick)">
            <summary>
            Determines if the specified <see cref="T:XInputium.SlimJoystick"/> is 
            identical to the current <see cref="T:XInputium.SlimJoystick"/>.
            </summary>
            <param name="other"><see cref="T:XInputium.SlimJoystick"/> object to 
            compare.</param>
            <returns><see langword="true"/> if <paramref name="other"/> 
            is identical to the current <see cref="T:XInputium.SlimJoystick"/>; 
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:XInputium.SlimJoystick.GetAngle">
            <summary>
            Gets the joystick angle, in radians.
            </summary>
            <returns>The angle of the joystick, in radians.</returns>
            <seealso cref="M:XInputium.SlimJoystick.GetRadius"/>
            <seealso cref="M:XInputium.InputMath.ConvertToPolar(System.Single,System.Single,System.Single@,System.Single@)"/>
            <seealso cref="M:XInputium.InputMath.ConvertRadiansToNormal(System.Single)"/>
        </member>
        <member name="M:XInputium.SlimJoystick.GetRadius">
            <summary>
            Gets the joystick radius, where the center is with both 
            axes at position 0.
            </summary>
            <returns>The radius of <see cref="P:XInputium.SlimJoystick.X"/> and <see cref="P:XInputium.SlimJoystick.Y"/> 
            away from the center 0.</returns>
            <seealso cref="M:XInputium.SlimJoystick.GetAngle"/>
            <seealso cref="M:XInputium.InputMath.ConvertToPolar(System.Single,System.Single,System.Single@,System.Single@)"/>
        </member>
        <member name="M:XInputium.SlimJoystick.ApplyCartesianModifierFunctions(XInputium.ModifierFunction,XInputium.ModifierFunction)">
            <summary>
            Gets a <see cref="T:XInputium.SlimJoystick"/> object that represents the 
            position of the current <see cref="T:XInputium.SlimJoystick"/> with the 
            specified modifier functions applied to its Cartesian X and 
            Y coordinates.
            </summary>
            <param name="xFunction"><see cref="T:XInputium.ModifierFunction"/> to 
            apply to the X coordinate; or <see langword="null"/> to 
            use no function.</param>
            <param name="yFunction"><see cref="T:XInputium.ModifierFunction"/> to 
            apply to the Y coordinate; or <see langword="null"/> to 
            use no function.</param>
            <returns>The newly created <see cref="T:XInputium.SlimJoystick"/> object.</returns>
            <seealso cref="M:XInputium.SlimJoystick.ApplyPolarModifierFunctions(XInputium.ModifierFunction,XInputium.ModifierFunction)"/>
        </member>
        <member name="M:XInputium.SlimJoystick.ApplyPolarModifierFunctions(XInputium.ModifierFunction,XInputium.ModifierFunction)">
            <summary>
            Gets a <see cref="T:XInputium.SlimJoystick"/> object that represents the 
            position of the current <see cref="T:XInputium.SlimJoystick"/> with the 
            specified modifier functions applied to its polar coordinates.
            </summary>
            <param name="angleFunction"><see cref="T:XInputium.ModifierFunction"/> to 
            apply to the normalized angle; or <see langword="null"/> to 
            use no function.</param>
            <param name="radiusFunction"><see cref="T:XInputium.ModifierFunction"/> to 
            apply to the radius; or <see langword="null"/> to use no 
            function.</param>
            <returns>The newly created <see cref="T:XInputium.SlimJoystick"/> object.</returns>
            <seealso cref="M:XInputium.SlimJoystick.ApplyCartesianModifierFunctions(XInputium.ModifierFunction,XInputium.ModifierFunction)"/>
        </member>
        <member name="M:XInputium.SlimJoystick.ApplyCircularDeadZone(System.Single,System.Single)">
            <summary>
            Gets a <see cref="T:XInputium.SlimJoystick"/> object that represents the position 
            of the current <see cref="T:XInputium.SlimJoystick"/> with the specified inner 
            and outer dead-zones applied to its radius polar coordinate.
            </summary>
            <param name="innerDeadZone">A value between the 0 and 1 inclusive range, 
            that specifies the inner dead-zone.</param>
            <param name="outerDeadZone">A value between the 0 and 1 inclusive range, 
            that specifies the outer dead-zone</param>
            <returns>The newly created <see cref="T:XInputium.SlimJoystick"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="innerDeadZone"/>
            is <see cref="F:System.Single.NaN"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="outerDeadZone"/>
            is <see cref="F:System.Single.NaN"/>.</exception>
        </member>
        <member name="M:XInputium.SlimJoystick.ApplyCircularDeadZone(System.Single)">
            <summary>
            Gets a <see cref="T:XInputium.SlimJoystick"/> object that represents the position 
            of the current <see cref="T:XInputium.SlimJoystick"/> with the specified inner 
            dead-zone applied to its radius polar coordinate.
            </summary>
            <param name="innerDeadZone">A value between the 0 and 1 inclusive range, 
            that specifies the inner dead-zone.</param>
            <returns>The newly created <see cref="T:XInputium.SlimJoystick"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="innerDeadZone"/>
            is <see cref="F:System.Single.NaN"/>.</exception>
        </member>
        <member name="M:XInputium.SlimJoystick.InvertX">
            <summary>
            Gets a <see cref="T:XInputium.SlimJoystick"/> object that represents the 
            position of the current <see cref="T:XInputium.SlimJoystick"/> with its 
            X axis inverted.
            </summary>
            <returns>The newly created <see cref="T:XInputium.SlimJoystick"/>.</returns>
            <seealso cref="M:XInputium.SlimJoystick.InvertY"/>
        </member>
        <member name="M:XInputium.SlimJoystick.InvertY">
            <summary>
            Gets a <see cref="T:XInputium.SlimJoystick"/> object that represents the 
            position of the current <see cref="T:XInputium.SlimJoystick"/> with its 
            Y axis inverted.
            </summary>
            <returns>The newly created <see cref="T:XInputium.SlimJoystick"/>.</returns>
            <seealso cref="M:XInputium.SlimJoystick.InvertX"/>
        </member>
        <member name="M:XInputium.SlimJoystick.GetDelta(XInputium.SlimJoystick)">
            <summary>
            Gets a <see cref="T:XInputium.JoystickDelta"/> object that represents the difference 
            between the specified <see cref="T:XInputium.SlimJoystick"/> object and the 
            current <see cref="T:XInputium.SlimJoystick"/>.
            </summary>
            <param name="sourcePosition">A <see cref="T:XInputium.SlimJoystick"/> object that 
            represents the source joystick position.</param>
            <returns>A <see cref="T:XInputium.JoystickDelta"/> object representing the 
            delta between <paramref name="sourcePosition"/> and the current 
            <see cref="T:XInputium.SlimJoystick"/>. If there is no position change between 
            both <see cref="T:XInputium.SlimJoystick"/> objects, <see cref="F:XInputium.JoystickDelta.Zero"/>
            is returned.</returns>
            <seealso cref="M:XInputium.JoystickDelta.FromJoystickPosition(XInputium.SlimJoystick,XInputium.SlimJoystick)"/>
            <seealso cref="T:XInputium.JoystickDelta"/>
        </member>
        <member name="T:XInputium.SlimTrigger">
            <summary>
            Represents a controller device trigger, that has 
            a single axis.
            </summary>
            <remarks>
            <see cref="T:XInputium.SlimTrigger"/> read-only structure is a more 
            lightweight alternative to <see cref="T:XInputium.Trigger"/> class, 
            which can be less resource intensive, but at the cost of 
            providing fewer features. <see cref="T:XInputium.SlimTrigger"/> provides 
            only the most crucial feature necessary for working with 
            controller devices' triggers. If you need more advanced 
            features, consider using <see cref="T:XInputium.Trigger"/> class.
            </remarks>
            <seealso cref="T:XInputium.Trigger"/>
            <seealso cref="T:XInputium.SlimJoystick"/>
        </member>
        <member name="F:XInputium.SlimTrigger.Zero">
            <summary>
            A <see cref="T:XInputium.SlimTrigger"/> object that has its axis 
            at position 0.
            </summary>
        </member>
        <member name="M:XInputium.SlimTrigger.#ctor(System.Single)">
            <summary>
            Creates a new <see cref="T:XInputium.SlimTrigger"/> object, 
            that has the specified axis value.
            </summary>
            <param name="value">A value within the 0 and 1 inclusive range. 
            If you specify a value outside this range, it will be clamped 
            accordingly.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> 
            is <see cref="F:System.Single.NaN"/>.</exception>
        </member>
        <member name="M:XInputium.SlimTrigger.op_Equality(XInputium.SlimTrigger,XInputium.SlimTrigger)">
            <summary>
            Compares both specified <see cref="T:XInputium.SlimTrigger"/> objects 
            for equality.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><see langword="true"/> if <paramref name="left"/> 
            is identical to <paramref name="right"/>; 
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:XInputium.SlimTrigger.op_Inequality(XInputium.SlimTrigger,XInputium.SlimTrigger)">
            <summary>
            Compares both specified <see cref="T:XInputium.SlimTrigger"/> objects 
            for inequality.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><see langword="true"/> if <paramref name="left"/> 
            is <b>not</b> identical to <paramref name="right"/>; 
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:XInputium.SlimTrigger.Value">
            <summary>
            Gets the value of the trigger's axis.
            </summary>
            <returns>A value within the 0 and 1 inclusive range.</returns>
        </member>
        <member name="P:XInputium.SlimTrigger.IsZero">
            <summary>
            Gets a <see cref="T:System.Boolean"/> that indicates if the 
            <see cref="T:XInputium.SlimTrigger"/> is identical to 
            <see cref="F:XInputium.SlimTrigger.Zero"/>, meaning its axis is at 
            position 0.
            </summary>
            <seealso cref="F:XInputium.SlimTrigger.Zero"/>
        </member>
        <member name="M:XInputium.SlimTrigger.ToString">
            <summary>
            Gets the <see cref="T:System.String"/> representation of the 
            <see cref="T:XInputium.SlimTrigger"/>.
            </summary>
            <returns>The <see cref="T:System.String"/> representation of 
            the current <see cref="T:XInputium.SlimTrigger"/> object.</returns>
        </member>
        <member name="M:XInputium.SlimTrigger.GetHashCode">
            <summary>
            Gets the hash code for the current <see cref="T:XInputium.SlimTrigger"/>
            object.
            </summary>
            <returns>The computed hash code.</returns>
            <seealso cref="M:XInputium.SlimTrigger.Equals(System.Object)"/>
        </member>
        <member name="M:XInputium.SlimTrigger.Equals(System.Object)">
            <summary>
            Determines if the specified <see cref="T:System.Object"/> instance 
            is identical to the current <see cref="T:XInputium.SlimTrigger"/>.
            </summary>
            <param name="obj"><see cref="T:System.Object"/> instance to 
            compare.</param>
            <returns><see langword="true"/> if <paramref name="obj"/> is 
            identical to the current <see cref="T:XInputium.SlimTrigger"/> object; 
            otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:XInputium.SlimTrigger.GetHashCode"/>
        </member>
        <member name="M:XInputium.SlimTrigger.Equals(XInputium.SlimTrigger)">
            <summary>
            Determines if the specified <see cref="T:XInputium.SlimTrigger"/> object 
            is identical to the current <see cref="T:XInputium.SlimTrigger"/>.
            </summary>
            <param name="other"><see cref="T:XInputium.SlimTrigger"/> instance to 
            compare.</param>
            <returns><see langword="true"/> if <paramref name="other"/> 
            is identical to the current <see cref="T:XInputium.SlimTrigger"/> object; 
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:XInputium.SlimTrigger.ApplyDeadZone(System.Single,System.Single)">
            <summary>
            Gets a <see cref="T:XInputium.SlimTrigger"/> object that represents the 
            value of the current <see cref="T:XInputium.SlimTrigger"/> with the 
            specified inner and outer dead-zones applied.
            </summary>
            <param name="innerDeadZone">A value between 0 and 1, that 
            specifies the inner dead-zone of the trigger.</param>
            <param name="outerDeadZone">A value between 0 and 1, that 
            specifies the outer dead-zone of the trigger.</param>
            <returns>The created <see cref="T:XInputium.SlimTrigger"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="innerDeadZone"/> 
            is <see cref="F:System.Single.NaN"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="outerDeadZone"/>
            is <see cref="F:System.Single.NaN"/>.</exception>
        </member>
        <member name="M:XInputium.SlimTrigger.ApplyDeadZone(System.Single)">
            <summary>
            Gets a <see cref="T:XInputium.SlimTrigger"/> object that represents the 
            value of the current <see cref="T:XInputium.SlimTrigger"/> with the 
            specified inner dead-zone applied.
            </summary>
            <param name="innerDeadZone">A value between 0 and 1, that 
            specifies the inner dead-zone of the trigger.</param>
            <returns>The created <see cref="T:XInputium.SlimTrigger"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="innerDeadZone"/> 
            is <see cref="F:System.Single.NaN"/>.</exception>
        </member>
        <member name="M:XInputium.SlimTrigger.ApplyModifierFunction(XInputium.ModifierFunction)">
            <summary>
            Gets a <see cref="T:XInputium.SlimTrigger"/> object that represents the 
            value of the current <see cref="T:XInputium.SlimTrigger"/> with the 
            specified <see cref="T:XInputium.ModifierFunction"/> applied to its 
            value.
            </summary>
            <param name="modifierFunction"><see cref="T:XInputium.ModifierFunction"/> 
            to apply.</param>
            <returns>The new <see cref="T:XInputium.SlimTrigger"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="modifierFunction"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:XInputium.Trigger">
            <summary>
            Represents the trigger of a controller device, which has 
            a single axis ranging between 0 and 1.
            </summary>
            <remarks>
            The <see cref="T:XInputium.Trigger"/> class provides configurations 
            that can be used to modify the effective value of the 
            trigger. If you don't need this functionality, consider 
            using <see cref="T:XInputium.SlimTrigger"/>, which is a lightweight 
            alternative, that provides only the essential 
            functionality. See <see cref="T:XInputium.SlimTrigger"/> for more 
            information.
            </remarks>
            <seealso cref="T:XInputium.SlimTrigger"/>
            <seealso cref="T:XInputium.Joystick"/>
        </member>
        <member name="M:XInputium.Trigger.#ctor">
            <summary>
            Initializes a default instance of a <see cref="T:XInputium.Trigger"/> 
            class.
            </summary>
        </member>
        <member name="M:XInputium.Trigger.#ctor(XInputium.TriggerUpdateCallback@)">
            <summary>
            Initializes a new instance of a <see cref="T:XInputium.Trigger"/> 
            class, that supports state updating from external code.
            </summary>
            <param name="updateCallback">Variable that will be set 
            with a <see cref="T:XInputium.TriggerUpdateCallback"/> delegate 
            that can be invoked to update the state of the 
            <see cref="T:XInputium.Trigger"/> instance.</param>
        </member>
        <member name="M:XInputium.Trigger.#ctor(System.Single)">
            <summary>
            Initializes a new instance of a <see cref="T:XInputium.Trigger"/> 
            class that has the specified immutable raw value.
            </summary>
            <param name="rawValue">Raw value of the trigger.</param>
            <exception cref="T:System.ArgumentException"><paramref name="rawValue"/> 
            is <see cref="F:System.Single.NaN"/>.</exception>
        </member>
        <member name="M:XInputium.Trigger.#ctor(XInputium.SlimTrigger)">
            <summary>
            Initializes a new instance of a <see cref="T:XInputium.Trigger"/> 
            class that has an immutable raw value that is obtained 
            from the specified <see cref="T:XInputium.SlimTrigger"/> object.
            </summary>
            <param name="trigger"><see cref="T:XInputium.SlimTrigger"/> object 
            that will be used to initialize the <see cref="T:XInputium.Trigger"/>.</param>
            <seealso cref="T:XInputium.SlimTrigger"/>
        </member>
        <member name="E:XInputium.Trigger.Updated">
            <summary>
            It's invoked whenever the <see cref="T:XInputium.Trigger"/> is 
            updated by external code.
            </summary>
            <seealso cref="M:XInputium.Trigger.OnUpdated"/>
        </member>
        <member name="E:XInputium.Trigger.ValueChanged">
            <summary>
            It's invoked whenever the effective value of <see cref="P:XInputium.Trigger.Value"/> 
            property is changed.
            </summary>
            <seealso cref="P:XInputium.Trigger.Value"/>
        </member>
        <member name="E:XInputium.Trigger.IsMovingChanged">
            <summary>
            It's invoked whenever the effective value of <see cref="P:XInputium.Trigger.IsMoving"/> 
            property is changed.
            </summary>
            <seealso cref="P:XInputium.Trigger.IsMoving"/>
            <seealso cref="M:XInputium.Trigger.OnIsMovingChanged"/>
        </member>
        <member name="P:XInputium.Trigger.RawValue">
            <summary>
            Gets the raw value of the trigger. This is the normalized 
            value of the trigger (between 0 and 1) as reported by the 
            device.
            </summary>
            <seealso cref="P:XInputium.Trigger.Value"/>
        </member>
        <member name="P:XInputium.Trigger.Value">
            <summary>
            Gets the processed value of the trigger. This is the 
            normalized value of the trigger (between 0 and 1), 
            after it has been processed and all modifiers applied.
            </summary>
            <seealso cref="P:XInputium.Trigger.RawValue"/>
        </member>
        <member name="P:XInputium.Trigger.Delta">
            <summary>
            Gets the difference between the current and the previous value 
            of the trigger.
            </summary>
            <returns>A number between -1 and 1, indicating the current 
            effective value of the trigger, relative to the effective value
            it had before the most recent update operation.</returns>
        </member>
        <member name="P:XInputium.Trigger.MovementSpeed">
            <summary>
            Gets the estimated distance per second the trigger is being moved by,
            by considering its current a previous effective value.
            </summary>
            <returns>A number equal to or greater than 0, representing the estimated 
            distance the trigger is moving per second. If <see cref="P:XInputium.Trigger.FrameTime"/> 
            is <see cref="F:System.TimeSpan.Zero"/> and <see cref="P:XInputium.Trigger.Delta"/> is greater than 
            0, <see cref="F:System.Single.PositiveInfinity"/> is returned.</returns>
            <remarks>
            The number returned by this property represents the total distance the 
            trigger axis would travel within a second, if it kept moving at its 
            current speed. Its current speed is the trigger's delta distance (see 
            <see cref="P:XInputium.Trigger.Delta"/> property), divided by the number of seconds elapsed 
            between the two most recent update operations. Although the trigger 
            could not keep moving indeterminately because it is constrained to its 
            0 to 1 boundaries, this property assumes as if it could.
            <br/><br/>
            When the time elapsed between the two most recent update operations is 
            zero (<see cref="F:System.TimeSpan.Zero"/>) while the delta distance is greater 
            than 0, this property returns <see cref="F:System.Single.PositiveInfinity"/> to 
            indicate the trigger is moving at infinite speed and represent an 
            immediate movement.
            </remarks>
            <seealso cref="P:XInputium.Trigger.Delta"/>
            <seealso cref="P:XInputium.Trigger.FrameTime"/>
        </member>
        <member name="P:XInputium.Trigger.IsMoving">
            <summary>
            Gets a <see cref="T:System.Boolean"/> that indicates if the trigger is currently 
            being moved, by considering the two most recent update operations.
            </summary>
            <returns><see langword="true"/> if the trigger is being moved; 
            otherwise, <see langword="false"/>.</returns>
            <seealso cref="E:XInputium.Trigger.IsMovingChanged"/>
            <seealso cref="P:XInputium.Trigger.Delta"/>
            <seealso cref="P:XInputium.Trigger.MovementSpeed"/>
        </member>
        <member name="P:XInputium.Trigger.FrameTime">
            <summary>
            Gets the amount of time elapsed since the last time the 
            <see cref="T:XInputium.Trigger"/> was updated from external code.
            </summary>
        </member>
        <member name="P:XInputium.Trigger.InnerDeadZone">
            <summary>
            Gets or sets the inner dead-zone of the trigger â€” that is, the raw 
            portion of the trigger in the beginning of the axis that is ignored 
            in the effective value of the trigger.
            </summary>
            <value>A number between 0 and 1, where 0 means no dead-zone is 
            applied and 1 means the full trigger axis range is ignored. The 
            default value is 0.</value>
            <exception cref="T:System.ArgumentException">The value being set to the 
            property is <see cref="F:System.Single.NaN"/>.</exception>
            <seealso cref="P:XInputium.Trigger.OuterDeadZone"/>
            <seealso cref="P:XInputium.Trigger.Value"/>
        </member>
        <member name="P:XInputium.Trigger.OuterDeadZone">
            <summary>
            Gets or sets the dead-zone of the outer end of the trigger â€” 
            that is, the raw portion of the trigger in the end of the axis 
            that is ignored in the effective value of the trigger.
            </summary>
            <value>A number between 0 and 1, where 0 means no dead-zone is 
            applied and 1 means the full trigger axis range is ignored. The 
            default value is 0.</value>
            <exception cref="T:System.ArgumentException">The value being set to the 
            property is <see cref="F:System.Single.NaN"/>.</exception>
            <seealso cref="P:XInputium.Trigger.InnerDeadZone"/>
            <seealso cref="P:XInputium.Trigger.Value"/>
        </member>
        <member name="P:XInputium.Trigger.ModifierFunction">
            <summary>
            Gets or sets the custom function that is used to modify the 
            processed value of the <see cref="T:XInputium.Trigger"/>. This function 
            affects the value of <see cref="P:XInputium.Trigger.Value"/> property.
            </summary>
            <value>A <see cref="T:XInputium.ModifierFunction"/> delegate 
            or <see langword="null"/> to use no function. 
            The default value is <see langword="null"/>.</value>
            <remarks>
            The input value of the function has already all of the base 
            modifiers of the <see cref="T:XInputium.Trigger"/> applied â€” 
            for example, it has already the dead-zones applied.
            </remarks>
            <seealso cref="T:XInputium.ModifierFunction"/>
        </member>
        <member name="P:XInputium.Trigger.IsInverted">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> that indicates the 
            effective value of the axis is inverted (that is, when 
            its effective would be 0, it will be 1, and when it 
            would be 1, it will be 0).
            </summary>
            <seealso cref="P:XInputium.Trigger.Value"/>
        </member>
        <member name="M:XInputium.Trigger.Encapsulate(XInputium.Trigger)">
            <summary>
            Creates a new <see cref="T:XInputium.Trigger"/> instance that encapsulates the 
            specified <see cref="T:XInputium.Trigger"/> instance and is automatically 
            updated when the specified trigger is updated.
            </summary>
            <param name="trigger"><see cref="T:XInputium.Trigger"/> instance to 
            encapsulate.</param>
            <returns>The newly created <see cref="T:XInputium.Trigger"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="trigger"/> is <see langword="null"/>.</exception>
            <remarks>
            This method returns a new <see cref="T:XInputium.Trigger"/> instance that uses 
            the specified <paramref name="trigger"/> as the source of its raw 
            axis value and uses its time information. The returned 
            <see cref="T:XInputium.Trigger"/> is automatically updated whenever the 
            specified <paramref name="trigger"/> is updated. Only time information 
            and the raw axis value are obtained from the underlying 
            <see cref="T:XInputium.Trigger"/>.
            <br/><br/>
            This method can be useful in scenarios where you need to have more 
            that one <see cref="T:XInputium.Trigger"/> instance associated with the same 
            physical trigger, with their own trigger settings.
            </remarks>
        </member>
        <member name="M:XInputium.Trigger.ToString">
            <summary>
            Gets the <see cref="T:System.String"/> representation of the 
            current <see cref="T:XInputium.Trigger"/> instance.
            </summary>
            <returns>The <see cref="T:System.String"/> representation 
            of the <see cref="T:XInputium.Trigger"/>.</returns>
        </member>
        <member name="M:XInputium.Trigger.OnUpdated">
            <summary>
            Raises the <see cref="E:XInputium.Trigger.Updated"/> event.
            </summary>
            <seealso cref="E:XInputium.Trigger.Updated"/>
        </member>
        <member name="M:XInputium.Trigger.OnValueChanged">
            <summary>
            Raises the <see cref="E:XInputium.Trigger.ValueChanged"/> event.
            </summary>
            <seealso cref="E:XInputium.Trigger.ValueChanged"/>
            <seealso cref="P:XInputium.Trigger.Value"/>
        </member>
        <member name="M:XInputium.Trigger.OnIsMovingChanged">
            <summary>
            Raises the <see cref="E:XInputium.Trigger.IsMovingChanged"/> event.
            </summary>
            <seealso cref="E:XInputium.Trigger.IsMovingChanged"/>
            <seealso cref="P:XInputium.Trigger.IsMoving"/>
        </member>
        <member name="M:XInputium.Trigger.OnUpdating">
            <summary>
            It's called on every update to the <see cref="T:XInputium.Trigger"/>, 
            before trigger validation. When overridden in a derived 
            class, performs operations that need to occur before 
            the trigger is validated.
            </summary>
            <remarks>
            This method allows inheritors to perform any operation 
            that must occur when the <see cref="T:XInputium.Trigger"/> is updated, 
            that might invalidate the <see cref="T:XInputium.Trigger"/>, forcing 
            a validation to occur as soon as possible.
            <br/><br/>
            Use <see cref="P:XInputium.Trigger.RawValue"/> and <see cref="P:XInputium.Trigger.FrameTime"/> 
            properties to obtain the current value of the trigger
            axis and the current update's frame time.
            </remarks>
            <seealso cref="M:XInputium.Trigger.Invalidate"/>
        </member>
        <member name="M:XInputium.Trigger.Invalidate">
            <summary>
            Marks the effective value of the <see cref="T:XInputium.Trigger"/> 
            â€” the value of <see cref="P:XInputium.Trigger.Value"/> property â€” as 
            outdated. The next time the getter method of <see cref="P:XInputium.Trigger.Value"/> 
            property is called, the property's value will be updated.
            </summary>
            <remarks>
            Inheritors can call this method if they are implementing 
            functionality that may affect the value of <see cref="P:XInputium.Trigger.Value"/> 
            property, that is not automatically applied. For instance, 
            if you are implementing a custom modifier property that 
            consumers can change, you would call this method whenever 
            your property's value changes.
            </remarks>
            <seealso cref="M:XInputium.Trigger.Validate"/>
            <seealso cref="M:XInputium.Trigger.ApplyValueModifiers(System.Single)"/>
        </member>
        <member name="M:XInputium.Trigger.Validate">
            <summary>
            If the effective value of the trigger is outdated, 
            forces it to update and all modifiers to be applied.
            </summary>
            <returns><see langword="true"/> if the value of 
            <see cref="P:XInputium.Trigger.Value"/> property was updated and effectively 
            changed as a result of this operation; 
            otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.NotSupportedException">The 
            <see cref="M:XInputium.Trigger.ApplyValueModifiers(System.Single)"/> was overridden 
            in the derived class, and returned <see cref="F:System.Single.NaN"/> 
            when called by <see cref="M:XInputium.Trigger.Validate"/>.</exception>
            <remarks>
            You call this method when you need to force the value 
            of <see cref="P:XInputium.Trigger.Value"/> property to be updated with all 
            the modifiers. You usually call this method after changing 
            the value of a property that can affect the value of 
            <see cref="P:XInputium.Trigger.Value"/> property. Although the value of 
            <see cref="P:XInputium.Trigger.Value"/> property is automatically updated 
            as needed when its getter method is called, calling 
            <see cref="M:XInputium.Trigger.Validate"/> method ensures it is 
            updated immediately, so any events that depend on this 
            will be triggered.
            </remarks>
            <seealso cref="P:XInputium.Trigger.Value"/>
            <seealso cref="M:XInputium.Trigger.Invalidate"/>
            <seealso cref="M:XInputium.Trigger.ApplyValueModifiers(System.Single)"/>
        </member>
        <member name="M:XInputium.Trigger.ApplyValueModifiers(System.Single)">
            <summary>
            When overridden in derived classes, receives the specified 
            axis raw value, applies any modifiers to it, and returns 
            the effective modified result.
            </summary>
            <param name="rawValue">Raw axis value to modify. This is a 
            value between 0 and 1.</param>
            <returns>A value between 0 and 1, which is the value of 
            <paramref name="rawValue"/> with all modifiers applied.</returns>
            <exception cref="T:System.NotSupportedException">The modifier function 
            specified in <see cref="P:XInputium.Trigger.ModifierFunction"/> property was 
            called and has returned <see cref="F:System.Single.NaN"/>.</exception>
            <remarks>
            This method is called by <see cref="M:XInputium.Trigger.Validate"/> method 
            and the <see cref="P:XInputium.Trigger.Value"/> property getter to apply the 
            modifiers to the trigger axis value. The base implementation 
            applies all of the base modifiers, so you need to call the 
            base implementation from your implementation to ensure the 
            base modifiers are correctly applied. Because 
            <paramref name="rawValue"/> is the raw value of the axis, 
            obtained from the underlying device, you have the ability 
            to apply modifications that require the raw value for them 
            to be applied, meaning you would call the base implementation 
            in the most appropriate moment for your needs.
            </remarks>
            <seealso cref="P:XInputium.Trigger.Value"/>
            <seealso cref="M:XInputium.Trigger.Validate"/>
        </member>
        <member name="M:XInputium.Trigger.CopyConfigurationFrom(XInputium.Trigger)">
            <summary>
            Sets all writable properties in the current <see cref="T:XInputium.Trigger"/> 
            with values from the corresponding properties in the specified 
            <see cref="T:XInputium.Trigger"/> instance.
            </summary>
            <param name="trigger"><see cref="T:XInputium.Trigger"/> instance to copy 
            the values from.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="trigger"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:XInputium.Trigger.ToDigitalButton(System.Func{XInputium.Trigger,XInputium.DigitalButton,System.Boolean})">
            <summary>
            Gets a new <see cref="T:XInputium.DigitalButton"/> instance that activates 
            (presses) when the specified activation function returns 
            <see langword="true"/> for the current state of the <see cref="T:XInputium.Trigger"/>.
            </summary>
            <param name="activationFunction">Function that will be called 
            on every update to the state of the <see cref="T:XInputium.Trigger"/>, which 
            receives the current <see cref="T:XInputium.Trigger"/> instance and the 
            <see cref="T:XInputium.DigitalButton"/> as its parameters.</param>
            <returns>A new <see cref="T:XInputium.DigitalButton"/> instance that is updated 
            automatically, and reports its state as pressed depending on the state 
            of the <see cref="T:XInputium.Trigger"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="activationFunction"/> is <see langword="null"/>.</exception>
            <seealso cref="T:XInputium.DigitalButton"/>
        </member>
        <member name="M:XInputium.Trigger.ToDigitalButton(System.Single,System.Single)">
            <summary>
            Gets a new <see cref="T:XInputium.DigitalButton"/> instance that activates 
            (presses) whenever the current <see cref="T:XInputium.Trigger"/>'s axis 
            effective value is equal or greater than the specified activation 
            threshold and then deactivates when the effective axis value is 
            less than the specified deactivation threshold.
            </summary>
            <param name="activationThreshold">A number between 0 and 1 that 
            specifies the minimum value, over which the effective axis value 
            of the trigger will activate (press) the button.</param>
            <param name="deactivationThreshold">A number between 0 and 1 that 
            specifies the value under which the effective axis value 
            of the trigger will deactivate (release) the button, when the 
            button is activated.</param>
            <returns>A new <see cref="T:XInputium.DigitalButton"/> instance that is updated 
            automatically, and reports its state as pressed depending on the state 
            of the <see cref="T:XInputium.Trigger"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="activationThreshold"/> 
            is <see cref="F:System.Single.NaN"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="deactivationThreshold"/> 
            is <see cref="F:System.Single.NaN"/>.</exception>
            <seealso cref="T:XInputium.DigitalButton"/>
        </member>
        <member name="M:XInputium.Trigger.ToDigitalButton(System.Single)">
            <summary>
            Gets a new <see cref="T:XInputium.DigitalButton"/> instance that activates 
            (presses) whenever the current <see cref="T:XInputium.Trigger"/>'s axis 
            effective value is equal or greater than the specified threshold.
            </summary>
            <param name="activationThreshold">A number between 0 and 1 that 
            specifies the minimum value, over which the effective axis value 
            of the trigger will activate (press) the button.</param>
            <returns>A new <see cref="T:XInputium.DigitalButton"/> instance that is updated 
            automatically, and reports its state as pressed depending on the state 
            of the <see cref="T:XInputium.Trigger"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="activationThreshold"/> 
            is <see cref="F:System.Single.NaN"/>.</exception>
            <seealso cref="T:XInputium.DigitalButton"/>
        </member>
        <member name="T:XInputium.TriggerUpdateCallback">
            <summary>
            Callback delegate used to update a <see cref="T:XInputium.Trigger"/> 
            instance from external code.
            </summary>
            <param name="value">A value within the 0 and 1 inclusive range, 
            that represents the position of the trigger's axis.</param>
            <param name="time">The amount of time elapsed since the last 
            time this callback was last invoked.</param>
            <seealso cref="T:XInputium.Trigger"/>
        </member>
        <member name="T:XInputium.XInput.Internal.Win32.NativeMethods">
            <summary>
            Provides static Win32 native methods for internal 
            interoperation.
            </summary>
        </member>
        <member name="M:XInputium.XInput.Internal.Win32.NativeMethods.XInputGetState(System.UInt32,XInputium.XInput.Internal.Win32.XINPUT_STATE@)">
            <summary>
            Retrieves the current state of the specified controller.
            </summary>
            <param name="dwUserIndex">Index of the user's controller. 
            Can be a value from 0 to 3.</param>
            <param name="pState">Reference to an <see cref="T:XInputium.XInput.Internal.Win32.XINPUT_STATE"/> 
            structure that receives the current state of the controller.</param>
            <returns>
            If the function succeeds, the return value is 
            <see cref="F:XInputium.XInput.Internal.Win32.Win32ErrorCodes.ERROR_SUCCESS"/>.
            If the controller is not connected, the return value is 
            <see cref="F:XInputium.XInput.Internal.Win32.Win32ErrorCodes.ERROR_DEVICE_NOT_CONNECTED"/>.
            If the function fails, the return value is an error code defined in Winerror.h. 
            The function does not use SetLastError to set the calling thread's last-error code.
            </returns>
            <remarks>
            When <see cref="M:XInputium.XInput.Internal.Win32.NativeMethods.XInputGetState(System.UInt32,XInputium.XInput.Internal.Win32.XINPUT_STATE@)"/> is used to retrieve 
            controller data, the left and right triggers are each reported separately. 
            For legacy reasons, when DirectInput retrieves controller data, the two triggers 
            share the same axis. The legacy behavior is noticeable in the current 
            Game Device Control Panel, which uses DirectInput for controller state.
            </remarks>
        </member>
        <member name="M:XInputium.XInput.Internal.Win32.NativeMethods.XInputSetState(System.UInt32,XInputium.XInput.Internal.Win32.XINPUT_VIBRATION@)">
            <summary>
            Sends data to a connected controller. This function is used 
            to activate the vibration function of a controller.
            </summary>
            <param name="dwUserIndex">Index of the user's controller. 
            Can be a value from 0 to 3.</param>
            <param name="pVibration">Reference to an <see cref="T:XInputium.XInput.Internal.Win32.XINPUT_VIBRATION"/> 
            structure containing the vibration information to send to the controller.</param>
            <returns>
            If the function succeeds, the return value is 
            <see cref="F:XInputium.XInput.Internal.Win32.Win32ErrorCodes.ERROR_SUCCESS"/>.
            If the controller is not connected, the return value is 
            <see cref="F:XInputium.XInput.Internal.Win32.Win32ErrorCodes.ERROR_DEVICE_NOT_CONNECTED"/>.
            If the function fails, the return value is an error code defined in Winerror.h. 
            The function does not use SetLastError to set the calling thread's last-error code.
            </returns>
        </member>
        <member name="F:XInputium.XInput.Internal.Win32.Win32ErrorCodes.ERROR_SUCCESS">
            <summary>
            The operation completed successfully.
            </summary>
        </member>
        <member name="F:XInputium.XInput.Internal.Win32.Win32ErrorCodes.ERROR_DEVICE_NOT_CONNECTED">
            <summary>
            The device is not connected.
            </summary>
        </member>
        <member name="T:XInputium.XInput.Internal.Win32.XINPUT_GAMEPAD">
            <summary>
            Describes the current state of the Xbox 360 Controller.
            </summary>
            <seealso cref="T:XInputium.XInput.Internal.Win32.XINPUT_STATE"/>
        </member>
        <member name="F:XInputium.XInput.Internal.Win32.XINPUT_GAMEPAD.wButtons">
            <summary>
            Flags representing the device digital buttons.
            </summary>
            <seealso cref="T:XInputium.XInput.Internal.Win32.XINPUT_GAMEPAD_wButtons"/>
        </member>
        <member name="F:XInputium.XInput.Internal.Win32.XINPUT_GAMEPAD.bLeftTrigger">
            <summary>
            The current value of the left trigger analog control. 
            The value is between 0 and 255.
            </summary>
        </member>
        <member name="F:XInputium.XInput.Internal.Win32.XINPUT_GAMEPAD.bRightTrigger">
            <summary>
            The current value of the right trigger analog control. 
            The value is between 0 and 255.
            </summary>
        </member>
        <member name="F:XInputium.XInput.Internal.Win32.XINPUT_GAMEPAD.sThumbLX">
            <summary>
            Left thumbstick x-axis value. Each of the thumbstick axis members is a 
            signed value between -32768 and 32767 describing the position of the 
            thumbstick. A value of 0 is centered. Negative values signify down or to 
            the left. Positive values signify up or to the right. The constants 
            XINPUT_GAMEPAD_LEFT_THUMB_DEADZONE or XINPUT_GAMEPAD_RIGHT_THUMB_DEADZONE 
            can be used as a positive and negative value to filter a thumbstick input.
            </summary>
        </member>
        <member name="F:XInputium.XInput.Internal.Win32.XINPUT_GAMEPAD.sThumbLY">
            <summary>
            Left thumbstick y-axis value. The value is between -32768 and 32767.
            </summary>
        </member>
        <member name="F:XInputium.XInput.Internal.Win32.XINPUT_GAMEPAD.sThumbRX">
            <summary>
            Right thumbstick x-axis value. The value is between -32768 and 32767.
            </summary>
        </member>
        <member name="F:XInputium.XInput.Internal.Win32.XINPUT_GAMEPAD.sThumbRY">
            <summary>
            Right thumbstick y-axis value. The value is between -32768 and 32767.
            </summary>
        </member>
        <member name="T:XInputium.XInput.Internal.Win32.XINPUT_STATE">
            <summary>
            Represents the state of a controller.
            </summary>
        </member>
        <member name="F:XInputium.XInput.Internal.Win32.XINPUT_STATE.dwPacketNumber">
            <summary>
            State packet number. The packet number indicates whether there have 
            been any changes in the state of the controller. If the 
            <see cref="F:XInputium.XInput.Internal.Win32.XINPUT_STATE.dwPacketNumber"/> member is the same in sequentially returned
            <see cref="T:XInputium.XInput.Internal.Win32.XINPUT_STATE"/> structures, the controller state has not changed.
            </summary>
        </member>
        <member name="F:XInputium.XInput.Internal.Win32.XINPUT_STATE.Gamepad">
            <summary>
            <see cref="T:XInputium.XInput.Internal.Win32.XINPUT_GAMEPAD"/> structure containing the current state 
            of an Xbox 360 Controller.
            </summary>
            <seealso cref="T:XInputium.XInput.Internal.Win32.XINPUT_GAMEPAD"/>
        </member>
        <member name="T:XInputium.XInput.Internal.Win32.XINPUT_VIBRATION">
            <summary>
            Specifies motor speed levels for the vibration function 
            of a controller.
            </summary>
            <remarks>
            The left motor is the low-frequency rumble motor. The right 
            motor is the high-frequency rumble motor. The two motors are 
            not the same, and they create different vibration effects.
            </remarks>
        </member>
        <member name="F:XInputium.XInput.Internal.Win32.XINPUT_VIBRATION.wLeftMotorSpeed">
            <summary>
            Speed of the left motor. Valid values are in the range 0 to 65,535. 
            Zero signifies no motor use; 65,535 signifies 100 percent motor use.
            </summary>
        </member>
        <member name="F:XInputium.XInput.Internal.Win32.XINPUT_VIBRATION.wRightMotorSpeed">
            <summary>
            Speed of the right motor. Valid values are in the range 0 to 65,535. 
            Zero signifies no motor use; 65,535 signifies 100 percent motor use.
            </summary>
        </member>
        <member name="T:XInputium.XInput.XButtons">
            <summary>
            Exposes constants that represent a button of an 
            XInput controller. These constants can be used 
            as bitwise flags to represent several buttons.
            </summary>
            <seealso cref="T:XInputium.XInput.XInputButton"/>
        </member>
        <member name="F:XInputium.XInput.XButtons.None">
            <summary>
            No button. This is used to represent no buttons.
            </summary>
        </member>
        <member name="F:XInputium.XInput.XButtons.DPadUp">
            <summary>
            D-Pad Up. This is one of the directional buttons.
            </summary>
        </member>
        <member name="F:XInputium.XInput.XButtons.DPadDown">
            <summary>
            D-Pad Down. This is one of the directional buttons.
            </summary>
        </member>
        <member name="F:XInputium.XInput.XButtons.DPadLeft">
            <summary>
            D-Pad Left. This is one of the directional buttons.
            </summary>
        </member>
        <member name="F:XInputium.XInput.XButtons.DPadRight">
            <summary>
            D-Pad Right. This is one of the directional buttons.
            </summary>
        </member>
        <member name="F:XInputium.XInput.XButtons.Start">
            <summary>
            The Start button.
            </summary>
        </member>
        <member name="F:XInputium.XInput.XButtons.Back">
            <summary>
            The Back button.
            </summary>
        </member>
        <member name="F:XInputium.XInput.XButtons.LS">
            <summary>
            The LS (Left Stick) button.
            </summary>
        </member>
        <member name="F:XInputium.XInput.XButtons.RS">
            <summary>
            The RS (Right Stick) button.
            </summary>
        </member>
        <member name="F:XInputium.XInput.XButtons.LB">
            <summary>
            The LB (Left Shoulder) button.
            </summary>
        </member>
        <member name="F:XInputium.XInput.XButtons.RB">
            <summary>
            The RB (Right Shoulder).
            </summary>
        </member>
        <member name="F:XInputium.XInput.XButtons.A">
            <summary>
            The A button.
            </summary>
        </member>
        <member name="F:XInputium.XInput.XButtons.B">
            <summary>
            The B button.
            </summary>
        </member>
        <member name="F:XInputium.XInput.XButtons.X">
            <summary>
            The X button.
            </summary>
        </member>
        <member name="F:XInputium.XInput.XButtons.Y">
            <summary>
            The Y button.
            </summary>
        </member>
        <member name="T:XInputium.XInput.XGamepad">
            <summary>
            Represents an XInput game controller and provides the 
            means to obtain and change the state of a controller, 
            as well as changing what controller device is 
            providing state information. Inherits from 
            <see cref="T:XInputium.LogicalInputDevice`2"/>.
            </summary>
            <remarks>
            <see cref="T:XInputium.XInput.XGamepad"/> class provides you high-level 
            access to an underlying XInput controller. It uses an 
            <see cref="T:XInputium.XInput.XInputDevice"/> to communicate with the 
            underlying device and is an abstraction layer over the 
            <see cref="T:XInputium.XInput.XInputDevice"/>, adding additional functionality.
            <br/><br/>
            You can use <see cref="T:XInputium.XInput.XInputDevice"/> instances to get 
            and set the state of an XInput controller, without using 
            <see cref="T:XInputium.XInput.XGamepad"/> class. However, 
            <see cref="T:XInputium.XInput.XGamepad"/> adds additional features that 
            can simplify your work flow, at the cost of adding 
            more complexity. If you don't need these additional 
            features, consider using <see cref="T:XInputium.XInput.XInputDevice"/>, as 
            it is a more lightweight alternative to 
            <see cref="T:XInputium.XInput.XGamepad"/>.
            <br/><br/>
            An <see cref="T:XInputium.XInput.XGamepad"/> instance represents a logical 
            game controller device, while an <see cref="T:XInputium.XInput.XInputDevice"/> 
            instance represents a specific physical device. This means 
            you can switch the underlying <see cref="T:XInputium.XInput.XInputDevice"/> 
            of an <see cref="T:XInputium.XInput.XGamepad"/> instance to allow that 
            instance to use a different underlying physical device. 
            You do this by setting the value of 
            <see cref="P:XInputium.LogicalInputDevice`2.Device"/> 
            property with a different <see cref="T:XInputium.XInput.XInputDevice"/> 
            instance. The advantage of this behavior is that you will 
            keep any configurations you have made to the 
            <see cref="T:XInputium.XInput.XGamepad"/> (for example, joystick dead-zones) 
            and you don't need to manage your own logic for event 
            registering and unregistering when you need to switch 
            between physical XInput devices.
            </remarks>
            <seealso cref="T:XInputium.LogicalInputDevice`2"/>
            <seealso cref="T:XInputium.XInput.XInputDevice"/>
            <seealso cref="T:XInputium.InputObject"/>
        </member>
        <member name="F:XInputium.XInput.XGamepad.StoppedMotorSpeed">
            <summary>
            The speed of a device motor when it is fully stopped.
            </summary>
            <seealso cref="P:XInputium.XInput.XGamepad.LeftMotorSpeed"/>
            <seealso cref="P:XInputium.XInput.XGamepad.RightMotorSpeed"/>
        </member>
        <member name="M:XInputium.XInput.XGamepad.#ctor(XInputium.XInput.XInputDevice,XInputium.InputLoopWatch)">
            <summary>
            Initializes a new instance of an <see cref="T:XInputium.XInput.XGamepad"/> 
            class, that uses the specified <see cref="T:XInputium.XInput.XInputDevice"/> 
            instance to communicate with the controller device and 
            that measures time using the specified 
            <see cref="T:XInputium.InputLoopWatch"/>.
            </summary>
            <param name="device"><see cref="T:XInputium.XInput.XInputDevice"/> instance 
            that will be used to perform communication with the 
            underlying device. <see langword="null"/> can be 
            used to specify no device.</param>
            <param name="watch"><see cref="T:XInputium.InputLoopWatch"/> instance 
            that will be used to measure time within the 
            <see cref="T:XInputium.XInput.XGamepad"/>. Use <see langword="null"/> to 
            specify the use of the default watch.</param>
            <remarks>
            If you pass <see langword="null"/> to <paramref name="device"/>, 
            no <see cref="T:XInputium.XInput.XInputDevice"/> will be used, making the 
            <see cref="T:XInputium.XInput.XGamepad"/> instance unable to communicate with 
            the underlying controller device. You can change the 
            underlying device later, by setting the value of 
            <see cref="P:XInputium.LogicalInputDevice`2.Device"/> 
            property.
            </remarks>
        </member>
        <member name="M:XInputium.XInput.XGamepad.#ctor(XInputium.XInput.XInputDevice)">
            <summary>
            Initializes a new instance of an <see cref="T:XInputium.XInput.XGamepad"/> 
            class, that uses the specified <see cref="T:XInputium.XInput.XInputDevice"/> 
            instance to communicate with the controller device.
            </summary>
            <param name="device"><see cref="T:XInputium.XInput.XInputDevice"/> instance 
            that will be used to perform communication with the 
            underlying device. <see langword="null"/> can be 
            used to specify no device.</param>
            <remarks>
            If you pass <see langword="null"/> to <paramref name="device"/>, 
            no <see cref="T:XInputium.XInput.XInputDevice"/> will be used, making the 
            <see cref="T:XInputium.XInput.XGamepad"/> instance unable to communicate with 
            the underlying controller device. You can change the 
            underlying device later, by setting the value of 
            <see cref="P:XInputium.LogicalInputDevice`2.Device"/> 
            property.
            </remarks>
        </member>
        <member name="M:XInputium.XInput.XGamepad.#ctor">
            <summary>
            Initializes a new instance of an <see cref="T:XInputium.XInput.XGamepad"/> 
            class that uses the first available connected controller 
            as its <see cref="T:XInputium.XInput.XInputDevice"/> or, if no controller 
            is available, uses no underlying device.
            </summary>
        </member>
        <member name="M:XInputium.XInput.XGamepad.#ctor(XInputium.XInput.XInputUserIndex)">
            <summary>
            Initializes a new instance of an <see cref="T:XInputium.XInput.XGamepad"/> 
            class, that uses an <see cref="T:XInputium.XInput.XInputDevice"/> that is 
            associated with the specified user index.
            </summary>
            <param name="userIndex"><see cref="T:XInputium.XInput.XInputUserIndex"/> 
            constant that specifies the index of the XInput 
            controller.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="userIndex"/> is not a defined constant 
            of an <see cref="T:XInputium.XInput.XInputUserIndex"/> enumeration.</exception>
        </member>
        <member name="E:XInputium.XInput.XGamepad.ButtonStateChanged">
            <summary>
            It's invoked whenever the pressed state of an XInput button 
            changes.
            </summary>
            <seealso cref="E:XInputium.XInput.XGamepad.ButtonPressed"/>
            <seealso cref="E:XInputium.XInput.XGamepad.ButtonReleased"/>
            <seealso cref="M:XInputium.XInput.XGamepad.OnButtonStateChanged(XInputium.DigitalButtonEventArgs{XInputium.XInput.XInputButton})"/>
            <seealso cref="P:XInputium.XInput.XGamepad.Buttons"/>
        </member>
        <member name="E:XInputium.XInput.XGamepad.ButtonPressed">
            <summary>
            It's invoked whenever an XInput button is pressed â€” 
            that is, its state is changed from released to pressed.
            </summary>
            <seealso cref="E:XInputium.XInput.XGamepad.ButtonReleased"/>
            <seealso cref="E:XInputium.XInput.XGamepad.ButtonStateChanged"/>
            <seealso cref="M:XInputium.XInput.XGamepad.OnButtonPressed(XInputium.DigitalButtonEventArgs{XInputium.XInput.XInputButton})"/>
        </member>
        <member name="E:XInputium.XInput.XGamepad.ButtonReleased">
            <summary>
            It's invoked whenever an XInput button is released â€” 
            that is, its state changed from pressed to released.
            </summary>
            <seealso cref="E:XInputium.XInput.XGamepad.ButtonPressed"/>
            <seealso cref="E:XInputium.XInput.XGamepad.ButtonStateChanged"/>
            <seealso cref="M:XInputium.XInput.XGamepad.OnButtonReleased(XInputium.DigitalButtonEventArgs{XInputium.XInput.XInputButton})"/>
        </member>
        <member name="E:XInputium.XInput.XGamepad.LeftJoystickMove">
            <summary>
            It's invoked whenever the effective position of the 
            left joystick changes.
            </summary>
            <seealso cref="E:XInputium.XInput.XGamepad.RightJoystickMove"/>
        </member>
        <member name="E:XInputium.XInput.XGamepad.RightJoystickMove">
            <summary>
            It's invoked whenever the effective position of the 
            right joystick changes.
            </summary>
            <seealso cref="E:XInputium.XInput.XGamepad.LeftJoystickMove"/>
        </member>
        <member name="E:XInputium.XInput.XGamepad.LeftTriggerMove">
            <summary>
            It's invoked whenever the effective position of the 
            left trigger changes.
            </summary>
            <seealso cref="E:XInputium.XInput.XGamepad.RightTriggerMove"/>
        </member>
        <member name="E:XInputium.XInput.XGamepad.RightTriggerMove">
            <summary>
            It's invoked whenever the effective position of the 
            right trigger changes.
            </summary>
            <seealso cref="E:XInputium.XInput.XGamepad.LeftTriggerMove"/>
        </member>
        <member name="P:XInputium.XInput.XGamepad.IsVibrationEnabled">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> that enables or disables the vibration 
            of the gamepad.
            </summary>
            <value><see langword="true"/> to enable vibration, or <see langword="false"/> 
            to disallow any vibration and stop any currently rotating motor. 
            The default is <see langword="true"/>.</value>
            <remarks>
            The value of this property will be effectively applied on the device 
            during the next call to 
            <see cref="M:XInputium.LogicalInputDevice`2.Update"/> method.
            </remarks>
            <seealso cref="P:XInputium.XInput.XGamepad.LeftMotorSpeed"/>
            <seealso cref="P:XInputium.XInput.XGamepad.RightMotorSpeed"/>
        </member>
        <member name="P:XInputium.XInput.XGamepad.LeftMotorSpeed">
            <summary>
            Gets or sets the left motor rotation speed.
            </summary>
            <value>A number between the 0 and 1 inclusive range, that specifies 
            the motor rotation speed, where 0 means the motor is stopped and 1 
            means the motor is running at full speed; if you specify 
            <see cref="F:System.Single.NaN"/>, it will also stop the motor, being recognized 
            as 0. The default value is <see cref="F:XInputium.XInput.XGamepad.StoppedMotorSpeed"/>.</value>
            <remarks>
            The value of this property will be effectively applied on the device 
            during the next call to 
            <see cref="M:XInputium.LogicalInputDevice`2.Update"/> method. 
            <br/><br/>
            Note that the device motor will only rotate when the value of 
            <see cref="P:XInputium.XInput.XGamepad.IsVibrationEnabled"/> property is <see langword="true"/>. 
            While <see cref="P:XInputium.XInput.XGamepad.IsVibrationEnabled"/> property is set to 
            <see langword="false"/>, the device motors will remain stopped, but 
            <see cref="P:XInputium.XInput.XGamepad.LeftMotorSpeed"/> will still report the value you set to 
            it. To get the actual device left motor speed, use 
            <see cref="P:XInputium.XInput.XInputDevice.LeftMotorSpeed"/> property.
            </remarks>
            <seealso cref="P:XInputium.XInput.XGamepad.RightMotorSpeed"/>
            <seealso cref="P:XInputium.XInput.XGamepad.IsVibrationEnabled"/>
        </member>
        <member name="P:XInputium.XInput.XGamepad.RightMotorSpeed">
            <summary>
            Gets or sets the left motor rotation speed.
            </summary>
            <value>A number between the 0 and 1 inclusive range, that specifies 
            the motor rotation speed, where 0 means the motor is stopped and 1 
            means the motor is running at full speed; if you specify 
            <see cref="F:System.Single.NaN"/>, it will also stop the motor, being recognized 
            as 0. The default value is <see cref="F:XInputium.XInput.XGamepad.StoppedMotorSpeed"/>.</value>
            <remarks>
            The value of this property will be effectively applied on the device 
            during the next call to 
            <see cref="M:XInputium.LogicalInputDevice`2.Update"/> method.
            <br/><br/>
            Note that the device motor will only rotate when the value of 
            <see cref="P:XInputium.XInput.XGamepad.IsVibrationEnabled"/> property is <see langword="true"/>. 
            While <see cref="P:XInputium.XInput.XGamepad.IsVibrationEnabled"/> property is set to 
            <see langword="false"/>, the device motors will remain stopped, but 
            <see cref="P:XInputium.XInput.XGamepad.RightMotorSpeed"/> will still report the value you set to 
            it. To get the actual device left motor speed, use 
            <see cref="P:XInputium.XInput.XInputDevice.RightMotorSpeed"/> property.
            </remarks>
            <seealso cref="P:XInputium.XInput.XGamepad.LeftMotorSpeed"/>
            <seealso cref="P:XInputium.XInput.XGamepad.IsVibrationEnabled"/>
        </member>
        <member name="P:XInputium.XInput.XGamepad.VibrationFactor">
            <summary>
            Gets or sets the multiplier for the device motors speed.
            </summary>
            <value>A number equal to or greater than 0, by which 
            <see cref="P:XInputium.XInput.XGamepad.LeftMotorSpeed"/> and <see cref="P:XInputium.XInput.XGamepad.RightMotorSpeed"/> 
            will be multiplied. The default is 1.</value>
            <exception cref="T:System.ArgumentException">The value being set to the property 
            is <see cref="F:System.Single.NaN"/>.</exception>
            <remarks>
            The value of this property will be effectively applied on the device 
            during the next call to 
            <see cref="M:XInputium.LogicalInputDevice`2.Update"/> method.
            </remarks>
            <seealso cref="P:XInputium.XInput.XGamepad.IsVibrationEnabled"/>
            <seealso cref="P:XInputium.XInput.XGamepad.LeftMotorSpeed"/>
            <seealso cref="P:XInputium.XInput.XGamepad.RightMotorSpeed"/>
        </member>
        <member name="P:XInputium.XInput.XGamepad.Buttons">
            <summary>
            Gets the <see cref="T:XInputium.XInput.XInputButtonSet"/> that encapsulates 
            information about the state of the controller's buttons.
            </summary>
            <seealso cref="T:XInputium.XInput.XInputButtonSet"/>
            <seealso cref="T:XInputium.XInput.XInputButton"/>
        </member>
        <member name="P:XInputium.XInput.XGamepad.LeftJoystick">
            <summary>
            Gets the <see cref="T:XInputium.Joystick"/> instance that 
            encapsulates information about the current state of 
            the controllers's left joystick.
            </summary>
            <seealso cref="P:XInputium.XInput.XGamepad.RightJoystick"/>
        </member>
        <member name="P:XInputium.XInput.XGamepad.RightJoystick">
            <summary>
            Gets the <see cref="T:XInputium.Joystick"/> instance that 
            encapsulates information about the current state of 
            the controllers's right joystick.
            </summary>
            <seealso cref="P:XInputium.XInput.XGamepad.LeftJoystick"/>
        </member>
        <member name="P:XInputium.XInput.XGamepad.LeftTrigger">
            <summary>
            Gets the <see cref="T:XInputium.Trigger"/> instance that 
            encapsulates information about the current state of 
            the controllers's left trigger.
            </summary>
            <seealso cref="P:XInputium.XInput.XGamepad.RightTrigger"/>
        </member>
        <member name="P:XInputium.XInput.XGamepad.RightTrigger">
            <summary>
            Gets the <see cref="T:XInputium.Trigger"/> instance that 
            encapsulates information about the current state of 
            the controllers's right trigger.
            </summary>
            <seealso cref="P:XInputium.XInput.XGamepad.LeftTrigger"/>
        </member>
        <member name="M:XInputium.XInput.XGamepad.OnButtonStateChanged(XInputium.DigitalButtonEventArgs{XInputium.XInput.XInputButton})">
            <summary>
            Raises the <see cref="E:XInputium.XInput.XGamepad.ButtonStateChanged"/> event.
            </summary>
            <param name="e">Information about the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="e"/> is <see langword="null"/>.</exception>
            <seealso cref="E:XInputium.XInput.XGamepad.ButtonStateChanged"/>
        </member>
        <member name="M:XInputium.XInput.XGamepad.OnButtonPressed(XInputium.DigitalButtonEventArgs{XInputium.XInput.XInputButton})">
            <summary>
            Raises the <see cref="E:XInputium.XInput.XGamepad.ButtonPressed"/> event.
            </summary>
            <param name="e">Information about the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="e"/> is <see langword="null"/>.</exception>
            <seealso cref="E:XInputium.XInput.XGamepad.ButtonPressed"/>
        </member>
        <member name="M:XInputium.XInput.XGamepad.OnButtonReleased(XInputium.DigitalButtonEventArgs{XInputium.XInput.XInputButton})">
            <summary>
            Raises the <see cref="E:XInputium.XInput.XGamepad.ButtonReleased"/> event.
            </summary>
            <param name="e">Information about the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="e"/> is <see langword="null"/>.</exception>
            <seealso cref="E:XInputium.XInput.XGamepad.ButtonReleased"/>
        </member>
        <member name="M:XInputium.XInput.XGamepad.OnLeftJoystickMove">
            <summary>
            Raises the <see cref="E:XInputium.XInput.XGamepad.LeftJoystickMove"/> 
            event.
            </summary>
            <seealso cref="E:XInputium.XInput.XGamepad.LeftJoystickMove"/>
        </member>
        <member name="M:XInputium.XInput.XGamepad.OnRightJoystickMove">
            <summary>
            Raises the <see cref="E:XInputium.XInput.XGamepad.RightJoystickMove"/> 
            event.
            </summary>
            <seealso cref="E:XInputium.XInput.XGamepad.RightJoystickMove"/>
        </member>
        <member name="M:XInputium.XInput.XGamepad.OnLeftTriggerMove">
            <summary>
            Raises the <see cref="E:XInputium.XInput.XGamepad.LeftTriggerMove"/> 
            event.
            </summary>
            <seealso cref="E:XInputium.XInput.XGamepad.LeftTriggerMove"/>
        </member>
        <member name="M:XInputium.XInput.XGamepad.OnRightTriggerMove">
            <summary>
            Raises the <see cref="E:XInputium.XInput.XGamepad.RightTriggerMove"/> 
            event.
            </summary>
            <seealso cref="E:XInputium.XInput.XGamepad.RightTriggerMove"/>
        </member>
        <member name="M:XInputium.XInput.XGamepad.ResetLogicalState">
            <summary>
            Resets the <see cref="T:XInputium.XInput.XGamepad"/> to its no-device state. 
            Overrides 
            <see cref="M:XInputium.LogicalInputDevice`2.ResetLogicalState"/>.
            </summary>
            <seealso cref="M:XInputium.XInput.XGamepad.UpdateLogicalState"/>
        </member>
        <member name="M:XInputium.XInput.XGamepad.UpdateLogicalState">
            <summary>
            Updates the logical state of the <see cref="T:XInputium.XInput.XGamepad"/> 
            based on the current device state. Overrides 
            <see cref="M:XInputium.LogicalInputDevice`2.UpdateLogicalState"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">No device is set. 
            <see cref="P:XInputium.LogicalInputDevice`2.Device"/> property 
            is <see langword="null"/>.</exception>
            <seealso cref="M:XInputium.XInput.XGamepad.ResetLogicalState"/>
            <seealso cref="M:XInputium.XInput.XGamepad.SetDeviceState"/>
        </member>
        <member name="M:XInputium.XInput.XGamepad.SetDeviceState">
            <summary>
            Sets the physical device state, based on the current logical 
            state. More specifically, sets the device's motors rotation 
            speed. Overrides 
            <see cref="M:XInputium.LogicalInputDevice`2.SetDeviceState"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">No device is set. 
            <see cref="P:XInputium.LogicalInputDevice`2.Device"/> 
            is <see langword="null"/>.</exception>
            <seealso cref="M:XInputium.XInput.XGamepad.UpdateLogicalState"/>
        </member>
        <member name="M:XInputium.XInput.XGamepad.RegisterButtonPressedEvent(XInputium.XInput.XButtons,XInputium.DigitalButtonInputEventHandler{XInputium.XInput.XInputButton})">
            <summary>
            Registers and returns a <see cref="T:XInputium.DigitalButtonInputEvent`1"/> 
            that is triggered when the specified button changes its state 
            from released to pressed, meaning the user has just tapped 
            the button.
            </summary>
            <param name="button"><see cref="T:XInputium.XInput.XButtons"/> constant that 
            specifies the XInput button to listen for.</param>
            <param name="callback">Callback that will be called when 
            the event is triggered.</param>
            <returns>The new <see cref="T:XInputium.DigitalButtonInputEvent`1"/> 
            that was registered.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="button"/> 
            is not a defined constant in an <see cref="T:XInputium.XInput.XButtons"/> 
            enumeration.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="button"/> 
            is <see cref="F:XInputium.XInput.XButtons.None"/>.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="callback"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:XInputium.XInput.XGamepad.RegisterButtonReleasedEvent(XInputium.XInput.XButtons,XInputium.DigitalButtonInputEventHandler{XInputium.XInput.XInputButton})">
            <summary>
            Registers and returns a <see cref="T:XInputium.DigitalButtonInputEvent`1"/> 
            that is triggered when the specified button changes its state 
            from pressed to released.
            </summary>
            <param name="button"><see cref="T:XInputium.XInput.XButtons"/> constant that 
            specifies the XInput button to listen for.</param>
            <param name="callback">Callback that will be called when 
            the event is triggered.</param>
            <returns>The new <see cref="T:XInputium.DigitalButtonInputEvent`1"/> that 
            was registered.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="button"/> 
            is not a defined constant in an <see cref="T:XInputium.XInput.XButtons"/> 
            enumeration.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="button"/> 
            is <see cref="F:XInputium.XInput.XButtons.None"/>.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="callback"/> is <see langword="null"/>.</exception>
            <seealso cref="M:XInputium.XInput.XGamepad.RegisterButtonPressedEvent(XInputium.XInput.XButtons,XInputium.DigitalButtonInputEventHandler{XInputium.XInput.XInputButton})"/>
            <seealso cref="M:XInputium.XInput.XGamepad.RegisterButtonHoldEvent(XInputium.XInput.XButtons,System.TimeSpan,XInputium.DigitalButtonInputEventHandler{XInputium.XInput.XInputButton})"/>
        </member>
        <member name="M:XInputium.XInput.XGamepad.RegisterButtonHoldEvent(XInputium.XInput.XButtons,System.TimeSpan,XInputium.DigitalButtonInputEventHandler{XInputium.XInput.XInputButton})">
            <summary>
            Registers and returns a <see cref="T:XInputium.DigitalButtonInputEvent`1"/> 
            that is triggered once when the specified button is held by 
            the specified duration.
            </summary>
            <param name="button"><see cref="T:XInputium.XInput.XButtons"/> constant that 
            specifies the XInput button to listen for.</param>
            <param name="holdDuration">The amount of time the user must 
            hold down the button for the event to fire. If you specify 
            <see cref="F:System.TimeSpan.Zero"/>, this event will behave like a 
            pressed event.</param>
            <param name="callback">Callback that will be called when 
            the event is triggered.</param>
            <returns>The new <see cref="T:XInputium.DigitalButtonInputEvent`1"/> that 
            was registered.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="button"/> 
            is not a defined constant in an <see cref="T:XInputium.XInput.XButtons"/> 
            enumeration.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="button"/> 
            is <see cref="F:XInputium.XInput.XButtons.None"/>.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="callback"/> is <see langword="null"/>.</exception>
            <remarks>
            The returned registered <see cref="T:XInputium.DigitalButtonInputEvent`1"/> 
            will be triggered once when the user presses and holds the button 
            for the specified amount of time. Once the event is triggered, 
            it will only be triggered again after the user releases the 
            button and repeats the same action (pressing and holding the 
            button for <paramref name="holdDuration"/>).
            </remarks>
            <seealso cref="M:XInputium.XInput.XGamepad.RegisterButtonPressedEvent(XInputium.XInput.XButtons,XInputium.DigitalButtonInputEventHandler{XInputium.XInput.XInputButton})"/>
            <seealso cref="M:XInputium.XInput.XGamepad.RegisterButtonReleasedEvent(XInputium.XInput.XButtons,XInputium.DigitalButtonInputEventHandler{XInputium.XInput.XInputButton})"/>
        </member>
        <member name="M:XInputium.XInput.XGamepad.RegisterButtonRepeatEvent(XInputium.XInput.XButtons,System.TimeSpan,System.TimeSpan,System.Single,System.TimeSpan,System.TimeSpan,XInputium.DigitalButtonInputEventHandler{XInputium.XInput.XInputButton})">
            <summary>
            Registers and returns a <see cref="T:XInputium.RepeatDigitalButtonInputEvent`1"/> 
            that is triggered repeatedly while the specified button is held, and 
            uses the specified acceleration parameters for acceleration or 
            deceleration of repeat delay times.
            </summary>
            <param name="button"><see cref="T:XInputium.XInput.XButtons"/> constant that 
            specifies the XInput button to listen for.</param>
            <param name="initialDelay">Amount of time the button must be 
            held for the repeating to start.</param>
            <param name="repeatDelay">Base amount of time to wait between each 
            repeat.</param>
            <param name="accelerationRatio">A number greater than 0, that specifies 
            the acceleration ratio of the <paramref name="repeatDelay"/> time that 
            will be applied on each triggering repeat. A value less than 1 causes 
            the repeats to be slower, more than 1 causes the repeats to be faster, 
            and 1 uses no acceleration or deceleration.</param>
            <param name="minRepeatDelay">When <paramref name="accelerationRatio"/> 
            is greater than 1, causing the repeat delay time to be shorter on each 
            triggering repeat, this specifies the minimum delay time allowed between 
            each repeat.</param>
            <param name="maxRepeatDelay">When <paramref name="accelerationRatio"/> 
            is lower than 1, causing the repeat delay time to be longer on each 
            triggering repeat, this specifies the maximum delay time allowed between 
            each repeat.</param>
            <param name="callback">Callback that will be called when 
            the event is triggered.</param>
            <returns>The new <see cref="T:XInputium.RepeatDigitalButtonInputEvent`1"/> that 
            was registered.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="button"/> 
            is not a defined constant in an <see cref="T:XInputium.XInput.XButtons"/> 
            enumeration.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="callback"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="button"/> 
            is <see cref="F:XInputium.XInput.XButtons.None"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="accelerationRatio"/> 
            is <see cref="F:System.Single.NaN"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="accelerationRatio"/> is equal to or lower than 0.</exception>
        </member>
        <member name="M:XInputium.XInput.XGamepad.RegisterButtonRepeatEvent(XInputium.XInput.XButtons,System.TimeSpan,System.TimeSpan,XInputium.DigitalButtonInputEventHandler{XInputium.XInput.XInputButton})">
            <summary>
            Registers and returns a <see cref="T:XInputium.RepeatDigitalButtonInputEvent`1"/> 
            that is triggered repeatedly while the specified button is held.
            </summary>
            <param name="button"><see cref="T:XInputium.XInput.XButtons"/> constant that 
            specifies the XInput button to listen for.</param>
            <param name="initialDelay">Amount of time the button must be 
            held for the repeating to start.</param>
            <param name="repeatDelay">Amount of time to wait between each 
            repeat.</param>
            <param name="callback">Callback that will be called when 
            the event is triggered.</param>
            <returns>The new <see cref="T:XInputium.RepeatDigitalButtonInputEvent`1"/> that 
            was registered.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="button"/> 
            is not a defined constant in an <see cref="T:XInputium.XInput.XButtons"/> 
            enumeration.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="button"/> 
            is <see cref="F:XInputium.XInput.XButtons.None"/>.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="callback"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:XInputium.XInput.XInputButton">
            <summary>
            Implements a <see cref="T:XInputium.DigitalButton"/> that represents 
            an XInput button.
            </summary>
            <seealso cref="T:XInputium.DigitalButton"/>
            <seealso cref="T:XInputium.XInput.XInputButtonSet"/>
            <seealso cref="T:XInputium.XInput.XButtons"/>
        </member>
        <member name="M:XInputium.XInput.XInputButton.#ctor(XInputium.XInput.XButtons,XInputium.DigitalButtonUpdateCallback@)">
            <summary>
            Initializes a new instance of an <see cref="T:XInputium.XInput.XInputButton"/> 
            class that represents the specified button and supports 
            state updating.
            </summary>
            <param name="button">An <see cref="T:XInputium.XInput.XButtons"/> constant 
            that represents the XInput button that will be associated 
            with the <see cref="T:XInputium.XInput.XInputButton"/>.</param>
            <param name="updateCallback">Variable that will be set with 
            a <see cref="T:XInputium.DigitalButtonUpdateCallback"/> delegate that 
            you can invoke from your code to update the state of the 
            new <see cref="T:XInputium.XInput.XInputButton"/> instance.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="button"/> is not a defined constant of an 
            <see cref="T:XInputium.XInput.XButtons"/> enumeration or it is 
            <see cref="F:XInputium.XInput.XButtons.None"/>.</exception>
        </member>
        <member name="M:XInputium.XInput.XInputButton.#ctor(XInputium.XInput.XButtons,System.Boolean)">
            <summary>
            Initializes a new instance of an <see cref="T:XInputium.XInput.XInputButton"/> 
            class that represents the specified button and has the 
            specified immutable state.
            </summary>
            <param name="button">An <see cref="T:XInputium.XInput.XButtons"/> constant 
            that represents the XInput button that will be associated 
            with the <see cref="T:XInputium.XInput.XInputButton"/>.</param>
            <param name="isPressed"><see langword="true"/> to indicate 
            the button is currently being pressed or 
            <see langword="false"/> to indicate the button is currently 
            in the released state.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="button"/> is not a defined constant of an 
            <see cref="T:XInputium.XInput.XButtons"/> enumeration or it is 
            <see cref="F:XInputium.XInput.XButtons.None"/>.</exception>
        </member>
        <member name="P:XInputium.XInput.XInputButton.Button">
            <summary>
            Gets the <see cref="T:XInputium.XInput.XButtons"/> constant that represents 
            the XInput button associated with the current 
            <see cref="T:XInputium.XInput.XInputButton"/> instance.
            </summary>
        </member>
        <member name="M:XInputium.XInput.XInputButton.ToString">
            <summary>
            Gets the <see cref="T:System.String"/> representation of the 
            current <see cref="T:XInputium.XInput.XInputButton"/> instance.
            </summary>
            <returns>The <see cref="T:System.String"/> representation of 
            the current <see cref="T:XInputium.XInput.XInputButton"/> instance.</returns>
            <seealso cref="P:XInputium.XInput.XInputButton.Button"/>
        </member>
        <member name="T:XInputium.XInput.XInputButtonSet">
            <summary>
            Encapsulates a set of <see cref="T:XInputium.XInput.XInputButton"/> objects 
            that represent all of the buttons of an XInput controller, 
            and provides the means to manage the state of all buttons.
            </summary>
            <seealso cref="T:XInputium.XInput.XInputButton"/>
            <seealso cref="T:XInputium.XInput.XGamepad"/>
        </member>
        <member name="M:XInputium.XInput.XInputButtonSet.#ctor(XInputium.XInput.XInputButtonSetUpdateCallback@)">
            <summary>
            Initializes a new instance of an <see cref="T:XInputium.XInput.XInputButtonSet"/> 
            class, that supports updating of the buttons state.
            </summary>
            <param name="updateCallback">A variable that will be set with an 
            <see cref="T:XInputium.XInput.XInputButtonSetUpdateCallback"/> delegate, that can be 
            used to update the state of the <see cref="T:XInputium.XInput.XInputButtonSet"/> 
            from external code.</param>
        </member>
        <member name="M:XInputium.XInput.XInputButtonSet.#ctor(XInputium.XInput.XButtons)">
            <summary>
            Initializes a new instance of an <see cref="T:XInputium.XInput.XInputButtonSet"/> 
            class that represents the immutable state of the 
            buttons determined by the specified button flags.
            </summary>
            <param name="buttonsState">Flags containing the 
            currently pressed buttons.</param>
        </member>
        <member name="E:XInputium.XInput.XInputButtonSet.ButtonStateChanged">
            <summary>
            It's invoked whenever the pressed state of a button changes.
            </summary>
            <seealso cref="M:XInputium.XInput.XInputButtonSet.OnButtonStateChanged(XInputium.DigitalButtonEventArgs{XInputium.XInput.XInputButton})"/>
        </member>
        <member name="P:XInputium.XInput.XInputButtonSet.Buttons">
            <summary>
            Gets the <see cref="T:XInputium.XInput.XButtons"/> flags that specify 
            what buttons are currently being pressed.
            </summary>
        </member>
        <member name="P:XInputium.XInput.XInputButtonSet.DPadUp">
            <summary>
            Gets the <see cref="T:XInputium.XInput.XInputButton"/> instance that 
            represents the XInput button D-Pad Up.
            </summary>
            <seealso cref="T:XInputium.XInput.XInputButton"/>
        </member>
        <member name="P:XInputium.XInput.XInputButtonSet.DPadDown">
            <summary>
            Gets the <see cref="T:XInputium.XInput.XInputButton"/> instance that 
            represents the XInput button D-Pad Down.
            </summary>
            <seealso cref="T:XInputium.XInput.XInputButton"/>
        </member>
        <member name="P:XInputium.XInput.XInputButtonSet.DPadLeft">
            <summary>
            Gets the <see cref="T:XInputium.XInput.XInputButton"/> instance that 
            represents the XInput button D-Pad Left.
            </summary>
            <seealso cref="T:XInputium.XInput.XInputButton"/>
        </member>
        <member name="P:XInputium.XInput.XInputButtonSet.DPadRight">
            <summary>
            Gets the <see cref="T:XInputium.XInput.XInputButton"/> instance that 
            represents the XInput button D-Pad Right.
            </summary>
            <seealso cref="T:XInputium.XInput.XInputButton"/>
        </member>
        <member name="P:XInputium.XInput.XInputButtonSet.Start">
            <summary>
            Gets the <see cref="T:XInputium.XInput.XInputButton"/> instance that 
            represents the XInput button Start.
            </summary>
            <seealso cref="T:XInputium.XInput.XInputButton"/>
        </member>
        <member name="P:XInputium.XInput.XInputButtonSet.Back">
            <summary>
            Gets the <see cref="T:XInputium.XInput.XInputButton"/> instance that 
            represents the XInput button Back.
            </summary>
            <seealso cref="T:XInputium.XInput.XInputButton"/>
        </member>
        <member name="P:XInputium.XInput.XInputButtonSet.A">
            <summary>
            Gets the <see cref="T:XInputium.XInput.XInputButton"/> instance that 
            represents the XInput button A.
            </summary>
            <seealso cref="T:XInputium.XInput.XInputButton"/>
        </member>
        <member name="P:XInputium.XInput.XInputButtonSet.B">
            <summary>
            Gets the <see cref="T:XInputium.XInput.XInputButton"/> instance that 
            represents the XInput button B.
            </summary>
            <seealso cref="T:XInputium.XInput.XInputButton"/>
        </member>
        <member name="P:XInputium.XInput.XInputButtonSet.X">
            <summary>
            Gets the <see cref="T:XInputium.XInput.XInputButton"/> instance that 
            represents the XInput button X.
            </summary>
            <seealso cref="T:XInputium.XInput.XInputButton"/>
        </member>
        <member name="P:XInputium.XInput.XInputButtonSet.Y">
            <summary>
            Gets the <see cref="T:XInputium.XInput.XInputButton"/> instance that 
            represents the XInput button Y.
            </summary>
            <seealso cref="T:XInputium.XInput.XInputButton"/>
        </member>
        <member name="P:XInputium.XInput.XInputButtonSet.LB">
            <summary>
            Gets the <see cref="T:XInputium.XInput.XInputButton"/> instance that 
            represents the XInput button Left Shoulder.
            </summary>
            <seealso cref="T:XInputium.XInput.XInputButton"/>
        </member>
        <member name="P:XInputium.XInput.XInputButtonSet.RB">
            <summary>
            Gets the <see cref="T:XInputium.XInput.XInputButton"/> instance that 
            represents the XInput button Right Shoulder.
            </summary>
            <seealso cref="T:XInputium.XInput.XInputButton"/>
        </member>
        <member name="P:XInputium.XInput.XInputButtonSet.LS">
            <summary>
            Gets the <see cref="T:XInputium.XInput.XInputButton"/> instance that 
            represents the XInput button Left Stick.
            </summary>
            <seealso cref="T:XInputium.XInput.XInputButton"/>
        </member>
        <member name="P:XInputium.XInput.XInputButtonSet.RS">
            <summary>
            Gets the <see cref="T:XInputium.XInput.XInputButton"/> instance that 
            represents the XInput button Right Stick.
            </summary>
            <seealso cref="T:XInputium.XInput.XInputButton"/>
        </member>
        <member name="P:XInputium.XInput.XInputButtonSet.Item(XInputium.XInput.XButtons)">
            <summary>
            Gets the <see cref="T:XInputium.XInput.XInputButton"/> instance associated 
            with the specified <see cref="T:XInputium.XInput.XButtons"/> constant.
            </summary>
            <param name="button"><see cref="T:XInputium.XInput.XButtons"/> constant 
            representing the button to get the <see cref="T:XInputium.XInput.XInputButton"/> 
            associate with it.</param>
            <returns>The <see cref="T:XInputium.XInput.XInputButton"/> instance associated 
            with <paramref name="button"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="button"/> 
            is not a defined constant of an <see cref="T:XInputium.XInput.XButtons"/> 
            enumeration.</exception>
            <seealso cref="T:XInputium.XInput.XInputButton"/>
        </member>
        <member name="P:XInputium.XInput.XInputButtonSet.PressedButtonsCount">
            <summary>
            Gets the number of buttons that are currently being pressed.
            </summary>
            <seealso cref="P:XInputium.XInput.XInputButtonSet.IsAnyButtonPressed"/>
        </member>
        <member name="P:XInputium.XInput.XInputButtonSet.IsAnyButtonPressed">
            <summary>
            Gets a <see cref="T:System.Boolean"/> that indicates if there is 
            currently any button being pressed.
            </summary>
            <seealso cref="P:XInputium.XInput.XInputButtonSet.PressedButtonsCount"/>
        </member>
        <member name="M:XInputium.XInput.XInputButtonSet.OnButtonStateChanged(XInputium.DigitalButtonEventArgs{XInputium.XInput.XInputButton})">
            <summary>
            Raises the <see cref="E:XInputium.XInput.XInputButtonSet.ButtonStateChanged"/> event.
            </summary>
            <param name="e"><see cref="T:XInputium.DigitalButtonEventArgs`1"/> 
            instance containing information about the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="e"/> is <see langword="null"/>.</exception>
            <seealso cref="E:XInputium.XInput.XInputButtonSet.ButtonStateChanged"/>
        </member>
        <member name="M:XInputium.XInput.XInputButtonSet.GetEnumerator">
            <summary>
            Gets an enumerator that iterates through the 
            <see cref="T:XInputium.XInput.XInputButton"/> instances of the 
            <see cref="T:XInputium.XInput.XInputButtonSet"/>.
            </summary>
            <returns>An enumerator that can be used to iterate 
            through the buttons of the <see cref="T:XInputium.XInput.XInputButtonSet"/>.</returns>
        </member>
        <member name="M:XInputium.XInput.XInputButtonSet.GetPressedButtons">
            <summary>
            Gets an enumerable that can be used to iterate through 
            all currently pressed buttons in the 
            <see cref="T:XInputium.XInput.XInputButtonSet"/>.
            </summary>
            <returns>An enumerable that iterates through all 
            pressed buttons currently in the 
            <see cref="T:XInputium.XInput.XInputButtonSet"/>.</returns>
            <seealso cref="M:XInputium.XInput.XInputButtonSet.IsPressed(XInputium.XInput.XButtons)"/>
        </member>
        <member name="M:XInputium.XInput.XInputButtonSet.IsPressed(XInputium.XInput.XButtons)">
            <summary>
            Determines if the specified button is currently being 
            pressed.
            </summary>
            <param name="button"><see cref="T:XInputium.XInput.XButtons"/> constant 
            that specifies the button to check.</param>
            <returns><see langword="true"/> if <paramref name="button"/> 
            is currently being pressed; 
            otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="button"/> 
            is not a defined constant of an <see cref="T:XInputium.XInput.XButtons"/> 
            or it is <see cref="F:XInputium.XInput.XButtons.None"/>.</exception>
            <seealso cref="M:XInputium.XInput.XInputButtonSet.IsHolding(XInputium.XInput.XButtons,System.TimeSpan)"/>
        </member>
        <member name="M:XInputium.XInput.XInputButtonSet.IsHolding(XInputium.XInput.XButtons,System.TimeSpan)">
            <summary>
            Determines if the specified button is currently being 
            held (pressed) for, at least, the specified duration.
            </summary>
            <param name="button"><see cref="T:XInputium.XInput.XButtons"/> constant that 
            specifies the button to check.</param>
            <param name="duration">Minimum amount of time the button 
            must be held.</param>
            <returns><see langword="true"/> if <paramref name="button"/> 
            is being held for, at least, the amount of time specified 
            by <paramref name="duration"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="button"/> 
            is not a defined constant in an <see cref="T:XInputium.XInput.XButtons"/> 
            enumeration or it is <see cref="F:XInputium.XInput.XButtons.None"/>.</exception>
            <seealso cref="M:XInputium.XInput.XInputButtonSet.IsPressed(XInputium.XInput.XButtons)"/>
        </member>
        <member name="T:XInputium.XInput.XInputButtonSetUpdateCallback">
            <summary>
            Callback delegate outputted by <see cref="T:XInputium.XInput.XInputButtonSet"/> 
            class's constructor, which can be invoked to update the 
            state of the class.
            </summary>
            <param name="buttonsState">A bitwise combination of 
            <see cref="T:XInputium.XInput.XButtons"/> flags that specify what XInput 
            buttons are pressed.</param>
            <param name="time">Amount of time elapsed since the last 
            state update operation.</param>
            <seealso cref="T:XInputium.XInput.XInputButtonSet"/>
        </member>
        <member name="T:XInputium.XInput.XInputDevice">
            <summary>
            Represents an XInput controller device.
            </summary>
            <remarks>
            <see cref="T:XInputium.XInput.XInputDevice"/> provides the means to 
            communicate with an XInput device that is connected to 
            the system. You instantiate an <see cref="T:XInputium.XInput.XInputDevice"/> 
            class to communicate with a single XInput device that 
            may or may not be connected at a specific XInput user 
            index.
            <br/><br/>
            <see cref="T:XInputium.XInput.XInputDevice"/> provides several static 
            members that provide you with ways to determine what 
            XInput devices are available on the system or to get 
            and set their state.
            <br/><br/>
            <see cref="T:XInputium.XInput.XInputDevice"/> is designed to be lightweight 
            and, thus, provides only core functionality to work 
            with XInput devices. For an alternative that offers a 
            more complete and comprehensive set of features, 
            consider using <see cref="T:XInputium.XInput.XGamepad"/> class.
            <see cref="T:XInputium.XInput.XGamepad"/> abstracts and extends an 
            <see cref="T:XInputium.XInput.XInputDevice"/> instance to provide 
            more advanced features, at the expense of being more 
            resource intensive than <see cref="T:XInputium.XInput.XInputDevice"/>. 
            See <see cref="T:XInputium.XInput.XGamepad"/> for more information.
            <br/><br/>
            <see cref="T:XInputium.XInput.XInputDevice"/> class is the only type in
            the <see cref="N:XInputium"/> namespace that performs 
            external XInput API calls. This means this is the 
            primary class in the namespace to work with XInput.
            </remarks>
            <seealso cref="T:XInputium.InputDevice`1"/>
            <seealso cref="T:XInputium.XInput.XInputDeviceState"/>
            <seealso cref="T:XInputium.XInput.XGamepad"/>
        </member>
        <member name="M:XInputium.XInput.XInputDevice.#ctor(XInputium.XInput.XInputUserIndex)">
            <summary>
            Initializes a new instance of <see cref="T:XInputium.XInput.XInputDevice"/>
            class that can be used to communicate with an XInput 
            device at the specified XInput user index.
            </summary>
            <param name="userIndex"><see cref="T:XInputium.XInput.XInputUserIndex"/> 
            constant that specifies the XInput user index of the 
            XInput device.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="userIndex"/> is not a defined constant 
            of an <see cref="T:XInputium.XInput.XInputUserIndex"/> enumeration.</exception>
            <seealso cref="T:XInputium.XInput.XInputUserIndex"/>
        </member>
        <member name="P:XInputium.XInput.XInputDevice.UserIndex">
            <summary>
            Gets the user index for the current <see cref="T:XInputium.XInput.XInputDevice"/>.
            </summary>
            <seealso cref="T:XInputium.XInput.XInputUserIndex"/>
        </member>
        <member name="P:XInputium.XInput.XInputDevice.LeftMotorSpeed">
            <summary>
            Gets or sets the rotation speed of the device's left motor.
            </summary>
            <value>A value between 0 and 1, where 0 means the motor is 
            stopped and 1 means the motor is at its full rotation speed.</value>
            <exception cref="T:System.ArgumentException">The value being set to the 
            property is <see cref="F:System.Single.NaN"/>.</exception>
            <remarks>
            The value of this property is based on the last call 
            to <see cref="M:XInputium.XInput.XInputDevice.SetMotorsSpeed(System.Single,System.Single)"/> method. 
            Because of how the internal XInput API works, there is not way 
            to determine the current rotation speed of a device's motor. 
            If you set the motor rotation speed outside the current 
            <see cref="T:XInputium.XInput.XInputDevice"/> instance or if you instantiate 
            the <see cref="T:XInputium.XInput.XInputDevice"/> when the device's motor 
            is not stopped, this property will not return an accurate 
            value until the next time you call 
            <see cref="M:XInputium.XInput.XInputDevice.SetMotorsSpeed(System.Single,System.Single)"/> method.
            <br/><br/>
            Setting the motor speed using this property will require 
            an internal call to the XInput API. If you intend to set 
            the rotation speeds of both motors, consider using 
            <see cref="M:XInputium.XInput.XInputDevice.SetMotorsSpeed(System.Single,System.Single)"/> method, to 
            avoid needing to make an API call for each motor. 
            <see cref="M:XInputium.XInput.XInputDevice.SetMotorsSpeed(System.Single,System.Single)"/> sets the speed 
            of both motors at once, using one single XInput API call.
            </remarks>
            <seealso cref="P:XInputium.XInput.XInputDevice.RightMotorSpeed"/>
            <seealso cref="M:XInputium.XInput.XInputDevice.SetMotorsSpeed(System.Single,System.Single)"/>
        </member>
        <member name="P:XInputium.XInput.XInputDevice.RightMotorSpeed">
            <summary>
            Gets or sets the rotation speed of the device's right motor.
            </summary>
            <value>A value between 0 and 1, where 0 means the motor is 
            stopped and 1 means the motor is at its full rotation speed.</value>
            <exception cref="T:System.ArgumentException">The value being set to the 
            property is <see cref="F:System.Single.NaN"/>.</exception>
            <remarks>
            The value of this property is based on the last call 
            to <see cref="M:XInputium.XInput.XInputDevice.SetMotorsSpeed(System.Single,System.Single)"/> method. 
            Because of how the internal XInput API works, there is not way 
            to determine the current rotation speed of a device's motor. 
            If you set the motor rotation speed outside the current 
            <see cref="T:XInputium.XInput.XInputDevice"/> instance or if you instantiate 
            the <see cref="T:XInputium.XInput.XInputDevice"/> when the device's motor 
            is not stopped, this property will not return an accurate 
            value until the next time you call 
            <see cref="M:XInputium.XInput.XInputDevice.SetMotorsSpeed(System.Single,System.Single)"/> method.
            <br/><br/>
            Setting the motor speed using this property will require 
            an internal call to the XInput API. If you intend to set 
            the rotation speeds of both motors, consider using 
            <see cref="M:XInputium.XInput.XInputDevice.SetMotorsSpeed(System.Single,System.Single)"/> method, to 
            avoid needing to make an API call for each motor. 
            <see cref="M:XInputium.XInput.XInputDevice.SetMotorsSpeed(System.Single,System.Single)"/> sets the speed 
            of both motors at once, using one single XInput API call.
            </remarks>
            <seealso cref="P:XInputium.XInput.XInputDevice.LeftMotorSpeed"/>
            <seealso cref="M:XInputium.XInput.XInputDevice.SetMotorsSpeed(System.Single,System.Single)"/>
        </member>
        <member name="M:XInputium.XInput.XInputDevice.CreateStateInstance">
            <summary>
            Creates a new <see cref="T:XInputium.XInput.XInputDeviceState"/> object. 
            Overrides <see cref="M:XInputium.InputDevice`1.CreateStateInstance"/>.
            </summary>
            <returns>A new <see cref="T:XInputium.XInput.XInputDeviceState"/> object.</returns>
            <seealso cref="T:XInputium.XInput.XInputDeviceState"/>
        </member>
        <member name="M:XInputium.XInput.XInputDevice.UpdateState(XInputium.XInput.XInputDeviceState@)">
            <summary>
            Gets the current state of the XInput device associated 
            with the current <see cref="T:XInputium.XInput.XInputDevice"/>. Overrides 
            <see cref="M:XInputium.InputDevice`1.UpdateState(`0@)"/>
            </summary>
            <returns>An <see cref="T:XInputium.XInput.XInputDeviceState"/> that represents 
            the current state of the XInput device currently connected 
            at <see cref="P:XInputium.XInput.XInputDevice.UserIndex"/>. If no device is connected at 
            <see cref="P:XInputium.XInput.XInputDevice.UserIndex"/>, returns 
            <see cref="F:XInputium.XInput.XInputDeviceState.Empty"/>.</returns>
            <seealso cref="M:XInputium.XInput.XInputDevice.GetState(XInputium.XInput.XInputUserIndex)"/>
            <seealso cref="T:XInputium.XInput.XInputDeviceState"/>
        </member>
        <member name="M:XInputium.XInput.XInputDevice.SetMotorsSpeed(System.Single,System.Single)">
            <summary>
            Sets the rotation speed of both device's motors.
            </summary>
            <param name="leftMotorSpeed">Left motor rotation speed. 
            A value between 0 and 1, where 0 means the motor is 
            stopped and 1 means the motor is rotating at its full 
            rotation speed.</param>
            <param name="rightMotorSpeed">Right motor rotation speed. 
            A value between 0 and 1, where 0 means the motor is 
            stopped and 1 means the motor is rotating at its full 
            rotation speed.</param>
            <returns><see langword="true"/> if the device is connected 
            and the motors rotation speed was successfully set; 
            otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="leftMotorSpeed"/>
            is <see cref="F:System.Single.NaN"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="rightMotorSpeed"/> 
            is <see cref="F:System.Single.NaN"/>.</exception>
            <remarks>
            Although <see cref="P:XInputium.InputDevice`1.IsConnected"/> 
            may report the device is currently connected, it might 
            not be anymore. This property reports the state of the 
            device accordingly to the information currently in 
            <see cref="P:XInputium.InputDevice`1.CurrentState"/> property. 
            This information is only updated when 
            <see cref="M:XInputium.InputDevice`1.Update"/> method is 
            called. This is intended behavior, so the reported state 
            of the device only changes when explicitly asked, through 
            a formal state update. See 
            <see cref="P:XInputium.InputDevice`1.IsConnected"/> property 
            for more information.
            </remarks>
            <seealso cref="M:XInputium.XInput.XInputDevice.SetState(XInputium.XInput.XInputUserIndex,System.Single,System.Single)"/>
        </member>
        <member name="M:XInputium.XInput.XInputDevice.GetState(XInputium.XInput.XInputUserIndex)">
            <summary>
            Gets an <see cref="T:XInputium.XInput.XInputDeviceState"/> that represents 
            the current state of the XInput controller device that 
            is connected at the specified XInput user index.
            </summary>
            <param name="userIndex"><see cref="T:XInputium.XInput.XInputUserIndex"/> 
            constant that specifies the user index where the device 
            can be connected.</param>
            <returns>An <see cref="T:XInputium.XInput.XInputDeviceState"/> state that 
            represents the current state of the device. If no device 
            was found at <paramref name="userIndex"/>, 
            <see cref="P:XInputium.XInput.XInputDeviceState.IsEmpty"/> is returned.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="userIndex"/> 
            is not a defined constant in an <see cref="T:XInputium.XInput.XInputUserIndex"/> 
            enumeration.</exception>
            <remarks>
            XInput only supports up to four controller devices connected 
            simultaneously, and they are represented by an user index. 
            <see cref="T:XInputium.XInput.XInputUserIndex"/> enumeration provides constants 
            that represent these user indexes. This method can get the 
            state of any device at the specified <paramref name="userIndex"/>.
            </remarks>
            <seealso cref="T:XInputium.XInput.XInputDeviceState"/>
        </member>
        <member name="M:XInputium.XInput.XInputDevice.SetState(XInputium.XInput.XInputUserIndex,System.Single,System.Single)">
            <summary>
            Sets the state of the XInput device that is connected 
            at the specified XInput user index.
            </summary>
            <param name="userIndex"><see cref="T:XInputium.XInput.XInputUserIndex"/> 
            constant that specifies the XInput user index of the 
            connected XInput device.</param>
            <param name="leftMotorSpeed">Rotation speed of the left 
            motor. This is a value between 0 and 1, where 0 means 
            the motor is stopped and 1 means the motor is at its 
            full rotation speed.</param>
            <param name="rightMotorSpeed">Rotation speed of the right 
            motor. This is a value between 0 and 1, where 0 means 
            the motor is stopped and 1 means the motor is at its 
            full rotation speed.</param>
            <returns><see langword="true"/> if there is an XInput 
            device connected at <paramref name="userIndex"/> and 
            the state was successfully set; 
            otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="userIndex"/> is not a defined constant 
            of an <see cref="T:XInputium.XInput.XInputUserIndex"/> enumeration.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="leftMotorSpeed"/> is 
            <see cref="F:System.Single.NaN"/>.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="rightMotorSpeed"/> is 
            <see cref="F:System.Single.NaN"/>.</exception>
        </member>
        <member name="M:XInputium.XInput.XInputDevice.IsDeviceConnected(XInputium.XInput.XInputUserIndex)">
            <summary>
            Determines if an XInput device is connected at the specified 
            XInput user index.
            </summary>
            <param name="userIndex"><see cref="T:XInputium.XInput.XInputUserIndex"/> constant 
            that specifies the XInput user index of the device to check.</param>
            <returns><see langword="true"/> if there is a device connected 
            at <paramref name="userIndex"/>; 
            otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="userIndex"/> 
            is not a defined constant in an 
            <see cref="T:XInputium.XInput.XInputUserIndex"/> enumeration.</exception>
            <seealso cref="M:XInputium.XInput.XInputDevice.GetConnectedDeviceIndexes"/>
            <seealso cref="M:XInputium.XInput.XInputDevice.IsAnyDeviceConnected"/>
        </member>
        <member name="M:XInputium.XInput.XInputDevice.GetConnectedDeviceIndexes">
            <summary>
            Gets an enumerable that can iterate through the XInput user 
            indexes of all of the XInput devices that are currently 
            connected to the system.
            </summary>
            <returns>A enumerable that can be used to iterate through 
            the XInput user indexes of the devices that are currently 
            connected to the system.</returns>
            <remarks>
            You can use XInput user index to get the current state of 
            the associated XInput device using 
            <see cref="M:XInputium.XInput.XInputDevice.GetState(XInputium.XInput.XInputUserIndex)"/> method or you 
            can create an <see cref="T:XInputium.XInput.XInputDevice"/> instance to 
            continuously obtain the state of the XInput device 
            connected at the user index.
            </remarks>
            <seealso cref="M:XInputium.XInput.XInputDevice.IsDeviceConnected(XInputium.XInput.XInputUserIndex)"/>
            <seealso cref="M:XInputium.XInput.XInputDevice.IsAnyDeviceConnected"/>
            <seealso cref="T:XInputium.XInput.XInputUserIndex"/>
        </member>
        <member name="M:XInputium.XInput.XInputDevice.IsAnyDeviceConnected">
            <summary>
            Determines if there is any XInput controller device 
            currently connected to the system.
            </summary>
            <returns><see langword="true"/> if there is, at least, 
            one XInput device connected to the system; 
            otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:XInputium.XInput.XInputDevice.GetConnectedDeviceIndexes"/>
            <seealso cref="M:XInputium.XInput.XInputDevice.IsDeviceConnected(XInputium.XInput.XInputUserIndex)"/>
        </member>
        <member name="M:XInputium.XInput.XInputDevice.GetFirstConnectedDevice">
            <summary>
            Tries to find a connected XInput device and returns 
            an <see cref="T:XInputium.XInput.XInputDevice"/> instance that can be used 
            to communicate the with the first device that was found.
            </summary>
            <returns>A new <see cref="T:XInputium.XInput.XInputDevice"/> instance that 
            represents the first XInput device that was found 
            connected to the system, in order of XInput user index. 
            If no connected device was found, returns 
            <see langword="null"/>.</returns>
            <seealso cref="M:XInputium.XInput.XInputDevice.IsAnyDeviceConnected"/>
            <seealso cref="M:XInputium.XInput.XInputDevice.IsDeviceConnected(XInputium.XInput.XInputUserIndex)"/>
            <seealso cref="M:XInputium.XInput.XInputDevice.GetConnectedDeviceIndexes"/>
        </member>
        <member name="T:XInputium.XInput.XInputDeviceEventArgs">
            <summary>
            Encapsulates information about an event associated 
            with an <see cref="T:XInputium.XInput.XInputDevice"/> instance.
            </summary>
            <seealso cref="T:XInputium.XInput.XInputDevice"/>
            <seealso cref="T:System.EventArgs"/>
        </member>
        <member name="M:XInputium.XInput.XInputDeviceEventArgs.#ctor(XInputium.XInput.XInputDevice)">
            <summary>
            Initializes a new instance of an 
            <see cref="T:XInputium.XInput.XInputDeviceEventArgs"/> class, 
            that is associated with the specified 
            <see cref="T:XInputium.XInput.XInputDevice"/> instance.
            </summary>
            <param name="device"><see cref="T:XInputium.XInput.XInputDevice"/> instance 
            associated with the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="device"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:XInputium.XInput.XInputDeviceEventArgs.Device">
            <summary>
            Gets the <see cref="T:XInputium.XInput.XInputDevice"/> instance 
            associated with the event.
            </summary>
            <seealso cref="T:XInputium.XInput.XInputDevice"/>
        </member>
        <member name="T:XInputium.XInput.XInputDeviceManager">
            <summary>
            Provides the means to determine the state of all supported 
            users of XInput devices in the system, and manages a group 
            of <see cref="T:XInputium.XInput.XInputDevice"/> instances that represent the 
            underlying XInput devices.
            </summary>
            <seealso cref="T:XInputium.XInput.XInputDevice"/>
        </member>
        <member name="M:XInputium.XInput.XInputDeviceManager.#ctor">
            <summary>
            Initializes a new instance of an 
            <see cref="T:XInputium.XInput.XInputDeviceManager"/> class.
            </summary>
        </member>
        <member name="E:XInputium.XInput.XInputDeviceManager.DeviceConnected">
            <summary>
            It's invoked whenever an <see cref="T:XInputium.XInput.XInputDevice"/> in the 
            <see cref="T:XInputium.XInput.XInputDeviceManager"/> is connected.
            </summary>
            <seealso cref="E:XInputium.XInput.XInputDeviceManager.DeviceDisconnected"/>
            <seealso cref="E:XInputium.XInput.XInputDeviceManager.DeviceStateChanged"/>
        </member>
        <member name="E:XInputium.XInput.XInputDeviceManager.DeviceDisconnected">
            <summary>
            It's invoked whenever an <see cref="T:XInputium.XInput.XInputDevice"/> in the 
            <see cref="T:XInputium.XInput.XInputDeviceManager"/> is unconnected.
            </summary>
            <seealso cref="E:XInputium.XInput.XInputDeviceManager.DeviceDisconnected"/>
            <seealso cref="E:XInputium.XInput.XInputDeviceManager.DeviceStateChanged"/>
        </member>
        <member name="E:XInputium.XInput.XInputDeviceManager.DeviceStateChanged">
            <summary>
            It's invoked whenever the state of an <see cref="T:XInputium.XInput.XInputDevice"/> 
            in the <see cref="T:XInputium.XInput.XInputDeviceManager"/> changes.
            </summary>
            <seealso cref="E:XInputium.XInput.XInputDeviceManager.DeviceConnected"/>
            <seealso cref="E:XInputium.XInput.XInputDeviceManager.DeviceDisconnected"/>
        </member>
        <member name="E:XInputium.XInput.XInputDeviceManager.PropertyChanged">
            <summary>
            It's invoked whenever a value of a property in the 
            <see cref="T:XInputium.XInput.XInputDeviceManager"/> changes. Implements 
            <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>.
            </summary>
            <seealso cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>
        </member>
        <member name="P:XInputium.XInput.XInputDeviceManager.UserOne">
            <summary>
            Gets the <see cref="T:XInputium.XInput.XInputDevice"/> instance 
            associated with the XINput device at the 
            XInput user index <see cref="F:XInputium.XInput.XInputUserIndex.One"/>.
            </summary>
        </member>
        <member name="P:XInputium.XInput.XInputDeviceManager.UserTwo">
            <summary>
            Gets the <see cref="T:XInputium.XInput.XInputDevice"/> instance 
            associated with the XINput device at the 
            XInput user index <see cref="F:XInputium.XInput.XInputUserIndex.Two"/>.
            </summary>
        </member>
        <member name="P:XInputium.XInput.XInputDeviceManager.UserThree">
            <summary>
            Gets the <see cref="T:XInputium.XInput.XInputDevice"/> instance 
            associated with the XINput device at the 
            XInput user index <see cref="F:XInputium.XInput.XInputUserIndex.Three"/>.
            </summary>
        </member>
        <member name="P:XInputium.XInput.XInputDeviceManager.UserFour">
            <summary>
            Gets the <see cref="T:XInputium.XInput.XInputDevice"/> instance 
            associated with the XINput device at the 
            XInput user index <see cref="F:XInputium.XInput.XInputUserIndex.Four"/>.
            </summary>
        </member>
        <member name="P:XInputium.XInput.XInputDeviceManager.ConnectedDevices">
            <summary>
            Gets a collection that contains the <see cref="T:XInputium.XInput.XInputDevice"/>
            instances that represent currently connected XInput devices, 
            accordingly to the device's last state update.
            </summary>
            <seealso cref="P:XInputium.XInput.XInputDeviceManager.IsAnyDeviceConnected"/>
        </member>
        <member name="P:XInputium.XInput.XInputDeviceManager.IsAnyDeviceConnected">
            <summary>
            Gets a <see cref="T:System.Boolean"/> that indicates if there 
            are any <see cref="T:XInputium.XInput.XInputDevice"/> connected, in 
            the <see cref="T:XInputium.XInput.XInputDeviceManager"/>.
            </summary>
            <remarks>
            The value returned by this property is based on 
            the state each XInput device had at the time it 
            was last updated. Calling <see cref="M:XInputium.XInput.XInputDeviceManager.Update"/> 
            method updates all XInput devices of the 
            <see cref="T:XInputium.XInput.XInputDeviceManager"/>.
            </remarks>
            <seealso cref="P:XInputium.XInput.XInputDeviceManager.ConnectedDevices"/>
        </member>
        <member name="P:XInputium.XInput.XInputDeviceManager.Item(XInputium.XInput.XInputUserIndex)">
            <summary>
            Gets the <see cref="T:XInputium.XInput.XInputDevice"/> instance that represents 
            an XInput device that can be connected at the specified 
            XInput user index.
            </summary>
            <param name="userIndex"><see cref="T:XInputium.XInput.XInputUserIndex"/> 
            constant that specifies the XInput user index of the 
            XInput device to obtain.</param>
            <returns>The <see cref="T:XInputium.XInput.XInputDevice"/> instance associated 
            with <paramref name="userIndex"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="userIndex"/> 
            is not a defined constant in an <see cref="T:XInputium.XInput.XInputUserIndex"/> 
            enumeration.</exception>
            <seealso cref="T:XInputium.XInput.XInputUserIndex"/>
        </member>
        <member name="M:XInputium.XInput.XInputDeviceManager.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:XInputium.XInput.XInputDeviceManager.PropertyChanged"/> event.
            </summary>
            <param name="e"><see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> 
            instance containing information about the event. You can 
            pass <see langword="null"/> to specify no specific property.</param>
            <seealso cref="E:XInputium.XInput.XInputDeviceManager.PropertyChanged"/>
        </member>
        <member name="M:XInputium.XInput.XInputDeviceManager.OnDeviceConnected(XInputium.XInput.XInputDeviceEventArgs)">
            <summary>
            Invokes the <see cref="E:XInputium.XInput.XInputDeviceManager.DeviceConnected"/> event.
            </summary>
            <param name="e"><see cref="T:XInputium.XInput.XInputDeviceEventArgs"/> instance
            containing information about the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="e"/> is <see langword="null"/>.</exception>
            <seealso cref="E:XInputium.XInput.XInputDeviceManager.DeviceConnected"/>
        </member>
        <member name="M:XInputium.XInput.XInputDeviceManager.OnDeviceDisconnected(XInputium.XInput.XInputDeviceEventArgs)">
            <summary>
            Invokes the <see cref="E:XInputium.XInput.XInputDeviceManager.DeviceDisconnected"/> event.
            </summary>
            <param name="e"><see cref="T:XInputium.XInput.XInputDeviceEventArgs"/> instance
            containing information about the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="e"/> is <see langword="null"/>.</exception>
            <seealso cref="E:XInputium.XInput.XInputDeviceManager.DeviceDisconnected"/>
        </member>
        <member name="M:XInputium.XInput.XInputDeviceManager.OnDeviceStateChanged(XInputium.XInput.XInputDeviceEventArgs)">
            <summary>
            Invokes the <see cref="E:XInputium.XInput.XInputDeviceManager.DeviceStateChanged"/> event.
            </summary>
            <param name="e"><see cref="T:XInputium.XInput.XInputDeviceEventArgs"/> instance
            containing information about the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="e"/> is <see langword="null"/>.</exception>
            <seealso cref="E:XInputium.XInput.XInputDeviceManager.DeviceStateChanged"/>
        </member>
        <member name="M:XInputium.XInput.XInputDeviceManager.Update">
            <summary>
            Updates the state of the <see cref="T:XInputium.XInput.XInputDevice"/> 
            instances in the <see cref="T:XInputium.XInput.XInputDeviceManager"/>.
            </summary>
            <returns><see langword="true"/> if any device reported 
            a state change; otherwise, <see langword="false"/>.</returns>
            <remarks>
            Call this method to update the states of all 
            <see cref="T:XInputium.XInput.XInputDevice"/> instances in the 
            <see cref="T:XInputium.XInput.XInputDeviceManager"/> at once.
            </remarks>
        </member>
        <member name="M:XInputium.XInput.XInputDeviceManager.GetEnumerator">
            <summary>
            Gets an enumerator that iterates though all of the devices 
            of the <see cref="T:XInputium.XInput.XInputDeviceManager"/>.
            </summary>
            <returns>An enumerator that can be used to iterate though 
            all of the devices of the <see cref="T:XInputium.XInput.XInputDeviceManager"/>.</returns>
        </member>
        <member name="T:XInputium.XInput.XInputDeviceState">
            <summary>
            Implements an <see cref="T:XInputium.IInputDeviceState"/> interface 
            that represents the state of an XInput controller device. 
            This is a read-only structure.
            </summary>
            <remarks>
            You can obtain the current of an XInput controller device 
            by using the <see cref="T:XInputium.XInput.XInputDevice"/> class. The static 
            <see cref="M:XInputium.XInput.XInputDevice.GetState(XInputium.XInput.XInputUserIndex)"/> method 
            returns an <see cref="T:XInputium.XInput.XInputDeviceState"/> object that 
            represents a device's current state. You can also instantiate 
            an <see cref="T:XInputium.XInput.XInputDevice"/> class and use its methods and 
            properties to get the current device's state.
            </remarks>
            <seealso cref="T:XInputium.XInput.XInputDevice"/>
            <seealso cref="T:XInputium.IInputDeviceState"/>
        </member>
        <member name="F:XInputium.XInput.XInputDeviceState.Empty">
            <summary>
            An <see cref="T:XInputium.XInput.XInputDeviceState"/> that represents an 
            unconnected XInput device state, with no buttons pressed 
            and all axes at 0.
            </summary>
            <seealso cref="F:XInputium.SlimJoystick.Zero"/>
            <seealso cref="F:XInputium.SlimTrigger.Zero"/>
        </member>
        <member name="M:XInputium.XInput.XInputDeviceState.#ctor(System.Boolean,XInputium.XInput.XButtons,XInputium.SlimJoystick,XInputium.SlimJoystick,XInputium.SlimTrigger,XInputium.SlimTrigger)">
            <summary>
            Creates a new <see cref="T:XInputium.XInput.XInputDeviceState"/> that represents 
            an XInput device state that has the specified properties.
            </summary>
            <param name="isConnected"><see langword="true"/> if the device 
            is connected to the system, or <see langword="false"/> if the 
            device is not connected.</param>
            <param name="buttons">A bitwise combination of <see cref="T:XInputium.XInput.XButtons"/> 
            flags that specify what buttons are currently pressed on the 
            device.</param>
            <param name="leftJoystick">A <see cref="T:XInputium.SlimJoystick"/> object 
            that represents the state of the device's left joystick.</param>
            <param name="rightJoystick">A <see cref="T:XInputium.SlimJoystick"/> object 
            that represents the state of the device's right joystick.</param>
            <param name="leftTrigger">A <see cref="T:XInputium.SlimJoystick"/> object 
            that represents the state of the device's left trigger.</param>
            <param name="rightTrigger">A <see cref="T:XInputium.SlimJoystick"/> object 
            that represents the state of the device's right trigger.</param>
        </member>
        <member name="M:XInputium.XInput.XInputDeviceState.op_Equality(XInputium.XInput.XInputDeviceState,XInputium.XInput.XInputDeviceState)">
            <summary>
            Compares both specified <see cref="T:XInputium.XInput.XInputDeviceState"/> 
            objects for equality.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><see langword="true"/> if <paramref name="left"/> 
            is identical to <paramref name="right"/>; 
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:XInputium.XInput.XInputDeviceState.op_Inequality(XInputium.XInput.XInputDeviceState,XInputium.XInput.XInputDeviceState)">
            <summary>
            Compares both specified <see cref="T:XInputium.XInput.XInputDeviceState"/> 
            objects for inequality.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><see langword="true"/> if <paramref name="left"/> 
            is <b>not</b> identical to <paramref name="right"/>; 
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:XInputium.XInput.XInputDeviceState.IsConnected">
            <summary>
            Gets a <see cref="T:System.Boolean"/> that indicates if the device 
            is currently connected to the system.
            </summary>
            <returns><see langword="true"/> if the device is connected; 
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:XInputium.XInput.XInputDeviceState.Buttons">
            <summary>
            Gets a combination of <see cref="T:XInputium.XInput.XButtons"/> flags that specify the 
            XInput buttons that are currently being pressed.
            </summary>
            <remarks>
            <returns>A combination of <see cref="T:XInputium.XInput.XButtons"/> bitwise flags that 
            represent the pressed buttons; or <see cref="F:XInputium.XInput.XButtons.None"/> if no 
            button is currently being pressed.</returns>
            For convenience, you can use <see cref="M:XInputium.XInput.XInputDeviceState.IsButtonPressed(XInputium.XInput.XButtons)"/> 
            method to determine if a specific button is being pressed.
            </remarks>
            <seealso cref="M:XInputium.XInput.XInputDeviceState.IsButtonPressed(XInputium.XInput.XButtons)"/>
        </member>
        <member name="P:XInputium.XInput.XInputDeviceState.LeftJoystick">
            <summary>
            Gets a <see cref="T:XInputium.SlimJoystick"/> object that represents 
            the position of the device's left joystick.
            </summary>
            <seealso cref="P:XInputium.XInput.XInputDeviceState.RightJoystick"/>
        </member>
        <member name="P:XInputium.XInput.XInputDeviceState.RightJoystick">
            <summary>
            Gets a <see cref="T:XInputium.SlimJoystick"/> object that represents 
            the position of the device's right joystick.
            </summary>
            <seealso cref="P:XInputium.XInput.XInputDeviceState.LeftJoystick"/>
        </member>
        <member name="P:XInputium.XInput.XInputDeviceState.LeftTrigger">
            <summary>
            Gets a <see cref="T:XInputium.SlimTrigger"/> object that represents 
            the position of the device's left trigger.
            </summary>
            <seealso cref="P:XInputium.XInput.XInputDeviceState.RightTrigger"/>
        </member>
        <member name="P:XInputium.XInput.XInputDeviceState.RightTrigger">
            <summary>
            Gets a <see cref="T:XInputium.SlimTrigger"/> object that represents 
            the position of the device's right trigger.
            </summary>
            <seealso cref="P:XInputium.XInput.XInputDeviceState.LeftTrigger"/>
        </member>
        <member name="P:XInputium.XInput.XInputDeviceState.IsEmpty">
            <summary>
            Gets a <see cref="T:System.Boolean"/> that indicates if the current 
            <see cref="T:XInputium.XInput.XInputDeviceState"/> is empty. An empty 
            <see cref="T:XInputium.XInput.XInputDeviceState"/> object is represented 
            by <see cref="F:XInputium.XInput.XInputDeviceState.Empty"/> static field.
            </summary>
            <seealso cref="F:XInputium.XInput.XInputDeviceState.Empty"/>
        </member>
        <member name="M:XInputium.XInput.XInputDeviceState.GetHashCode">
            <summary>
            Gets the hash code for the current <see cref="T:XInputium.XInput.XInputDeviceState"/>.
            </summary>
            <returns>An <see cref="T:System.Int32"/> that represents the 
            computed hash code for the current 
            <see cref="T:XInputium.XInput.XInputDeviceState"/>.</returns>
            <seealso cref="M:XInputium.XInput.XInputDeviceState.Equals(System.Object)"/>
        </member>
        <member name="M:XInputium.XInput.XInputDeviceState.Equals(System.Object)">
            <summary>
            Determines if the current <see cref="T:XInputium.XInput.XInputDeviceState"/> 
            object is identical to the specified <see cref="T:System.Object"/> 
            instance.
            </summary>
            <param name="obj"><see cref="T:System.Object"/> to compare with the 
            current object.</param>
            <returns><see langword="true"/> if <paramref name="obj"/> 
            is identical to the current <see cref="T:XInputium.XInput.XInputDeviceState"/>;
            otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:XInputium.XInput.XInputDeviceState.GetHashCode"/>
        </member>
        <member name="M:XInputium.XInput.XInputDeviceState.Equals(XInputium.XInput.XInputDeviceState)">
            <summary>
            Determines if the current <see cref="T:XInputium.XInput.XInputDeviceState"/> 
            object is identical to the specified 
            <see cref="T:XInputium.XInput.XInputDeviceState"/>.
            </summary>
            <param name="other"><see cref="T:XInputium.XInput.XInputDeviceState"/> to compare 
            with the current <see cref="T:XInputium.XInput.XInputDeviceState"/>.</param>
            <returns><see langword="true"/> if <paramref name="other"/> 
            is identical to the current <see cref="T:XInputium.XInput.XInputDeviceState"/>;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:XInputium.XInput.XInputDeviceState.IsButtonPressed(XInputium.XInput.XButtons)">
            <summary>
            Determines if the specified XInput button is pressed, 
            accordingly to the current <see cref="T:XInputium.XInput.XInputDeviceState"/>.
            </summary>
            <param name="button">Button to check. This must be a specific 
            button constant, that is not <see cref="F:XInputium.XInput.XButtons.None"/>.</param>
            <returns><see langword="true"/> if <paramref name="button"/> is
             currently pressed; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="button"/> 
            is not a defined constant of an <see cref="T:XInputium.XInput.XButtons"/> 
            enumeration, or it is <see cref="F:XInputium.XInput.XButtons.None"/>.</exception>
            <seealso cref="P:XInputium.XInput.XInputDeviceState.Buttons"/>
        </member>
        <member name="T:XInputium.XInput.XInputUserIndex">
            <summary>
            Exposes constants that represent an XInput user index.
            </summary>
            <remarks>
            XInput supports up to four devices simultaneously connected 
            to the system, and each device is identified by a constant 
            index, which is called User Index. 
            <see cref="T:XInputium.XInput.XInputUserIndex"/> enumeration provides constants 
            that represent these user indexes.
            <br/><br/>
            You use an <see cref="T:XInputium.XInput.XInputUserIndex"/> constant to relate 
            to a specific XInput device in the system, when working with 
            the <see cref="T:XInputium.XInput.XInputDevice"/> and <see cref="T:XInputium.XInput.XGamepad"/> 
            classes. <see cref="T:XInputium.XInput.XInputDevice"/> uses an 
            <see cref="T:XInputium.XInput.XInputUserIndex"/> constant to communicate with 
            a physical XInput device. See <see cref="T:XInputium.XInput.XInputDevice"/> 
            for more information.
            </remarks>
            <seealso cref="T:XInputium.XInput.XInputDevice"/>
        </member>
        <member name="F:XInputium.XInput.XInputUserIndex.One">
            <summary>
            XInput device user One.
            </summary>
        </member>
        <member name="F:XInputium.XInput.XInputUserIndex.Two">
            <summary>
            XInput device user Two.
            </summary>
        </member>
        <member name="F:XInputium.XInput.XInputUserIndex.Three">
            <summary>
            XInput device user Three.
            </summary>
        </member>
        <member name="F:XInputium.XInput.XInputUserIndex.Four">
            <summary>
            XInput device user Four.
            </summary>
        </member>
    </members>
</doc>
